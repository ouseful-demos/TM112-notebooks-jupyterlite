{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/pyolite-kernel-extension/lib/index.js"],"names":["BaseKernel","options","this","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","id","name","sendMessage","_id","_name","_sendMessage","Promise","resolve","isDisposed","emit","msg","_busy","header","msg_type","_kernelInfo","_executeRequest","_complete","_historyRequest","_idle","content","_a","_b","message","KernelMessage","channel","msgType","session","parentHeader","parent","execution_state","kernelInfoRequest","_executeInput","result","executeRequest","code","startsWith","push","Object","keys","data","length","_executeResult","_executeReply","execution_count","status","user_expressions","payload","e","stack","error","ename","evalue","traceback","_error","historyMsg","history","completeMsg","completeRequest","IKernels","Token","IKernelSpecs","PyoliteKernel","super","_executeDelegate","PromiseDelegate","_ready","pyodideUrl","pyoliteWheel","pyoliteWheelUrl","URLExt","window","location","origin","indexUrl","slice","lastIndexOf","blob","Blob","join","_worker","Worker","URL","createObjectURL","onmessage","_processWorkerMessage","console","log","terminate","dispose","promise","type","event","text","stdout","stream","stderr","bundle","results","metadata","displayData","implementation","implementation_version","language_info","codemirror_mode","version","file_extension","mimetype","nbconvert_exporter","pygments_lexer","protocol_version","banner","help_links","url","_eval","executionCount","matches","cursor_start","cursor_end","Error","postMessage","_sendWorkerMessage","autoStart","requires","activate","app","kernelspecs","PageConfig","register","spec","display_name","language","argv","env","interrupt_mode","resources","create","async"],"mappings":"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","file":"1753.bundle.js","sourcesContent":["import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._executeRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param content The display_data content.\n     */\n    displayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _executeRequest(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = msg.header;\n        this._executeInput(msg);\n        try {\n            const result = await this.executeRequest(content);\n            // do not store magics in the history\n            if (!content.code.startsWith('%')) {\n                this._history.push([0, 0, content.code]);\n            }\n            // send the execute result only if there is a result\n            if (Object.keys(result.data).length > 0) {\n                this._executeResult(msg, result);\n            }\n            this._executeReply(msg, {\n                execution_count: this._executionCount,\n                status: 'ok',\n                user_expressions: {},\n                payload: []\n            });\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            const error = {\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            };\n            this._error(msg, error);\n            this._executeReply(msg, {\n                execution_count: this._executionCount,\n                status: 'error',\n                ...error\n            });\n        }\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param msg The parent message.\n     * @param content The execut result content.\n     */\n    _executeResult(msg, content) {\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_result',\n            parentHeader: msg.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                ...content,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_reply` message.\n     *\n     * @param msg The parent message.\n     * @param content The content for the execute reply.\n     */\n    _executeReply(msg, content) {\n        const parent = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: parent.header,\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message.\n     *\n     * @param msg The parent message.\n     * @param content The content for the execution error response.\n     */\n    _error(msg, content) {\n        const message = KernelMessage.createMessage({\n            msgType: 'error',\n            parentHeader: msg.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport worker from './worker?raw';\nimport pyolite from '../py/pyolite/dist/pyolite-0.1.0-py3-none-any.whl';\n/**\n * A kernel that executes Python code with Pyodide.\n */\nexport class PyoliteKernel extends BaseKernel {\n    /**\n     * Instantiate a new PyodideKernel\n     *\n     * @param options The instantiation options for a new PyodideKernel\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._executeDelegate = new PromiseDelegate();\n        this._ready = new PromiseDelegate();\n        const { pyodideUrl } = options;\n        const pyoliteWheel = (_a = options.pyoliteWheel) !== null && _a !== void 0 ? _a : pyolite;\n        const pyoliteWheelUrl = URLExt.join(window.location.origin, pyoliteWheel);\n        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);\n        const blob = new Blob([\n            [\n                `importScripts(\"${pyodideUrl}\");`,\n                `var indexURL = \"${indexUrl}\";`,\n                `var _pyoliteWheelUrl = '${pyoliteWheelUrl}'`,\n                worker\n            ].join('\\n')\n        ]);\n        this._worker = new Worker(window.URL.createObjectURL(blob));\n        this._worker.onmessage = e => {\n            this._processWorkerMessage(e.data);\n        };\n        this._ready.resolve();\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        console.log(`Dispose worker for kernel ${this.id}`);\n        this._worker.terminate();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Process a message coming from the pyodide web worker.\n     *\n     * @param msg The worker message to process.\n     */\n    _processWorkerMessage(msg) {\n        var _a, _b;\n        const parentHeader = this.parentHeader;\n        switch (msg.type) {\n            case 'stdout': {\n                const content = {\n                    event: 'stream',\n                    name: 'stdout',\n                    parentHeader,\n                    text: msg.stdout\n                };\n                this.stream(content);\n                break;\n            }\n            case 'stderr': {\n                const { message } = msg.stderr;\n                const content = {\n                    event: 'stream',\n                    name: 'stderr',\n                    parentHeader,\n                    text: message !== null && message !== void 0 ? message : msg.stderr\n                };\n                this.stream(content);\n                break;\n            }\n            case 'results': {\n                const bundle = (_a = msg.results) !== null && _a !== void 0 ? _a : { data: {}, metadata: {} };\n                this._executeDelegate.resolve(bundle);\n                break;\n            }\n            case 'error': {\n                const { name, stack, message } = msg.error;\n                const error = {\n                    name,\n                    stack,\n                    message\n                };\n                this._executeDelegate.resolve({\n                    ...error,\n                    parentHeader\n                });\n                break;\n            }\n            case 'display': {\n                const bundle = (_b = msg.bundle) !== null && _b !== void 0 ? _b : { data: {}, metadata: {} };\n                this.displayData(bundle);\n                break;\n            }\n            default:\n                this._executeDelegate.resolve({\n                    data: {},\n                    metadata: {}\n                });\n                break;\n        }\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'pyodide',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'python',\n                    version: 3\n                },\n                file_extension: '.py',\n                mimetype: 'text/x-python',\n                name: 'python',\n                nbconvert_exporter: 'python',\n                pygments_lexer: 'ipython3',\n                version: '3.8'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'Pyolite: A WebAssembly-powered Python kernel backed by Pyodide',\n            help_links: [\n                {\n                    text: 'Python (WASM) Kernel',\n                    url: 'https://pyodide.org'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        const result = await this._eval(code);\n        if (result.name) {\n            throw result;\n        }\n        // TODO: move executeResult and executeError here\n        return {\n            execution_count: this.executionCount,\n            ...result\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        // TODO\n        return {\n            matches: [],\n            cursor_start: 0,\n            cursor_end: 0,\n            metadata: {},\n            status: 'ok'\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_request` message.\n     *\n     * @param content - The content of the request.\n     */\n    async inputRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send a message to the web worker\n     *\n     * @param msg The message to send to the worker.\n     */\n    async _sendWorkerMessage(msg) {\n        this._executeDelegate = new PromiseDelegate();\n        this._worker.postMessage(msg);\n        return await this._executeDelegate.promise;\n    }\n    /**\n     * Send code to be executed in the web worker\n     *\n     * @param code The code to execute.\n     */\n    async _eval(code) {\n        return this._sendWorkerMessage({ code });\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { PyoliteKernel } from '@jupyterlite/pyolite-kernel';\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.17.0/full/pyodide.js';\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/pyolite-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        const url = PageConfig.getOption('pyodideUrl') || PYODIDE_CDN_URL;\n        const pyodideUrl = URLExt.isLocal(url)\n            ? URLExt.join(window.location.origin, url)\n            : url;\n        kernelspecs.register({\n            spec: {\n                name: 'python',\n                display_name: 'Pyolite',\n                language: 'python',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'Pyolite',\n                    language: 'python',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/python.png'\n                }\n            },\n            create: async (options) => {\n                return new PyoliteKernel({\n                    ...options,\n                    pyodideUrl\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"sourceRoot":""}