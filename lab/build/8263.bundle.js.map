{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/mutex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/awareness.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js"],"names":["createMutex","token","f","g","undefined","Awareness","doc","super","this","clientID","states","Map","meta","_checkInterval","setInterval","now","getLocalState","outdatedTimeout","get","lastUpdated","setLocalState","remove","forEach","clientid","has","push","length","removeAwarenessStates","on","destroy","emit","clearInterval","state","currLocalMeta","clock","prevState","delete","set","added","updated","filteredUpdated","removed","field","value","awareness","clients","origin","i","curMeta","encodeAwarenessUpdate","len","encoder","JSON","stringify","applyAwarenessUpdate","update","decoder","timestamp","parse","clientMeta","currClock","channels","BC","BroadcastChannel","room","onmessage","storage","e","key","data","buffer","newValue","buf","getChannel","map","subs","Set","bc","sub","publish","c","postMessage","writeSyncStep1","sv","writeSyncStep2","encodedStateVector","readSyncStep2","transactionOrigin","decoding","error","console","readUpdate","messageHandlers","provider","emitSynced","messageType","syncMessageType","readSyncStep1","Error","synced","Array","from","getStates","keys","y","permissionDeniedHandler","reason","warn","url","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","Uint8Array","send","onclose","filter","client","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","slice","encodedParams","object","val","encodeURIComponent","join","mutex","_synced","_resyncInterval","_bcSubscriber","_updateHandler","_awarenessUpdateHandler","changedClients","concat","window","addEventListener","close","messageReconnectTimeout","disconnect","off","add","encoderSync","encoderState","encoderAwarenessQuery","disconnectBc","connectBc"],"mappings":"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","file":"8263.bundle.js","sourcesContent":["/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/**\n * @module awareness-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as time from 'lib0/time'\nimport * as math from 'lib0/math'\nimport { Observable } from 'lib0/observable'\nimport * as f from 'lib0/function'\nimport * as Y from 'yjs' // eslint-disable-line\n\nexport const outdatedTimeout = 30000\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nexport class Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super()\n    this.doc = doc\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map()\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map()\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = time.getUnixTime()\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState())\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = []\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid)\n        }\n      })\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout')\n      }\n    }, math.floor(outdatedTimeout / 10)))\n    doc.on('destroy', () => {\n      this.destroy()\n    })\n    this.setLocalState({})\n  }\n\n  destroy () {\n    this.emit('destroy', [this])\n    this.setLocalState(null)\n    super.destroy()\n    clearInterval(this._checkInterval)\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID\n    const currLocalMeta = this.meta.get(clientID)\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1\n    const prevState = this.states.get(clientID)\n    if (state === null) {\n      this.states.delete(clientID)\n    } else {\n      this.states.set(clientID, state)\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: time.getUnixTime()\n    })\n    const added = []\n    const updated = []\n    const filteredUpdated = []\n    const removed = []\n    if (state === null) {\n      removed.push(clientID)\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID)\n      }\n    } else {\n      updated.push(clientID)\n      if (!f.equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID)\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local'])\n    }\n    this.emit('update', [{ added, updated, removed }, 'local'])\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState()\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      })\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nexport const removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = []\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i]\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID)\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID))\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: time.getUnixTime()\n        })\n      }\n      removed.push(clientID)\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin])\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin])\n  }\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nexport const encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i]\n    const state = states.get(clientID) || null\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(state))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */\nexport const modifyAwarenessUpdate = (update, modify) => {\n  const decoder = decoding.createDecoder(update)\n  const encoder = encoding.createEncoder()\n  const len = decoding.readVarUint(decoder)\n  encoding.writeVarUint(encoder, len)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    const clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const modifiedState = modify(state)\n    encoding.writeVarUint(encoder, clientID)\n    encoding.writeVarUint(encoder, clock)\n    encoding.writeVarString(encoder, JSON.stringify(modifiedState))\n  }\n  return encoding.toUint8Array(encoder)\n}\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nexport const applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = decoding.createDecoder(update)\n  const timestamp = time.getUnixTime()\n  const added = []\n  const updated = []\n  const filteredUpdated = []\n  const removed = []\n  const len = decoding.readVarUint(decoder)\n  for (let i = 0; i < len; i++) {\n    const clientID = decoding.readVarUint(decoder)\n    let clock = decoding.readVarUint(decoder)\n    const state = JSON.parse(decoding.readVarString(decoder))\n    const clientMeta = awareness.meta.get(clientID)\n    const prevState = awareness.states.get(clientID)\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++\n        } else {\n          awareness.states.delete(clientID)\n        }\n      } else {\n        awareness.states.set(clientID, state)\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      })\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID)\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID)\n      } else if (state !== null) {\n        if (!f.equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID)\n        }\n        updated.push(clientID)\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin])\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin])\n  }\n}\n","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n      })\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n"],"sourceRoot":""}