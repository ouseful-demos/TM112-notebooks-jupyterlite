{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/notebook-extension/lib/index.js"],"names":["logNotebookOutput","activate","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","logger","getLogger","context","path","rendermime","content","data","Object","assign","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","id","requires","INotebookTracker","optional","ILoggerRegistry","autoStart","CommandIDs","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","createConsole","createOutputView","clearAllOutputs","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","mergeAbove","mergeBelow","split","commandMode","toggleAllLines","undoCellAction","redoCellAction","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","FACTORY","FORMAT_EXCLUDE","trackerPlugin","provides","INotebookWidgetFactory","ITranslator","ICommandPalette","IFileBrowserFactory","ILauncher","ILayoutRestorer","IMainMenu","ISettingRegistry","ISessionContextDialogs","factory","translator","palette","browserFactory","launcher","restorer","mainMenu","settingRegistry","sessionDialogs","trans","load","services","serviceManager","commands","tracker","NotebookTracker","namespace","restore","command","args","panel","when","ready","docRegistry","addModelFactory","NotebookModelFactory","shell","sessionContextDialogs","isEnabled","Private","isEnabledAndSingleSelected","addCommand","label","__","execute","current","getCurrent","NotebookActions","currentWidget","activeCellIndex","widgets","length","fileName","title","showDialog","body","buttons","Dialog","then","result","button","accept","shutdown","dispose","save","restarted","executed","_a","kernel","session","mode","selectKernel","reconnect","text","addCommands","category","addItem","isPalette","populatePalette","ft","getFileType","updateTracker","options","widget","setConfig","updateConfig","settings","code","StaticNotebook","get","composite","markdown","raw","editorConfig","notebookConfig","scrollPastEnd","defaultCell","recordTiming","maxNumberOutputs","shutdownOnClose","kernelShutdown","widgetCreated","sender","_b","icon","iconClass","iconLabel","pathChanged","add","fetchSettings","Promise","reject","Error","restored","changed","catch","reason","console","warn","message","editMenu","undoers","undo","activeCell","editor","redo","clearers","clearCurrentLabel","n","clearAllLabel","clearCurrent","clearAll","fileMenu","newMenu","addGroup","closeAndCleaners","closeAndCleanupLabel","closeAndCleanup","kernelMenu","kernelUsers","interruptKernel","resolve","restartKernelAndClearLabel","restartKernel","restartKernelAndClear","shutdownKernel","consoleCreators","createConsoleLabel","collapseGroup","map","viewMenu","expandGroup","editorViewers","toggleLineNumbers","lineNumbersToggled","config","lineNumbers","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","restartAndRunAll","runExtras","runAboveBelowGroup","undoCellActionGroup","copyGroup","selectGroup","splitMergeGroup","moveCellsGroup","helpMenu","getKernel","populateMenus","_c","kernelName","kernelspecs","specs","display_name","caption","undefined","notebookIcon","cwd","defaultBrowser","model","disposables","onSpecsChanged","DisposableSet","baseUrl","PageConfig","rank","default","Infinity","spec","kernelIconUrl","resources","index","indexOf","URLExt","slice","isLauncher","metadata","JSONExt","specsChanged","contextMenu","selector","NotebookPanel","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","tools","state","inspectorProvider","notebookTools","NotebookTools","activeCellTool","slideShow","cellMetadataEditor","collapsed","notebookMetadataEditor","nbconvert","getExportFormats","response","rawFormatExclude","optionValueArray","formatList","keys","formatLabels","getFormatLabels","key","altOption","toUpperCase","substr","option","mimeTypeValue","output_mimetype","push","nbConvert","tool","section","buildIcon","MessageLoop","open","remove","register","render","INotebookTools","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","currentChanged","notebook","registerStatusItem","align","isActive","exportPlugin","formatLabel","url","format","download","child","window","opener","dirty","readOnly","location","exportTo","Menu","capCaseKey","labelStr","fileGroup","submenu","notebookTrustItem","tranlator","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","contentFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","mimeTypeService","addWidgetFactory","clonedOutputsPlugin","IDocumentManager","docManager","notebookTracker","clonedOutputs","WidgetTracker","async","cell","findWidget","ClonedOutputArea","MainAreaWidget","addSibling","ref","updateCloned","cells","disposed","disconnect","codeConsolePlugin","toJSON","selection","getSelection","start","end","column","line","getOffsetAt","value","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","fromFirst","firstLine","lastLine","join","reply","requestIsComplete","status","setCursorPosition","insertMode","activateById","preferredLanguage","defaultKernelLanguage","i","isSelected","nullTranslator","html","latex","pdf","rst","script","slides","Panel","super","this","_cell","_notebook","_index","UUID","addClass","clone","cloneOutputArea","addWidget","ArrayExt","c"],"mappings":"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","file":"8389.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = Object.assign(Object.assign({}, msg.content), { output_type: msg.header.msg_type });\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, ISessionContextDialogs, MainAreaWidget, showDialog, WidgetTracker, sessionContextDialogs } from '@jupyterlab/apputils';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { NotebookTools, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookModelFactory, NotebookPanel, NotebookTracker, NotebookWidgetFactory, StaticNotebook, CommandEditStatus, NotebookTrustStatus } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { nullTranslator, ITranslator } from '@jupyterlab/translation';\nimport { buildIcon, notebookIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel, Menu } from '@lumino/widgets';\nimport { logNotebookOutput } from './nboutput';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.mergeAbove = 'notebook:merge-cell-above';\n    CommandIDs.mergeBelow = 'notebook:merge-cell-below';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The exluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    provides: INotebookTracker,\n    requires: [INotebookWidgetFactory, ITranslator],\n    optional: [\n        ICommandPalette,\n        IFileBrowserFactory,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        ISessionContextDialogs\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IStateDB, ITranslator],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin providing export commands in the main menu and command palette\n */\nexport const exportPlugin = {\n    id: '@jupyterlab/notebook-extension:export',\n    autoStart: true,\n    requires: [ITranslator, INotebookTracker],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, tracker, mainMenu, palette) => {\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const services = app.serviceManager;\n        const isEnabled = () => {\n            return Private.isEnabled(shell, tracker);\n        };\n        commands.addCommand(CommandIDs.exportToFormat, {\n            label: args => {\n                const formatLabel = args['label'];\n                return args['isPalette']\n                    ? trans.__('Export Notebook: %1', formatLabel)\n                    : formatLabel;\n            },\n            execute: args => {\n                const current = getCurrent(tracker, shell, args);\n                if (!current) {\n                    return;\n                }\n                const url = PageConfig.getNBConvertURL({\n                    format: args['format'],\n                    download: true,\n                    path: current.context.path\n                });\n                const child = window.open('', '_blank');\n                const { context } = current;\n                if (child) {\n                    child.opener = null;\n                }\n                if (context.model.dirty && !context.model.readOnly) {\n                    return context.save().then(() => {\n                        child === null || child === void 0 ? void 0 : child.location.assign(url);\n                    });\n                }\n                return new Promise(resolve => {\n                    child === null || child === void 0 ? void 0 : child.location.assign(url);\n                    resolve(undefined);\n                });\n            },\n            isEnabled\n        });\n        // Add a notebook group to the File menu.\n        const exportTo = new Menu({ commands });\n        exportTo.title.label = trans.__('Export Notebook As…');\n        void services.nbconvert.getExportFormats().then(response => {\n            if (response) {\n                const formatLabels = Private.getFormatLabels(translator);\n                // Convert export list to palette and menu items.\n                const formatList = Object.keys(response);\n                formatList.forEach(function (key) {\n                    const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                    let args = {\n                        format: key,\n                        label: labelStr,\n                        isPalette: false\n                    };\n                    if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                        exportTo.addItem({\n                            command: CommandIDs.exportToFormat,\n                            args: args\n                        });\n                        if (palette) {\n                            args = {\n                                format: key,\n                                label: labelStr,\n                                isPalette: true\n                            };\n                            const category = trans.__('Notebook Operations');\n                            palette.addItem({\n                                command: CommandIDs.exportToFormat,\n                                category,\n                                args\n                            });\n                        }\n                    }\n                });\n                if (mainMenu) {\n                    const fileGroup = [\n                        { type: 'submenu', submenu: exportTo }\n                    ];\n                    mainMenu.fileMenu.addGroup(fileGroup, 10);\n                }\n            }\n        });\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, tranlator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(tranlator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISessionContextDialogs,\n        ITranslator\n    ],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * The cloned output provider.\n */\nconst clonedOutputsPlugin = {\n    id: '@jupyterlab/notebook-extension:cloned-outputs',\n    requires: [IDocumentManager, INotebookTracker, ITranslator],\n    optional: [ILayoutRestorer],\n    activate: activateClonedOutputs,\n    autoStart: true\n};\n/**\n * A plugin for code consoles functionalities.\n */\nconst codeConsolePlugin = {\n    id: '@jupyterlab/notebook-extension:code-console',\n    requires: [INotebookTracker, ITranslator],\n    activate: activateCodeConsole,\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    trackerPlugin,\n    exportPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput,\n    clonedOutputsPlugin,\n    codeConsolePlugin\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    const activeCellTool = new NotebookTools.ActiveCellTool();\n    const slideShow = NotebookTools.createSlideShowSelector(translator);\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    const cellMetadataEditor = new NotebookTools.CellMetadataEditorTool({\n        editorFactory,\n        collapsed: false,\n        translator\n    });\n    const notebookMetadataEditor = new NotebookTools.NotebookMetadataEditorTool({\n        editorFactory,\n        translator\n    });\n    const services = app.serviceManager;\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    const optionsMap = {};\n    optionsMap.None = null;\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            /**\n             * The excluded Cell Inspector Raw NbConvert Formats\n             * (returned from nbconvert's export list)\n             */\n            const rawFormatExclude = [\n                'pdf',\n                'slides',\n                'script',\n                'notebook',\n                'custom'\n            ];\n            let optionValueArray = [\n                [trans.__('PDF'), 'pdf'],\n                [trans.__('Slides'), 'slides'],\n                [trans.__('Script'), 'script'],\n                [trans.__('Notebook'), 'notebook'],\n                [trans.__('Custom'), 'custom']\n            ];\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                if (rawFormatExclude.indexOf(key) === -1) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    optionValueArray.push([option, mimeTypeValue]);\n                }\n            });\n            const nbConvert = NotebookTools.createNBConvertSelector(optionValueArray, translator);\n            notebookTools.addItem({ tool: nbConvert, section: 'common', rank: 3 });\n        }\n    });\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    notebookTools.addItem({ tool: activeCellTool, section: 'common', rank: 1 });\n    notebookTools.addItem({ tool: slideShow, section: 'common', rank: 2 });\n    notebookTools.addItem({\n        tool: cellMetadataEditor,\n        section: 'advanced',\n        rank: 1\n    });\n    notebookTools.addItem({\n        tool: notebookMetadataEditor,\n        section: 'advanced',\n        rank: 2\n    });\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, sessionContextDialogs, translator) {\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: true,\n        canStartKernel: true,\n        rendermime: rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        sessionDialogs: sessionContextDialogs,\n        translator: translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the plugin to create and track cloned outputs.\n */\nfunction activateClonedOutputs(app, docManager, notebookTracker, translator, restorer) {\n    const trans = translator.load('jupyterlab');\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    if (restorer) {\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: notebookTracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, notebookTracker);\n    };\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n}\n/**\n * Activate the plugin to add code console functionalities\n */\nfunction activateCodeConsole(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabled = () => Private.isEnabled(shell, tracker);\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata.toJSON();\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.value.text.substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.value.text.split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, translator, palette, browserFactory, launcher, restorer, mainMenu, settingRegistry, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    // Handle state restoration.\n    if (restorer) {\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n    }\n    const registry = app.docRegistry;\n    registry.addModelFactory(new NotebookModelFactory({}));\n    addCommands(app, tracker, translator, sessionDialogs);\n    if (palette) {\n        populatePalette(palette, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.code), settings.get('codeCellConfig').composite);\n        const markdown = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.markdown), settings.get('markdownCellConfig').composite);\n        const raw = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.raw), settings.get('rawCellConfig').composite);\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite,\n            maxNumberOutputs: settings.get('maxNumberOutputs').composite\n        };\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    }\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    app.restored\n        .then(() => fetchSettings)\n        .then(settings => {\n        updateConfig(settings);\n        settings.changed.connect(() => {\n            updateConfig(settings);\n        });\n    })\n        .catch((reason) => {\n        console.warn(reason.message);\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    });\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(app, mainMenu, tracker, translator, sessionDialogs);\n    }\n    // Utility function to create a new notebook.\n    const createNew = (cwd, kernelName) => {\n        return commands\n            .execute('docmanager:new-untitled', { path: cwd, type: 'notebook' })\n            .then(model => {\n            return commands.execute('docmanager:open', {\n                path: model.path,\n                factory: FACTORY,\n                kernel: { name: kernelName }\n            });\n        });\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            const cwd = args['cwd'] ||\n                (browserFactory ? browserFactory.defaultBrowser.model.path : '');\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                const baseUrl = PageConfig.getBaseUrl();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    if (kernelIconUrl) {\n                        const index = kernelIconUrl.indexOf('kernelspecs');\n                        kernelIconUrl = URLExt.join(baseUrl, kernelIconUrl.slice(index));\n                    }\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    // Cell context menu groups\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 0\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.cut,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copy,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.pasteBelow,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.deleteCell,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.split,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.merge,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.mergeAbove,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.mergeBelow,\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-Cell',\n        rank: 9\n    });\n    // CodeCell context menu groups\n    app.contextMenu.addItem({\n        command: CommandIDs.createOutputView,\n        selector: '.jp-Notebook .jp-CodeCell',\n        rank: 10\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook .jp-CodeCell',\n        rank: 11\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.clearOutputs,\n        selector: '.jp-Notebook .jp-CodeCell',\n        rank: 12\n    });\n    // Notebook context menu groups\n    app.contextMenu.addItem({\n        command: CommandIDs.clearAllOutputs,\n        selector: '.jp-Notebook',\n        rank: 0\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook',\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.enableOutputScrolling,\n        selector: '.jp-Notebook',\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.disableOutputScrolling,\n        selector: '.jp-Notebook',\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook',\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.undoCellAction,\n        selector: '.jp-Notebook',\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.redoCellAction,\n        selector: '.jp-Notebook',\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.restart,\n        selector: '.jp-Notebook',\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        type: 'separator',\n        selector: '.jp-Notebook',\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createConsole,\n        selector: '.jp-Notebook',\n        rank: 9\n    });\n    return tracker;\n}\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    const isEnabled = () => {\n        return Private.isEnabled(shell, tracker);\n    };\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, tracker);\n    };\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: trans.__('Run Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: trans.__(\"Run Selected Cells and Don't Advance\"),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: trans.__('Run Selected Cells and Insert Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.renderAllMarkdown(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear All Outputs…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { content, sessionContext } = current;\n                return sessionDialogs.restart(sessionContext, translator).then(() => {\n                    NotebookActions.clearAllOutputs(content);\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return sessionDialogs\n                    .restart(current.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAllAbove(content, context.sessionContext).then(executed => {\n                            if (executed || content.activeCellIndex === 0) {\n                                void NotebookActions.run(content, context.sessionContext);\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content, sessionContext } = current;\n                return sessionDialogs\n                    .restart(sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(content, context.sessionContext);\n                    }\n                    return restarted;\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: trans.__('Cut Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: trans.__('Copy Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: trans.__('Paste Cells Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: trans.__('Paste Cells Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: trans.__('Paste Cells and Replace'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: trans.__('Delete Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeAbove, {\n        label: trans.__('Merge Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeBelow, {\n        label: trans.__('Merge Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, false);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: trans.__('Move Cells Up'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveUp(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: trans.__('Move Cells Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveDown(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Toggle All Line Numbers'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect To Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(app, mainMenu, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    sessionDialogs = sessionDialogs || sessionContextDialogs;\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.add({\n        tracker,\n        undo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.undo();\n        },\n        redo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.redo();\n        }\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.add({\n        tracker,\n        clearCurrentLabel: (n) => trans.__('Clear Output'),\n        clearAllLabel: (n) => {\n            return trans.__('Clear All Outputs');\n        },\n        clearCurrent: (current) => {\n            return NotebookActions.clearOutputs(current.content);\n        },\n        clearAll: (current) => {\n            return NotebookActions.clearAllOutputs(current.content);\n        }\n    });\n    // Add new notebook creation to the file menu.\n    mainMenu.fileMenu.newMenu.addGroup([{ command: CommandIDs.createNew }], 10);\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        tracker,\n        closeAndCleanupLabel: (n) => trans.__('Close and Shutdown Notebook'),\n        closeAndCleanup: (current) => {\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the Notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        }\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n            return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n            return Promise.resolve(void 0);\n        },\n        restartKernelAndClearLabel: (n) => trans.__('Restart Kernel and Clear All Outputs…'),\n        restartKernel: current => sessionDialogs.restart(current.sessionContext, translator),\n        restartKernelAndClear: current => {\n            return sessionDialogs\n                .restart(current.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    NotebookActions.clearAllOutputs(current.content);\n                }\n                return restarted;\n            });\n        },\n        changeKernel: current => sessionDialogs.selectKernel(current.sessionContext, translator),\n        shutdownKernel: current => current.sessionContext.shutdown()\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        tracker,\n        createConsoleLabel: (n) => trans.__('New Console for Notebook'),\n        createConsole: current => Private.createConsole(commands, current, true)\n    });\n    // Add some commands to the application view menu.\n    const collapseGroup = [\n        CommandIDs.hideCode,\n        CommandIDs.hideOutput,\n        CommandIDs.hideAllCode,\n        CommandIDs.hideAllOutputs\n    ].map(command => {\n        return { command };\n    });\n    mainMenu.viewMenu.addGroup(collapseGroup, 10);\n    const expandGroup = [\n        CommandIDs.showCode,\n        CommandIDs.showOutput,\n        CommandIDs.showAllCode,\n        CommandIDs.showAllOutputs\n    ].map(command => {\n        return { command };\n    });\n    mainMenu.viewMenu.addGroup(expandGroup, 11);\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.add({\n        tracker,\n        toggleLineNumbers: widget => {\n            NotebookActions.toggleAllLineNumbers(widget.content);\n        },\n        lineNumbersToggled: widget => {\n            const config = widget.content.editorConfig;\n            return !!(config.code.lineNumbers &&\n                config.markdown.lineNumbers &&\n                config.raw.lineNumbers);\n        }\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.add({\n        tracker,\n        runLabel: (n) => trans.__('Run Selected Cells'),\n        runAllLabel: (n) => trans.__('Run All Cells'),\n        restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Cells…'),\n        run: current => {\n            const { context, content } = current;\n            return NotebookActions.runAndAdvance(content, context.sessionContext).then(() => void 0);\n        },\n        runAll: current => {\n            const { context, content } = current;\n            return NotebookActions.runAll(content, context.sessionContext).then(() => void 0);\n        },\n        restartAndRunAll: current => {\n            const { context, content } = current;\n            return sessionDialogs\n                .restart(context.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    void NotebookActions.runAll(content, context.sessionContext);\n                }\n                return restarted;\n            });\n        }\n    });\n    // Add a renderAllMarkdown group to the run menu.\n    const renderAllMarkdown = [CommandIDs.renderAllMarkdown].map(command => {\n        return { command };\n    });\n    // Add a run+insert and run+don't advance group to the run menu.\n    const runExtras = [\n        CommandIDs.runAndInsert,\n        CommandIDs.run,\n        CommandIDs.runInConsole\n    ].map(command => {\n        return { command };\n    });\n    // Add a run all above/below group to the run menu.\n    const runAboveBelowGroup = [\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow\n    ].map(command => {\n        return { command };\n    });\n    // Add commands to the application edit menu.\n    const undoCellActionGroup = [\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction\n    ].map(command => {\n        return { command };\n    });\n    const copyGroup = [\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace\n    ].map(command => {\n        return { command };\n    });\n    const selectGroup = [CommandIDs.selectAll, CommandIDs.deselectAll].map(command => {\n        return { command };\n    });\n    const splitMergeGroup = [\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow\n    ].map(command => {\n        return { command };\n    });\n    const moveCellsGroup = [CommandIDs.moveUp, CommandIDs.moveDown].map(command => {\n        return { command };\n    });\n    mainMenu.editMenu.addGroup(undoCellActionGroup, 4);\n    mainMenu.editMenu.addGroup(copyGroup, 5);\n    mainMenu.editMenu.addGroup([{ command: CommandIDs.deleteCell }], 6);\n    mainMenu.editMenu.addGroup(selectGroup, 7);\n    mainMenu.editMenu.addGroup(moveCellsGroup, 8);\n    mainMenu.editMenu.addGroup(splitMergeGroup, 9);\n    mainMenu.runMenu.addGroup(runExtras, 10);\n    mainMenu.runMenu.addGroup(runAboveBelowGroup, 11);\n    mainMenu.runMenu.addGroup(renderAllMarkdown, 12);\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.kernelUsers.add({\n        tracker,\n        getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled(shell, tracker) {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    Private.isEnabled = isEnabled;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndSingleSelected = isEnabledAndSingleSelected;\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}