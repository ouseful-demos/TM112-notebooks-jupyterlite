{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/filebrowser-extension/lib/index.js"],"names":["CommandIDs","copy","copyDownloadLink","createLauncher","cut","del","download","duplicate","hideBrowser","goToPath","goUp","openPath","open","openBrowserTab","paste","createNewDirectory","createNewFile","createNewMarkdownFile","rename","share","copyPath","showBrowser","shutdown","toggleBrowser","toggleNavigateToCurrentDirectory","toggleLastModified","search","namespace","browser","id","requires","IFileBrowserFactory","ITranslator","optional","ILayoutRestorer","ISettingRegistry","ITreePathUpdater","ICommandPalette","IMainMenu","autoStart","activate","app","factory","translator","restorer","settingRegistry","treePathUpdater","commandPalette","mainMenu","trans","load","defaultBrowser","node","setAttribute","__","add","docRegistry","registry","commands","tracker","addCommand","execute","widget","currentWidget","delete","icon","closeIcon","stylesheet","label","mnemonic","copyIcon","cutIcon","async","args","_a","path","dontShowBrowser","Private","navigateToPath","type","browserForPath","getBrowserForPath","clearSelectedItems","parts","split","name","length","selectItemByName","reason","console","warn","model","restored","rootPath","cd","caption","InputDialog","placeholder","title","okLabel","value","undefined","trailingSlash","endsWith","slice","services","manager","item","contents","get","content","Error","response","status","message","showErrorMessage","addItem","command","category","Promise","all","toArray","map","selectedItems","localPath","ft","getFileType","bindprops","folderIcon","addIcon","pasteIcon","newFolderIcon","ext","textEditorIcon","markdownIcon","editIcon","next","Clipboard","isVisible","fileIcon","shutdownKernels","stopIcon","isHidden","isToggled","navigateToCurrentDirectory","set","catch","error","showLastModifiedColumn","alert","settingsMenu","addGroup","selectorBrowser","selectorContent","selectorItem","selectorNotDir","contextMenu","selector","rank","addKeyBinding","keys","addCommands","updateBrowserTitle","binding","find","keyBindings","b","ks","CommandRegistry","join","keyBindingChanged","connect","then","pathChanged","sender","newValue","useFuzzyFilter","settings","changed","composite","provides","IDocumentManager","IStateDB","IRouter","JupyterFrontEnd","docManager","state","router","tree","WidgetTracker","createFileBrowser","options","FilterFileBrowserModel","auto","driveName","refreshInterval","restore","FileBrowser","restoreBrowser","downloadPlugin","downloadIcon","getDownloadUrl","url","browserWidget","ILabShell","labShell","areas","area","it","widgets","contains","activateById","collapseLeft","layout","fresh","mode","maybeCreate","isEmpty","hasCommand","layoutModified","currentChanged","_","change","context","contextForWidget","shareFile","URLExt","PageConfig","workspace","treePath","linkIcon","openWithPlugin","OpenWithMenu","Menu","msg","this","clearItems","factories","_intersection","i","_getFactories","forEach","super","onBeforeAttach","preferredWidgetFactories","f","notebookFactory","getWidgetFactory","indexOf","unshift","iter","first","isect","Set","reduce","subarr","filter","x","has","openWith","submenu","fileUploadStatus","IStatusBar","statusBar","FileUploadStatus","registerStatusItem","align","isActive","items","activeStateChanged","stateChanged","launcherToolbarButton","launcher","ToolbarButton","onClick","tooltip","actualOnClick","toolbar","insertItem","cwd","_path","ready","PathExt","restoring","addClass","refresh","removeClass","listener","routed","disconnect","paths","file"],"mappings":"wNAuBIA,E,wJACJ,SAAWA,GACPA,EAAWC,KAAO,mBAClBD,EAAWE,iBAAmB,iCAE9BF,EAAWG,eAAiB,mCAC5BH,EAAWI,IAAM,kBACjBJ,EAAWK,IAAM,qBACjBL,EAAWM,SAAW,uBACtBN,EAAWO,UAAY,wBAEvBP,EAAWQ,YAAc,wBACzBR,EAAWS,SAAW,yBACtBT,EAAWU,KAAO,oBAClBV,EAAWW,SAAW,wBACtBX,EAAWY,KAAO,mBAClBZ,EAAWa,eAAiB,+BAC5Bb,EAAWc,MAAQ,oBACnBd,EAAWe,mBAAqB,mCAChCf,EAAWgB,cAAgB,8BAC3BhB,EAAWiB,sBAAwB,uCACnCjB,EAAWkB,OAAS,qBAEpBlB,EAAWmB,MAAQ,yBAEnBnB,EAAWoB,SAAW,wBACtBpB,EAAWqB,YAAc,uBACzBrB,EAAWsB,SAAW,uBAEtBtB,EAAWuB,cAAgB,0BAC3BvB,EAAWwB,iCAAmC,mDAC9CxB,EAAWyB,mBAAqB,mCAChCzB,EAAW0B,OAAS,qBA/BxB,CAgCG1B,IAAeA,EAAa,KAI/B,MAAM2B,EAAY,cAIZC,EAAU,CACZC,GAAI,4CACJC,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCC,SAAU,CACN,EAAAC,gBACA,EAAAC,iBACA,EAAAC,iBACA,EAAAC,gBACA,EAAAC,WAEJC,WAAW,EACXC,SAAU,CAACC,EAAKC,EAASC,EAAYC,EAAUC,EAAiBC,EAAiBC,EAAgBC,KAC7F,MAAMC,EAAQN,EAAWO,KAAK,cACxBtB,EAAUc,EAAQS,eACxBvB,EAAQwB,KAAKC,aAAa,OAAQ,UAClCzB,EAAQwB,KAAKC,aAAa,aAAcJ,EAAMK,GAAG,yBAO7CV,GACAA,EAASW,IAAI3B,EAASD,GA+ZlC,SAAqBc,EAAKC,EAASC,EAAYE,EAAiBE,EAAgBC,GAC5E,MAAMC,EAAQN,EAAWO,KAAK,eACtBM,YAAaC,EAAQ,SAAEC,GAAajB,GACpCU,eAAgBvB,EAAO,QAAE+B,GAAYjB,EAC7CgB,EAASE,WAAW5D,EAAWK,IAAK,CAChCwD,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAOE,UAGtBC,KAAM,EAAAC,UAAA,UAAoB,CAAEC,WAAY,aACxCC,MAAOnB,EAAMK,GAAG,UAChBe,SAAU,IAEdX,EAASE,WAAW5D,EAAWC,KAAM,CACjC4D,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO7D,QAGtBgE,KAAM,EAAAK,SAAA,UAAmB,CAAEH,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,QAChBe,SAAU,IAEdX,EAASE,WAAW5D,EAAWI,IAAK,CAChCyD,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO1D,OAGtB6D,KAAM,EAAAM,QAAA,UAAkB,CAAEJ,WAAY,aACtCC,MAAOnB,EAAMK,GAAG,SAEpBI,EAASE,WAAW5D,EAAWO,UAAW,CACtCsD,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAOvD,aAGtB0D,KAAM,EAAAK,SAAA,UAAmB,CAAEH,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,eAEpBI,EAASE,WAAW5D,EAAWS,SAAU,CACrCoD,QAASW,MAAOC,IACZ,IAAIC,EACJ,MAAMC,EAAOF,EAAKE,MAAQ,GACpBtD,IAA4F,QAA3EqD,EAAKD,aAAmC,EAASA,EAAKG,uBAAoC,IAAPF,GAAgBA,GAC1H,IAEI,GAAkB,qBADCG,EAAQC,eAAeH,EAAMjC,EAASC,IAChDoC,MAAwB1D,EAAa,CAC1C,MAAM2D,EAAiBH,EAAQI,kBAAkBN,EAAMjC,GACvD,GAAIsC,EAAgB,CAChBA,EAAeE,qBACf,MAAMC,EAAQR,EAAKS,MAAM,KACnBC,EAAOF,EAAMA,EAAMG,OAAS,GAC9BD,SACML,EAAeO,iBAAiBF,KAKtD,MAAOG,GACHC,QAAQC,KAAK,GAAG1F,EAAWS,6BAA6BkE,IAAQa,GAEpE,GAAInE,EACA,OAAOqC,EAASG,QAAQ7D,EAAWqB,YAAa,CAAEsD,YAI9DjB,EAASE,WAAW5D,EAAWU,KAAM,CACjC0D,MAAO,QACPP,QAASW,UACL,MAAMQ,EAAiBH,EAAQI,kBAAkB,GAAIvC,GACrD,IAAKsC,EACD,OAEJ,MAAM,MAAEW,GAAUX,EAElB,SADMW,EAAMC,SACRD,EAAMhB,OAASgB,EAAME,SAGzB,UACUF,EAAMG,GAAG,MAEnB,MAAON,GACHC,QAAQC,KAAK,GAAG1F,EAAWU,4CAA4CiF,EAAMhB,OAAQa,OAIjG9B,EAASE,WAAW5D,EAAWW,SAAU,CACrCyD,MAAOK,GAAQA,EAAKE,KAAO1B,EAAMK,GAAG,UAAWmB,EAAKE,MAAQ1B,EAAMK,GAAG,mBACrEyC,QAAStB,GAAQA,EAAKE,KAAO1B,EAAMK,GAAG,UAAWmB,EAAKE,MAAQ1B,EAAMK,GAAG,kBACvEO,QAASW,MAAOC,IACZ,IAAIC,EACJ,IAAIC,EAYJ,GAVIA,GADAF,aAAmC,EAASA,EAAKE,MAC1CF,EAAKE,KAQG,QALPD,SAAY,EAAAsB,YAAA,QAAoB,CACpC5B,MAAOnB,EAAMK,GAAG,QAChB2C,YAAa,8BACbC,MAAOjD,EAAMK,GAAG,aAChB6C,QAASlD,EAAMK,GAAG,WAClB8C,aAA0B,IAAP1B,EAAgBA,OAAK2B,EAE3C1B,EAGL,IACI,MAAM2B,EAAyB,MAAT3B,GAAgBA,EAAK4B,SAAS,KAChDD,IAEA3B,EAAOA,EAAK6B,MAAM,EAAG7B,EAAKW,OAAS,IAEvC,MAAMN,EAAiBH,EAAQI,kBAAkBN,EAAMjC,IACjD,SAAE+D,GAAazB,EAAeW,MAAMe,QACpCC,QAAaF,EAASG,SAASC,IAAIlC,EAAM,CAC3CmC,SAAS,IAEb,GAAIR,GAA+B,cAAdK,EAAK5B,KACtB,MAAM,IAAIgC,MAAM,QAAQpC,yBAM5B,SAJMjB,EAASG,QAAQ7D,EAAWS,SAAU,CACxCkE,OACAC,gBAAiBH,EAAKG,kBAER,cAAd+B,EAAK5B,KACL,OAEJ,OAAOrB,EAASG,QAAQ,kBAAmB,CAAEc,SAEjD,MAAOa,GAIH,OAHIA,EAAOwB,UAAuC,MAA3BxB,EAAOwB,SAASC,SACnCzB,EAAO0B,QAAUjE,EAAMK,GAAG,0BAA2BqB,KAElD,IAAAwC,kBAAiBlE,EAAMK,GAAG,eAAgBkC,OAKzDzC,GACAA,EAAeqE,QAAQ,CACnBC,QAASrH,EAAWW,SACpB2G,SAAUrE,EAAMK,GAAG,qBAG3BI,EAASE,WAAW5D,EAAWY,KAAM,CACjCiD,QAASY,IACL,MAAM/B,EAAU+B,EAAc,cAAK,EAC7BX,EAASH,EAAQI,cACvB,IAAKD,EACD,OAEJ,MAAM,SAAE8C,GAAa9C,EAAO6B,MAAMe,QAAQD,SAC1C,OAAOc,QAAQC,KAAI,IAAAC,UAAQ,IAAAC,KAAI5D,EAAO6D,iBAAiBhB,IACnD,GAAkB,cAAdA,EAAK5B,KAAsB,CAC3B,MAAM6C,EAAYhB,EAASgB,UAAUjB,EAAKhC,MAC1C,OAAOb,EAAO6B,MAAMG,GAAG,IAAI8B,KAE/B,OAAOlE,EAASG,QAAQ,kBAAmB,CACvCnB,QAASA,EACTiC,KAAMgC,EAAKhC,aAIvBV,KAAMQ,IACF,IAAIC,EACJ,MAAMhC,EAAU+B,EAAc,cAAK,EACnC,GAAI/B,EAAS,CAET,MAAMmF,EAAKpE,EAASqE,YAAYpF,GAGhC,OAAkE,QAA1DgC,EAAKmD,aAA+B,EAASA,EAAG5D,YAAyB,IAAPS,OAAgB,EAASA,EAAGqD,UAAU,CAAE5D,WAAY,aAG9H,OAAO,EAAA6D,WAAA,UAAqB,CAAE7D,WAAY,cAIlDC,MAAOK,GAASA,EAAY,OAAKA,EAAc,SAAKxB,EAAMK,GAAG,QAC7De,SAAU,IAEdX,EAASE,WAAW5D,EAAWa,eAAgB,CAC3CgD,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAKD,EAGL,OAAOyD,QAAQC,KAAI,IAAAC,UAAQ,IAAAC,KAAI5D,EAAO6D,iBAAiBhB,GAC5CjD,EAASG,QAAQ,8BAA+B,CACnDc,KAAMgC,EAAKhC,YAIvBV,KAAM,EAAAgE,QAAA,UAAkB,CAAE9D,WAAY,aACtCC,MAAOnB,EAAMK,GAAG,2BAChBe,SAAU,IAEdX,EAASE,WAAW5D,EAAWc,MAAO,CAClC+C,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAOhD,SAGtBmD,KAAM,EAAAiE,UAAA,UAAoB,CAAE/D,WAAY,aACxCC,MAAOnB,EAAMK,GAAG,SAChBe,SAAU,IAEdX,EAASE,WAAW5D,EAAWe,mBAAoB,CAC/C8C,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO/C,sBAGtBkD,KAAM,EAAAkE,cAAA,UAAwB,CAAEhE,WAAY,aAC5CC,MAAOnB,EAAMK,GAAG,gBAEpBI,EAASE,WAAW5D,EAAWgB,cAAe,CAC1C6C,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO9C,cAAc,CAAEoH,IAAK,SAG3CnE,KAAM,EAAAoE,eAAA,UAAyB,CAAElE,WAAY,aAC7CC,MAAOnB,EAAMK,GAAG,cAEpBI,EAASE,WAAW5D,EAAWiB,sBAAuB,CAClD4C,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO9C,cAAc,CAAEoH,IAAK,QAG3CnE,KAAM,EAAAqE,aAAA,UAAuB,CAAEnE,WAAY,aAC3CC,MAAOnB,EAAMK,GAAG,uBAEpBI,EAASE,WAAW5D,EAAWkB,OAAQ,CACnC2C,QAASY,IACL,MAAMX,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO5C,UAGtB+C,KAAM,EAAAsE,SAAA,UAAmB,CAAEpE,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,UAChBe,SAAU,IAEdX,EAASE,WAAW5D,EAAWoB,SAAU,CACrCyC,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,IAAKD,EACD,OAEJ,MAAM6C,EAAO7C,EAAO6D,gBAAgBa,OAC/B7B,GAGL,EAAA8B,UAAA,aAAuB9B,EAAKhC,OAEhC+D,UAAW,MAAQ/E,EAAQI,oBACwBsC,IAA/C1C,EAAQI,cAAc4D,gBAAgBa,KAC1CvE,KAAM,EAAA0E,SAAA,UAAmB,CAAExE,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,eAEpBI,EAASE,WAAW5D,EAAWsB,SAAU,CACrCuC,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAO8E,mBAGtB3E,KAAM,EAAA4E,SAAA,UAAmB,CAAE1E,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,sBAEpBI,EAASE,WAAW5D,EAAWuB,cAAe,CAC1CsC,QAAS,IACDjC,EAAQkH,SACDpF,EAASG,QAAQ7D,EAAWqB,iBAAa,GAE7CqC,EAASG,QAAQ7D,EAAWQ,iBAAa,KAGxDkD,EAASE,WAAW5D,EAAWG,eAAgB,CAC3CiE,MAAOnB,EAAMK,GAAG,gBAChBO,QAAS,IAAMgB,EAAQ1E,eAAeuD,EAAU9B,KAEhDiB,GACAa,EAASE,WAAW5D,EAAWwB,iCAAkC,CAC7D4C,MAAOnB,EAAMK,GAAG,oCAChByF,UAAW,IAAMnH,EAAQoH,2BACzBnF,QAAS,KACL,MAAMuC,GAASxE,EAAQoH,2BAEvB,OAAOnG,EACFoG,IAAI,4CAFG,6BAE+C7C,GACtD8C,OAAO1D,IACRC,QAAQ0D,MAAM,0DAK9BzF,EAASE,WAAW5D,EAAWyB,mBAAoB,CAC/C2C,MAAOnB,EAAMK,GAAG,6BAChByF,UAAW,IAAMnH,EAAQwH,uBACzBvF,QAAS,KACL,MAAMuC,GAASxE,EAAQwH,uBAEvB,GAAIvG,EACA,OAAOA,EACFoG,IAAI,4CAHD,yBAGmD7C,GACtD8C,OAAO1D,IACRC,QAAQ0D,MAAM,sDAK9BzF,EAASE,WAAW5D,EAAW0B,OAAQ,CACnC0C,MAAOnB,EAAMK,GAAG,wBAChBO,QAAS,IAAMwF,MAAM,YAErBrG,GACAA,EAASsG,aAAaC,SAAS,CAAC,CAAElC,QAASrH,EAAWwB,mCAAqC,GAE3FuB,GACAA,EAAeqE,QAAQ,CACnBC,QAASrH,EAAWwB,iCACpB8F,SAAUrE,EAAMK,GAAG,qBAM3B,MAAMkG,EAAkB,iDAElBC,EAAkB,yBAElBC,EAAe,kCAEfC,EAAiB,0CAGvBlH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWe,mBACpB8I,SAAUJ,EACVK,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWgB,cACpB6I,SAAUJ,EACVK,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWiB,sBACpB4I,SAAUJ,EACVK,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWc,MACpB+I,SAAUJ,EACVK,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWY,KACpBiJ,SAAUH,EACVI,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWa,eACpBgJ,SAAUF,EACVG,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWkB,OACpB2I,SAAUH,EACVI,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWK,IACpBwJ,SAAUH,EACVI,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWI,IACpByJ,SAAUH,EACVI,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWC,KACpB4J,SAAUF,EACVG,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWO,UACpBsJ,SAAUF,EACVG,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWsB,SACpBuI,SAAUF,EACVG,KAAM,KAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWmB,MACpB0I,SAAUH,EACVI,KAAM,KAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWoB,SACpByI,SAAUH,EACVI,KAAM,KAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWyB,mBACpBoI,SAAU,wBACVC,KAAM,KAEVrH,EAAIiB,SAASqG,cAAc,CACvB1C,QAASrH,EAAWK,IACpBwJ,SAAUL,EACVQ,KAAM,CAAC,YAEXvH,EAAIiB,SAASqG,cAAc,CACvB1C,QAASrH,EAAWI,IACpByJ,SAAUL,EACVQ,KAAM,CAAC,YAEXvH,EAAIiB,SAASqG,cAAc,CACvB1C,QAASrH,EAAWC,KACpB4J,SAAUL,EACVQ,KAAM,CAAC,YAEXvH,EAAIiB,SAASqG,cAAc,CACvB1C,QAASrH,EAAWc,MACpB+I,SAAUL,EACVQ,KAAM,CAAC,YAEXvH,EAAIiB,SAASqG,cAAc,CACvB1C,QAASrH,EAAWkB,OACpB2I,SAAUL,EACVQ,KAAM,CAAC,QAEXvH,EAAIiB,SAASqG,cAAc,CACvB1C,QAASrH,EAAWO,UACpBsJ,SAAUL,EACVQ,KAAM,CAAC,YAl2BPC,CAAYxH,EAAKC,EAASC,EAAYE,EAAiBE,EAAgBC,GACvEpB,EAAQsE,MAAMjC,KAAO,EAAA+D,WAErB,MAAMkC,EAAqB,KACvB,MAAMC,GAAU,IAAAC,MAAK3H,EAAIiB,SAAS2G,aAAaC,GAAKA,EAAEjD,UAAYrH,EAAWuB,gBAC7E,GAAI4I,EAAS,CACT,MAAMI,EAAK,EAAAC,gBAAA,gBAAgCL,EAAQH,KAAKS,KAAK,MAC7D7I,EAAQsE,MAAMH,QAAU9C,EAAMK,GAAG,oBAAqBiH,QAGtD3I,EAAQsE,MAAMH,QAAU9C,EAAMK,GAAG,iBAGzC4G,IACAzH,EAAIiB,SAASgH,kBAAkBC,SAAQ,KACnCT,OAEC3C,QAAQC,IAAI,CAAC/E,EAAImD,SAAUhE,EAAQ+D,MAAMC,WAAWgF,MAAK,KACtD9H,GACAlB,EAAQ+D,MAAMkF,YAAYF,SAAQ,CAACG,EAAQrG,KACvC3B,EAAgB2B,EAAKsG,aAG7B,IAAI/B,GAA6B,EAC7BI,GAAyB,EACzB4B,GAAiB,EACjBnI,GACKA,EACAK,KAAK,6CACL0H,MAAKK,IACNA,EAASC,QAAQP,SAAQM,IACrBjC,EAA6BiC,EAASpE,IAAI,8BAA8BsE,UACxEvJ,EAAQoH,2BAA6BA,KAEzCA,EAA6BiC,EAASpE,IAAI,8BAA8BsE,UACxEvJ,EAAQoH,2BAA6BA,EACrCiC,EAASC,QAAQP,SAAQM,IACrB7B,EAAyB6B,EAASpE,IAAI,0BACjCsE,UACLvJ,EAAQwH,uBAAyBA,KAErCA,EAAyB6B,EAASpE,IAAI,0BACjCsE,UACLvJ,EAAQwH,uBAAyBA,EACjC6B,EAASC,QAAQP,SAAQM,IACrBD,EAAiBC,EAASpE,IAAI,kBACzBsE,UACLvJ,EAAQoJ,eAAiBA,KAE7BA,EAAiBC,EAASpE,IAAI,kBACzBsE,UACLvJ,EAAQoJ,eAAiBA,UASvCtI,EAAU,CACZb,GAAI,4CACJuJ,SAAU,EAAArJ,oBACVD,SAAU,CAAC,EAAAuJ,iBAAkB,EAAArJ,aAC7BC,SAAU,CAAC,EAAAqJ,SAAU,EAAAC,QAAS,EAAAC,gBAAA,eAC9BhJ,SAAUgC,MAAO/B,EAAKgJ,EAAY9I,EAAY+I,EAAOC,EAAQC,KACzD,MAAM,SAAElI,GAAajB,EACfkB,EAAU,IAAI,EAAAkI,cAAc,CAAElK,cAC9BmK,EAAoB,CAACjK,EAAIkK,EAAU,MACrC,IAAIrH,EACJ,MAAMiB,EAAQ,IAAI,EAAAqG,uBAAuB,CACrCrJ,WAAYA,EACZsJ,KAA8B,QAAvBvH,EAAKqH,EAAQE,YAAyB,IAAPvH,GAAgBA,EACtDgC,QAAS+E,EACTS,UAAWH,EAAQG,WAAa,GAChCC,gBAAiBJ,EAAQI,gBACzBT,MAAyB,OAAlBK,EAAQL,WACTrF,EACA0F,EAAQL,OAASA,QAASrF,IAE9B+F,EAAUL,EAAQK,QAClBtI,EAAS,IAAI,EAAAuI,YAAY,CAAExK,KAAI8D,QAAOyG,UAASzJ,eAGrD,OADKgB,EAAQJ,IAAIO,GACVA,GAGLX,EAAiB2I,EAAkB,cAAe,CACpDG,MAAM,EACNG,SAAS,IAGb,OADKvH,EAAQyH,eAAenJ,EAAgBO,EAAUiI,EAAQC,GACvD,CAAEE,oBAAmB3I,iBAAgBQ,aAU9C4I,EAAiB,CACnB1K,GAAI,6CACJC,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCO,WAAW,EACXC,SAAU,CAACC,EAAKC,EAASC,KACrB,MAAMM,EAAQN,EAAWO,KAAK,eACxB,SAAEQ,GAAajB,GACf,QAAEkB,GAAYjB,EAEdiH,EAAiB,0CACvBjG,EAASE,WAAW5D,EAAWM,SAAU,CACrCuD,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAID,EACA,OAAOA,EAAOxD,YAGtB2D,KAAM,EAAAuI,aAAA,UAAuB,CAAErI,WAAY,aAC3CC,MAAOnB,EAAMK,GAAG,cAEpBI,EAASE,WAAW5D,EAAWE,iBAAkB,CAC7C2D,QAAS,KACL,MAAMC,EAASH,EAAQI,cACvB,GAAKD,EAGL,OAAOA,EAAO6B,MAAMe,QAAQD,SAASG,SAChC6F,eAAe3I,EAAO6D,gBAAgBa,OAAO7D,MAC7CiG,MAAK8B,IACN,EAAAjE,UAAA,aAAuBiE,OAG/BzI,KAAM,EAAAK,SAAA,UAAmB,CAAEH,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,sBAChBe,SAAU,IAEd5B,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWM,SACpBuJ,SAAUF,EACVG,KAAM,IAEVrH,EAAImH,YAAYxC,QAAQ,CACpBC,QAASrH,EAAWE,iBACpB2J,SAAUF,EACVG,KAAM,OAOZ6C,EAAgB,CAClB9K,GAAI,2CACJC,SAAU,CAAC,EAAAuJ,iBAAkB,EAAAtJ,oBAAqB,EAAAC,YAAa,EAAA4K,WAC/DrK,WAAW,EACXC,SAAU,CAACC,EAAKgJ,EAAY/I,EAASC,EAAYkK,KAC7C,MAAM,SAAEnJ,GAAajB,GACbU,eAAgBvB,EAAO,QAAE+B,GAAYjB,EAC7CmK,EAAStJ,IAAI3B,EAAS,OAAQ,CAAEkI,KAAM,MACtCpG,EAASE,WAAW5D,EAAWqB,YAAa,CACxCwC,QAASY,IACL,MAAME,EAAOF,EAAKE,MAAQ,GACpBK,EAAiBH,EAAQI,kBAAkBN,EAAMjC,GAEvD,GAAKsC,EAIL,GAAIpD,IAAYoD,EAIX,CACD,MAAM8H,EAAQ,CAAC,OAAQ,SACvB,IAAK,MAAMC,KAAQD,EAAO,CACtB,MAAME,EAAKH,EAASI,QAAQF,GAC5B,IAAIjJ,EAASkJ,EAAGxE,OAChB,KAAO1E,GAAQ,CACX,GAAIA,EAAOoJ,SAASlI,GAEhB,YADA6H,EAASM,aAAarJ,EAAOjC,IAGjCiC,EAASkJ,EAAGxE,cAbpBqE,EAASM,aAAavL,EAAQC,OAmB1C6B,EAASE,WAAW5D,EAAWQ,YAAa,CACxCqD,QAAS,KACL,MAAMC,EAASH,EAAQI,cACnBD,IAAWA,EAAOgF,UAClB+D,EAASO,kBAMhBP,EAASjH,SAASgF,MAAKyC,IACpBA,EAAOC,OAA2B,oBAAlBT,EAASU,MACpB7J,EAASG,QAAQ7D,EAAWqB,iBAAa,MAGjDkG,QAAQC,IAAI,CAAC/E,EAAImD,SAAUhE,EAAQ+D,MAAMC,WAAWgF,MAAK,KAC1D,SAAS4C,IAEDX,EAASY,QAAQ,SACjB/J,EAASgK,WAAW,oBACf7I,EAAQ1E,eAAeuD,EAAU9B,GAI9CiL,EAASc,eAAehD,SAAQ,KAC5B6C,OAGJX,EAASe,eAAejD,SAAQnG,MAAOqJ,EAAGC,KACtC,GAAIlM,EAAQoH,4BAA8B8E,EAAO/C,SAAU,CACvD,MAAM,SAAEA,GAAa+C,EACfC,EAAUtC,EAAWuC,iBAAiBjD,GAC5C,GAAIgD,EAAS,CACT,MAAM,KAAEpJ,GAASoJ,EACjB,UACUlJ,EAAQC,eAAeH,EAAMjC,EAASC,GAEhD,MAAO6C,GACHC,QAAQC,KAAK,GAAG1F,EAAWS,4BAA4BkE,IAAQa,SAK/EgI,SAeNS,EAAY,CACdpM,GAAI,+CACJC,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCO,WAAW,EACXC,SAAU,CAACC,EAAKC,EAASC,KACrB,MAAMM,EAAQN,EAAWO,KAAK,eACxB,SAAEQ,GAAajB,GACf,QAAEkB,GAAYjB,EACpBgB,EAASE,WAAW5D,EAAWmB,MAAO,CAClC0C,QAAS,KACL,MAAMC,EAASH,EAAQI,cACjB4B,EAAQ7B,aAAuC,EAASA,EAAO6D,gBAAgBa,OAChF7C,GAGL,EAAA8C,UAAA,aAAuB,EAAAyF,OAAA,UAAiB,EAAAC,WAAA,OAAkB,CACtDZ,KAAM,kBACNa,UAAW,EAAAD,WAAA,iBACXE,SAAU1I,EAAMhB,UAGxB+D,UAAW,MAAQ/E,EAAQI,eACmC,KAA1D,IAAA0D,SAAQ9D,EAAQI,cAAc4D,iBAAiBrC,OACnDrB,KAAM,EAAAqK,SAAA,UAAmB,CAAEnK,WAAY,aACvCC,MAAOnB,EAAMK,GAAG,2BAUtBiL,EAAiB,CACnB1M,GAAI,8CACJC,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCO,WAAW,EACXC,SAAU,CAACC,EAAKC,EAASC,KACrB,MAAQa,YAAaC,EAAQ,SAAEC,GAAajB,EACtCQ,EAAQN,EAAWO,KAAK,eACxB,QAAES,GAAYjB,EAOpB,MAAM8L,UAAqB,EAAAC,KACvB,eAAeC,GAEXC,KAAKC,aAGL,MAAMC,EAAYlL,EAAQI,cACpByK,EAAaM,eAAc,IAAApH,KAAI/D,EAAQI,cAAc4D,iBAAiBoH,GAC7DP,EAAaQ,cAAcD,WAEpC1I,EACFwI,GAEAA,EAAUI,SAAQvM,IACdiM,KAAKvH,QAAQ,CACT3C,KAAM,CAAE/B,QAASA,GACjB2E,QAASrH,EAAWY,UAIhCsO,MAAMC,eAAeT,GAEzB,qBAAqB/H,GACjB,IAAIjC,EACJ,MAAMmK,EAAYpL,EACb2L,yBAAyBzI,EAAKhC,MAC9B+C,KAAI2H,GAAKA,EAAEhK,OACViK,EAAmE,QAAhD5K,EAAKjB,EAAS8L,iBAAiB,mBAAgC,IAAP7K,OAAgB,EAASA,EAAGW,KAM7G,OALIiK,GACc,aAAd3I,EAAK5B,OACmC,IAAxC8J,EAAUW,QAAQF,IAClBT,EAAUY,QAAQH,GAEfT,EAEX,qBAAqBa,GAEjB,MAAMC,EAAQD,EAAKlH,OAEnB,IAAKmH,EACD,OAGJ,MAAMC,EAAQ,IAAIC,IAAIF,GAEtB,OAAO,IAAAG,QAAOJ,GAAM,CAACE,EAAOG,IAGjB,IAAIF,IAAIE,EAAOC,QAAOC,GAAKL,EAAMM,IAAID,OAC7CL,IAGX,MAAMO,EAAW,IAAI3B,EAAa,CAAE9K,aACpCyM,EAASjK,MAAM9B,MAAQnB,EAAMK,GAAG,aAChCb,EAAImH,YAAYxC,QAAQ,CACpBrC,KAAM,UACNqL,QAASD,EACTtG,SA9DmB,0CA+DnBC,KAAM,MAOLuG,EAAmB,CAC5BxO,GAAI,uDACJU,WAAW,EACXT,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCC,SAAU,CAAC,EAAAqO,YACX9N,SAAU,CAACC,EAAKb,EAASe,EAAY4N,KACjC,IAAKA,EAED,OAEJ,MAAM5J,EAAO,IAAI,EAAA6J,iBAAiB,CAC9B7M,QAAS/B,EAAQ+B,QACjBhB,eAEJ4N,EAAUE,mBAAmB,uDAAwD,CACjF9J,OACA+J,MAAO,SACPC,SAAU,MACGhK,EAAKhB,OAASgB,EAAKhB,MAAMiL,MAAMtL,OAAS,EAErDuL,mBAAoBlK,EAAKhB,MAAMmL,iBAO9BC,EAAwB,CACjClP,GAAI,4DACJU,WAAW,EACXT,SAAU,CAAC,EAAAC,oBAAqB,EAAAC,aAChCQ,SAAU,CAACC,EAAKC,EAASC,KACrB,MAAM,SAAEe,GAAajB,EACfQ,EAAQN,EAAWO,KAAK,eACtBC,eAAgBvB,GAAYc,EAE9BsO,EAAW,IAAI,EAAAC,cAAc,CAC/BhN,KAAM,EAAAgE,QACNiJ,QAAS,KACL,GAAIxN,EAASgK,WAAW,mBACpB,OAAO7I,EAAQ1E,eAAeuD,EAAU9B,IAGhDuP,QAASlO,EAAMK,GAAG,gBAClB8N,eAAe,IAEnBxP,EAAQyP,QAAQC,WAAW,EAAG,SAAUN,KAidhD,IAAInM,GACJ,SAAWA,GAiBPA,EAAQ1E,eAbR,SAAwBuD,EAAU9B,GAC9B,MAAM,MAAE+D,GAAU/D,EAClB,OAAO8B,EACFG,QAAQ,kBAAmB,CAAE0N,IAAK5L,EAAMhB,OACxCiG,MAAMoG,IACPrL,EAAMkF,YAAYF,SAAQ,KAClBqG,EAASlK,UACTkK,EAASlK,QAAQyK,IAAM5L,EAAMhB,QAElCqM,GACIA,MAsBfnM,EAAQI,kBAfR,SAA2BN,EAAMjC,GAC7B,MAAQS,eAAgBvB,EAAO,QAAE+B,GAAYjB,EACvCwJ,EAAYtK,EAAQ+D,MAAMe,QAAQD,SAASG,SAASsF,UAAUvH,GACpE,GAAIuH,EAAW,CAEX,OADuBvI,EAAQyG,MAAKoH,GAASA,EAAM7L,MAAMuG,YAAcA,UAGnEzG,QAAQC,KAAK,GAAG1F,EAAWS,iDAAiDkE,KAMpF,OAAO/C,GA0BXiD,EAAQC,eApBRN,eAA8BG,EAAMjC,EAASC,GACzC,MAAMM,EAAQN,EAAWO,KAAK,cACxB8B,EAAiBH,EAAQI,kBAAkBN,EAAMjC,GACvD,IAAKsC,EACD,MAAM,IAAI+B,MAAM9D,EAAMK,GAAG,wBAE7B,MAAM,SAAEmD,GAAazB,EAAeW,MAAMe,QACpCkB,EAAYnB,EAASG,SAASgB,UAAUjD,SACxC8B,EAASgL,MACf,MAAM9K,QAAaF,EAASG,SAASC,IAAIlC,EAAM,CAAEmC,SAAS,KACpD,MAAEnB,GAAUX,EAQlB,aAPMW,EAAMC,SACM,cAAde,EAAK5B,WACCY,EAAMG,GAAG,IAAI8B,WAGbjC,EAAMG,GAAG,IAAI,EAAA4L,QAAA,QAAgB9J,MAEhCjB,GA0CX9B,EAAQyH,eApCR9H,eAA8B5C,EAAS8B,EAAUiI,EAAQC,GACrD,MAAM+F,EAAY,mBAElB,GADA/P,EAAQgQ,SAASD,IACZhG,EAID,aAHM/J,EAAQ+D,MAAMyG,QAAQxK,EAAQC,UAC9BD,EAAQ+D,MAAMkM,eACpBjQ,EAAQkQ,YAAYH,GAGxB,MAAMI,EAAWvN,UACbmH,EAAOqG,OAAOC,WAAWF,GACzB,MAAMG,QAAetG,aAAmC,EAASA,EAAKsG,QACjEA,aAAqC,EAASA,EAAMC,QAAUD,aAAqC,EAASA,EAAMtQ,gBAE7GA,EAAQ+D,MAAMyG,QAAQxK,EAAQC,IAAI,GACpCqQ,EAAMC,YACAzO,EAASG,QAAQ7D,EAAWW,SAAU,CACxCgE,KAAMuN,EAAMC,KACZvN,iBAAiB,IAGrBsN,EAAMtQ,eACA8B,EAASG,QAAQ7D,EAAWW,SAAU,CACxCgE,KAAMuN,EAAMtQ,QACZgD,iBAAiB,YAKnBhD,EAAQ+D,MAAMyG,QAAQxK,EAAQC,UAC9BD,EAAQ+D,MAAMkM,WAExBjQ,EAAQkQ,YAAYH,IAExBhG,EAAOqG,OAAOrH,QAAQoH,IAlG9B,CAqGGlN,IAAYA,EAAU,KAIzB,MAUA,EAVgB,CACZnC,EACAd,EACAqM,EACAoC,EACA9D,EACAI,EACAoE,EACAxC","file":"4679.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module filebrowser-extension\n */\nimport { ILabShell, ILayoutRestorer, ITreePathUpdater, IRouter, JupyterFrontEnd } from '@jupyterlab/application';\nimport { Clipboard, ToolbarButton, WidgetTracker, ICommandPalette, InputDialog, showErrorMessage } from '@jupyterlab/apputils';\nimport { PageConfig, PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { FilterFileBrowserModel, FileBrowser, FileUploadStatus, IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { addIcon, closeIcon, copyIcon, cutIcon, downloadIcon, editIcon, fileIcon, folderIcon, linkIcon, markdownIcon, newFolderIcon, pasteIcon, stopIcon, textEditorIcon } from '@jupyterlab/ui-components';\nimport { map, reduce, toArray, find } from '@lumino/algorithm';\nimport { CommandRegistry } from '@lumino/commands';\nimport { Menu } from '@lumino/widgets';\n/**\n * The command IDs used by the file browser plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.copy = 'filebrowser:copy';\n    CommandIDs.copyDownloadLink = 'filebrowser:copy-download-link';\n    // For main browser only.\n    CommandIDs.createLauncher = 'filebrowser:create-main-launcher';\n    CommandIDs.cut = 'filebrowser:cut';\n    CommandIDs.del = 'filebrowser:delete';\n    CommandIDs.download = 'filebrowser:download';\n    CommandIDs.duplicate = 'filebrowser:duplicate';\n    // For main browser only.\n    CommandIDs.hideBrowser = 'filebrowser:hide-main';\n    CommandIDs.goToPath = 'filebrowser:go-to-path';\n    CommandIDs.goUp = 'filebrowser:go-up';\n    CommandIDs.openPath = 'filebrowser:open-path';\n    CommandIDs.open = 'filebrowser:open';\n    CommandIDs.openBrowserTab = 'filebrowser:open-browser-tab';\n    CommandIDs.paste = 'filebrowser:paste';\n    CommandIDs.createNewDirectory = 'filebrowser:create-new-directory';\n    CommandIDs.createNewFile = 'filebrowser:create-new-file';\n    CommandIDs.createNewMarkdownFile = 'filebrowser:create-new-markdown-file';\n    CommandIDs.rename = 'filebrowser:rename';\n    // For main browser only.\n    CommandIDs.share = 'filebrowser:share-main';\n    // For main browser only.\n    CommandIDs.copyPath = 'filebrowser:copy-path';\n    CommandIDs.showBrowser = 'filebrowser:activate';\n    CommandIDs.shutdown = 'filebrowser:shutdown';\n    // For main browser only.\n    CommandIDs.toggleBrowser = 'filebrowser:toggle-main';\n    CommandIDs.toggleNavigateToCurrentDirectory = 'filebrowser:toggle-navigate-to-current-directory';\n    CommandIDs.toggleLastModified = 'filebrowser:toggle-last-modified';\n    CommandIDs.search = 'filebrowser:search';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The file browser namespace token.\n */\nconst namespace = 'filebrowser';\n/**\n * The default file browser extension.\n */\nconst browser = {\n    id: '@jupyterlab/filebrowser-extension:browser',\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [\n        ILayoutRestorer,\n        ISettingRegistry,\n        ITreePathUpdater,\n        ICommandPalette,\n        IMainMenu\n    ],\n    autoStart: true,\n    activate: (app, factory, translator, restorer, settingRegistry, treePathUpdater, commandPalette, mainMenu) => {\n        const trans = translator.load('jupyterlab');\n        const browser = factory.defaultBrowser;\n        browser.node.setAttribute('role', 'region');\n        browser.node.setAttribute('aria-label', trans.__('File Browser Section'));\n        // Let the application restorer track the primary file browser (that is\n        // automatically created) for restoration of application state (e.g. setting\n        // the file browser as the current side bar widget).\n        //\n        // All other file browsers created by using the factory function are\n        // responsible for their own restoration behavior, if any.\n        if (restorer) {\n            restorer.add(browser, namespace);\n        }\n        addCommands(app, factory, translator, settingRegistry, commandPalette, mainMenu);\n        browser.title.icon = folderIcon;\n        // Show the current file browser shortcut in its title.\n        const updateBrowserTitle = () => {\n            const binding = find(app.commands.keyBindings, b => b.command === CommandIDs.toggleBrowser);\n            if (binding) {\n                const ks = CommandRegistry.formatKeystroke(binding.keys.join(' '));\n                browser.title.caption = trans.__('File Browser (%1)', ks);\n            }\n            else {\n                browser.title.caption = trans.__('File Browser');\n            }\n        };\n        updateBrowserTitle();\n        app.commands.keyBindingChanged.connect(() => {\n            updateBrowserTitle();\n        });\n        void Promise.all([app.restored, browser.model.restored]).then(() => {\n            if (treePathUpdater) {\n                browser.model.pathChanged.connect((sender, args) => {\n                    treePathUpdater(args.newValue);\n                });\n            }\n            let navigateToCurrentDirectory = false;\n            let showLastModifiedColumn = true;\n            let useFuzzyFilter = true;\n            if (settingRegistry) {\n                void settingRegistry\n                    .load('@jupyterlab/filebrowser-extension:browser')\n                    .then(settings => {\n                    settings.changed.connect(settings => {\n                        navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory').composite;\n                        browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n                    });\n                    navigateToCurrentDirectory = settings.get('navigateToCurrentDirectory').composite;\n                    browser.navigateToCurrentDirectory = navigateToCurrentDirectory;\n                    settings.changed.connect(settings => {\n                        showLastModifiedColumn = settings.get('showLastModifiedColumn')\n                            .composite;\n                        browser.showLastModifiedColumn = showLastModifiedColumn;\n                    });\n                    showLastModifiedColumn = settings.get('showLastModifiedColumn')\n                        .composite;\n                    browser.showLastModifiedColumn = showLastModifiedColumn;\n                    settings.changed.connect(settings => {\n                        useFuzzyFilter = settings.get('useFuzzyFilter')\n                            .composite;\n                        browser.useFuzzyFilter = useFuzzyFilter;\n                    });\n                    useFuzzyFilter = settings.get('useFuzzyFilter')\n                        .composite;\n                    browser.useFuzzyFilter = useFuzzyFilter;\n                });\n            }\n        });\n    }\n};\n/**\n * The default file browser factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/filebrowser-extension:factory',\n    provides: IFileBrowserFactory,\n    requires: [IDocumentManager, ITranslator],\n    optional: [IStateDB, IRouter, JupyterFrontEnd.ITreeResolver],\n    activate: async (app, docManager, translator, state, router, tree) => {\n        const { commands } = app;\n        const tracker = new WidgetTracker({ namespace });\n        const createFileBrowser = (id, options = {}) => {\n            var _a;\n            const model = new FilterFileBrowserModel({\n                translator: translator,\n                auto: (_a = options.auto) !== null && _a !== void 0 ? _a : true,\n                manager: docManager,\n                driveName: options.driveName || '',\n                refreshInterval: options.refreshInterval,\n                state: options.state === null\n                    ? undefined\n                    : options.state || state || undefined\n            });\n            const restore = options.restore;\n            const widget = new FileBrowser({ id, model, restore, translator });\n            // Track the newly created file browser.\n            void tracker.add(widget);\n            return widget;\n        };\n        // Manually restore and load the default file browser.\n        const defaultBrowser = createFileBrowser('filebrowser', {\n            auto: false,\n            restore: false\n        });\n        void Private.restoreBrowser(defaultBrowser, commands, router, tree);\n        return { createFileBrowser, defaultBrowser, tracker };\n    }\n};\n/**\n * A plugin providing download + copy download link commands in the context menu.\n *\n * Disabling this plugin will NOT disable downloading files from the server.\n * Users will still be able to retrieve files from the file download URLs the\n * server provides.\n */\nconst downloadPlugin = {\n    id: '@jupyterlab/filebrowser-extension:download',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        const { tracker } = factory;\n        // matches only non-directory items\n        const selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\n        commands.addCommand(CommandIDs.download, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (widget) {\n                    return widget.download();\n                }\n            },\n            icon: downloadIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Download')\n        });\n        commands.addCommand(CommandIDs.copyDownloadLink, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (!widget) {\n                    return;\n                }\n                return widget.model.manager.services.contents\n                    .getDownloadUrl(widget.selectedItems().next().path)\n                    .then(url => {\n                    Clipboard.copyToSystem(url);\n                });\n            },\n            icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Download Link'),\n            mnemonic: 0\n        });\n        app.contextMenu.addItem({\n            command: CommandIDs.download,\n            selector: selectorNotDir,\n            rank: 9\n        });\n        app.contextMenu.addItem({\n            command: CommandIDs.copyDownloadLink,\n            selector: selectorNotDir,\n            rank: 13\n        });\n    }\n};\n/**\n * A plugin to add the file browser widget to an ILabShell\n */\nconst browserWidget = {\n    id: '@jupyterlab/filebrowser-extension:widget',\n    requires: [IDocumentManager, IFileBrowserFactory, ITranslator, ILabShell],\n    autoStart: true,\n    activate: (app, docManager, factory, translator, labShell) => {\n        const { commands } = app;\n        const { defaultBrowser: browser, tracker } = factory;\n        labShell.add(browser, 'left', { rank: 100 });\n        commands.addCommand(CommandIDs.showBrowser, {\n            execute: args => {\n                const path = args.path || '';\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                // Check for browser not found\n                if (!browserForPath) {\n                    return;\n                }\n                // Shortcut if we are using the main file browser\n                if (browser === browserForPath) {\n                    labShell.activateById(browser.id);\n                    return;\n                }\n                else {\n                    const areas = ['left', 'right'];\n                    for (const area of areas) {\n                        const it = labShell.widgets(area);\n                        let widget = it.next();\n                        while (widget) {\n                            if (widget.contains(browserForPath)) {\n                                labShell.activateById(widget.id);\n                                return;\n                            }\n                            widget = it.next();\n                        }\n                    }\n                }\n            }\n        });\n        commands.addCommand(CommandIDs.hideBrowser, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                if (widget && !widget.isHidden) {\n                    labShell.collapseLeft();\n                }\n            }\n        });\n        // If the layout is a fresh session without saved data and not in single document\n        // mode, open file browser.\n        void labShell.restored.then(layout => {\n            if (layout.fresh && labShell.mode !== 'single-document') {\n                void commands.execute(CommandIDs.showBrowser, void 0);\n            }\n        });\n        void Promise.all([app.restored, browser.model.restored]).then(() => {\n            function maybeCreate() {\n                // Create a launcher if there are no open items.\n                if (labShell.isEmpty('main') &&\n                    commands.hasCommand('launcher:create')) {\n                    void Private.createLauncher(commands, browser);\n                }\n            }\n            // When layout is modified, create a launcher if there are no open items.\n            labShell.layoutModified.connect(() => {\n                maybeCreate();\n            });\n            // Whether to automatically navigate to a document's current directory\n            labShell.currentChanged.connect(async (_, change) => {\n                if (browser.navigateToCurrentDirectory && change.newValue) {\n                    const { newValue } = change;\n                    const context = docManager.contextForWidget(newValue);\n                    if (context) {\n                        const { path } = context;\n                        try {\n                            await Private.navigateToPath(path, factory, translator);\n                        }\n                        catch (reason) {\n                            console.warn(`${CommandIDs.goToPath} failed to open: ${path}`, reason);\n                        }\n                    }\n                }\n            });\n            maybeCreate();\n        });\n    }\n};\n/**\n * The default file browser share-file plugin\n *\n * This extension adds a \"Copy Shareable Link\" command that generates a copy-\n * pastable URL. This url can be used to open a particular file in JupyterLab,\n * handy for emailing links or bookmarking for reference.\n *\n * If you need to change how this link is generated (for instance, to copy a\n * /user-redirect URL for JupyterHub), disable this plugin and replace it\n * with another implementation.\n */\nconst shareFile = {\n    id: '@jupyterlab/filebrowser-extension:share-file',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const trans = translator.load('jupyterlab');\n        const { commands } = app;\n        const { tracker } = factory;\n        commands.addCommand(CommandIDs.share, {\n            execute: () => {\n                const widget = tracker.currentWidget;\n                const model = widget === null || widget === void 0 ? void 0 : widget.selectedItems().next();\n                if (!model) {\n                    return;\n                }\n                Clipboard.copyToSystem(URLExt.normalize(PageConfig.getUrl({\n                    mode: 'single-document',\n                    workspace: PageConfig.defaultWorkspace,\n                    treePath: model.path\n                })));\n            },\n            isVisible: () => !!tracker.currentWidget &&\n                toArray(tracker.currentWidget.selectedItems()).length === 1,\n            icon: linkIcon.bindprops({ stylesheet: 'menuItem' }),\n            label: trans.__('Copy Shareable Link')\n        });\n    }\n};\n/**\n * The \"Open With\" context menu.\n *\n * This is its own plugin in case you would like to disable this feature.\n * e.g. jupyter labextension disable fort_disable_download:open-with\n */\nconst openWithPlugin = {\n    id: '@jupyterlab/filebrowser-extension:open-with',\n    requires: [IFileBrowserFactory, ITranslator],\n    autoStart: true,\n    activate: (app, factory, translator) => {\n        const { docRegistry: registry, commands } = app;\n        const trans = translator.load('jupyterlab');\n        const { tracker } = factory;\n        // matches only non-directory items\n        const selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\n        /**\n         * A menu widget that dynamically populates with different widget factories\n         * based on current filebrowser selection.\n         */\n        class OpenWithMenu extends Menu {\n            onBeforeAttach(msg) {\n                // clear the current menu items\n                this.clearItems();\n                // get the widget factories that could be used to open all of the items\n                // in the current filebrowser selection\n                const factories = tracker.currentWidget\n                    ? OpenWithMenu._intersection(map(tracker.currentWidget.selectedItems(), i => {\n                        return OpenWithMenu._getFactories(i);\n                    }))\n                    : undefined;\n                if (factories) {\n                    // make new menu items from the widget factories\n                    factories.forEach(factory => {\n                        this.addItem({\n                            args: { factory: factory },\n                            command: CommandIDs.open\n                        });\n                    });\n                }\n                super.onBeforeAttach(msg);\n            }\n            static _getFactories(item) {\n                var _a;\n                const factories = registry\n                    .preferredWidgetFactories(item.path)\n                    .map(f => f.name);\n                const notebookFactory = (_a = registry.getWidgetFactory('notebook')) === null || _a === void 0 ? void 0 : _a.name;\n                if (notebookFactory &&\n                    item.type === 'notebook' &&\n                    factories.indexOf(notebookFactory) === -1) {\n                    factories.unshift(notebookFactory);\n                }\n                return factories;\n            }\n            static _intersection(iter) {\n                // pop the first element of iter\n                const first = iter.next();\n                // first will be undefined if iter is empty\n                if (!first) {\n                    return;\n                }\n                // \"initialize\" the intersection from first\n                const isect = new Set(first);\n                // reduce over the remaining elements of iter\n                return reduce(iter, (isect, subarr) => {\n                    // filter out all elements not present in both isect and subarr,\n                    // accumulate result in new set\n                    return new Set(subarr.filter(x => isect.has(x)));\n                }, isect);\n            }\n        }\n        const openWith = new OpenWithMenu({ commands });\n        openWith.title.label = trans.__('Open With');\n        app.contextMenu.addItem({\n            type: 'submenu',\n            submenu: openWith,\n            selector: selectorNotDir,\n            rank: 2\n        });\n    }\n};\n/**\n * A plugin providing file upload status.\n */\nexport const fileUploadStatus = {\n    id: '@jupyterlab/filebrowser-extension:file-upload-status',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, browser, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const item = new FileUploadStatus({\n            tracker: browser.tracker,\n            translator\n        });\n        statusBar.registerStatusItem('@jupyterlab/filebrowser-extension:file-upload-status', {\n            item,\n            align: 'middle',\n            isActive: () => {\n                return !!item.model && item.model.items.length > 0;\n            },\n            activeStateChanged: item.model.stateChanged\n        });\n    }\n};\n/**\n * A plugin to add a launcher button to the file browser toolbar\n */\nexport const launcherToolbarButton = {\n    id: '@jupyterlab/filebrowser-extension:launcher-toolbar-button',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ITranslator],\n    activate: (app, factory, translator) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const { defaultBrowser: browser } = factory;\n        // Add a launcher toolbar item.\n        const launcher = new ToolbarButton({\n            icon: addIcon,\n            onClick: () => {\n                if (commands.hasCommand('launcher:create')) {\n                    return Private.createLauncher(commands, browser);\n                }\n            },\n            tooltip: trans.__('New Launcher'),\n            actualOnClick: true\n        });\n        browser.toolbar.insertItem(0, 'launch', launcher);\n    }\n};\n/**\n * Add the main file browser commands to the application's command registry.\n */\nfunction addCommands(app, factory, translator, settingRegistry, commandPalette, mainMenu) {\n    const trans = translator.load('jupyterlab');\n    const { docRegistry: registry, commands } = app;\n    const { defaultBrowser: browser, tracker } = factory;\n    commands.addCommand(CommandIDs.del, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.delete();\n            }\n        },\n        icon: closeIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Delete'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copy, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.copy();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.cut, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.cut();\n            }\n        },\n        icon: cutIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Cut')\n    });\n    commands.addCommand(CommandIDs.duplicate, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.duplicate();\n            }\n        },\n        icon: copyIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Duplicate')\n    });\n    commands.addCommand(CommandIDs.goToPath, {\n        execute: async (args) => {\n            var _a;\n            const path = args.path || '';\n            const showBrowser = !((_a = args === null || args === void 0 ? void 0 : args.dontShowBrowser) !== null && _a !== void 0 ? _a : false);\n            try {\n                const item = await Private.navigateToPath(path, factory, translator);\n                if (item.type !== 'directory' && showBrowser) {\n                    const browserForPath = Private.getBrowserForPath(path, factory);\n                    if (browserForPath) {\n                        browserForPath.clearSelectedItems();\n                        const parts = path.split('/');\n                        const name = parts[parts.length - 1];\n                        if (name) {\n                            await browserForPath.selectItemByName(name);\n                        }\n                    }\n                }\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goToPath} failed to go to: ${path}`, reason);\n            }\n            if (showBrowser) {\n                return commands.execute(CommandIDs.showBrowser, { path });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.goUp, {\n        label: 'go up',\n        execute: async () => {\n            const browserForPath = Private.getBrowserForPath('', factory);\n            if (!browserForPath) {\n                return;\n            }\n            const { model } = browserForPath;\n            await model.restored;\n            if (model.path === model.rootPath) {\n                return;\n            }\n            try {\n                await model.cd('..');\n            }\n            catch (reason) {\n                console.warn(`${CommandIDs.goUp} failed to go to parent directory of ${model.path}`, reason);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.openPath, {\n        label: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from Path…'),\n        caption: args => args.path ? trans.__('Open %1', args.path) : trans.__('Open from path'),\n        execute: async (args) => {\n            var _a;\n            let path;\n            if (args === null || args === void 0 ? void 0 : args.path) {\n                path = args.path;\n            }\n            else {\n                path = (_a = (await InputDialog.getText({\n                    label: trans.__('Path'),\n                    placeholder: '/path/relative/to/jlab/root',\n                    title: trans.__('Open Path'),\n                    okLabel: trans.__('Open')\n                })).value) !== null && _a !== void 0 ? _a : undefined;\n            }\n            if (!path) {\n                return;\n            }\n            try {\n                const trailingSlash = path !== '/' && path.endsWith('/');\n                if (trailingSlash) {\n                    // The normal contents service errors on paths ending in slash\n                    path = path.slice(0, path.length - 1);\n                }\n                const browserForPath = Private.getBrowserForPath(path, factory);\n                const { services } = browserForPath.model.manager;\n                const item = await services.contents.get(path, {\n                    content: false\n                });\n                if (trailingSlash && item.type !== 'directory') {\n                    throw new Error(`Path ${path}/ is not a directory`);\n                }\n                await commands.execute(CommandIDs.goToPath, {\n                    path,\n                    dontShowBrowser: args.dontShowBrowser\n                });\n                if (item.type === 'directory') {\n                    return;\n                }\n                return commands.execute('docmanager:open', { path });\n            }\n            catch (reason) {\n                if (reason.response && reason.response.status === 404) {\n                    reason.message = trans.__('Could not find path: %1', path);\n                }\n                return showErrorMessage(trans.__('Cannot open'), reason);\n            }\n        }\n    });\n    // Add the openPath command to the command palette\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.openPath,\n            category: trans.__('File Operations')\n        });\n    }\n    commands.addCommand(CommandIDs.open, {\n        execute: args => {\n            const factory = args['factory'] || void 0;\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const { contents } = widget.model.manager.services;\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                if (item.type === 'directory') {\n                    const localPath = contents.localPath(item.path);\n                    return widget.model.cd(`/${localPath}`);\n                }\n                return commands.execute('docmanager:open', {\n                    factory: factory,\n                    path: item.path\n                });\n            })));\n        },\n        icon: args => {\n            var _a;\n            const factory = args['factory'] || void 0;\n            if (factory) {\n                // if an explicit factory is passed...\n                const ft = registry.getFileType(factory);\n                // ...set an icon if the factory name corresponds to a file type name...\n                // ...or leave the icon blank\n                return (_a = ft === null || ft === void 0 ? void 0 : ft.icon) === null || _a === void 0 ? void 0 : _a.bindprops({ stylesheet: 'menuItem' });\n            }\n            else {\n                return folderIcon.bindprops({ stylesheet: 'menuItem' });\n            }\n        },\n        // FIXME-TRANS: Is this localizable?\n        label: args => (args['label'] || args['factory'] || trans.__('Open')),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.openBrowserTab, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            return Promise.all(toArray(map(widget.selectedItems(), item => {\n                return commands.execute('docmanager:open-browser-tab', {\n                    path: item.path\n                });\n            })));\n        },\n        icon: addIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Open in New Browser Tab'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.paste, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.paste();\n            }\n        },\n        icon: pasteIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Paste'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.createNewDirectory, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewDirectory();\n            }\n        },\n        icon: newFolderIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Folder')\n    });\n    commands.addCommand(CommandIDs.createNewFile, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewFile({ ext: 'txt' });\n            }\n        },\n        icon: textEditorIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New File')\n    });\n    commands.addCommand(CommandIDs.createNewMarkdownFile, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.createNewFile({ ext: 'md' });\n            }\n        },\n        icon: markdownIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('New Markdown File')\n    });\n    commands.addCommand(CommandIDs.rename, {\n        execute: args => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.rename();\n            }\n        },\n        icon: editIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Rename'),\n        mnemonic: 0\n    });\n    commands.addCommand(CommandIDs.copyPath, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const item = widget.selectedItems().next();\n            if (!item) {\n                return;\n            }\n            Clipboard.copyToSystem(item.path);\n        },\n        isVisible: () => !!tracker.currentWidget &&\n            tracker.currentWidget.selectedItems().next !== undefined,\n        icon: fileIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Copy Path')\n    });\n    commands.addCommand(CommandIDs.shutdown, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (widget) {\n                return widget.shutdownKernels();\n            }\n        },\n        icon: stopIcon.bindprops({ stylesheet: 'menuItem' }),\n        label: trans.__('Shut Down Kernel')\n    });\n    commands.addCommand(CommandIDs.toggleBrowser, {\n        execute: () => {\n            if (browser.isHidden) {\n                return commands.execute(CommandIDs.showBrowser, void 0);\n            }\n            return commands.execute(CommandIDs.hideBrowser, void 0);\n        }\n    });\n    commands.addCommand(CommandIDs.createLauncher, {\n        label: trans.__('New Launcher'),\n        execute: () => Private.createLauncher(commands, browser)\n    });\n    if (settingRegistry) {\n        commands.addCommand(CommandIDs.toggleNavigateToCurrentDirectory, {\n            label: trans.__('Show Active File in File Browser'),\n            isToggled: () => browser.navigateToCurrentDirectory,\n            execute: () => {\n                const value = !browser.navigateToCurrentDirectory;\n                const key = 'navigateToCurrentDirectory';\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set navigateToCurrentDirectory setting`);\n                });\n            }\n        });\n    }\n    commands.addCommand(CommandIDs.toggleLastModified, {\n        label: trans.__('Show Last Modified Column'),\n        isToggled: () => browser.showLastModifiedColumn,\n        execute: () => {\n            const value = !browser.showLastModifiedColumn;\n            const key = 'showLastModifiedColumn';\n            if (settingRegistry) {\n                return settingRegistry\n                    .set('@jupyterlab/filebrowser-extension:browser', key, value)\n                    .catch((reason) => {\n                    console.error(`Failed to set showLastModifiedColumn setting`);\n                });\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.search, {\n        label: trans.__('Search on File Names'),\n        execute: () => alert('search')\n    });\n    if (mainMenu) {\n        mainMenu.settingsMenu.addGroup([{ command: CommandIDs.toggleNavigateToCurrentDirectory }], 5);\n    }\n    if (commandPalette) {\n        commandPalette.addItem({\n            command: CommandIDs.toggleNavigateToCurrentDirectory,\n            category: trans.__('File Operations')\n        });\n    }\n    // matches the text in the filebrowser; relies on an implementation detail\n    // being the text of the listing element being substituted with input\n    // area to deactivate shortcuts when the file name is being edited.\n    const selectorBrowser = '.jp-DirListing-content .jp-DirListing-itemText';\n    // matches anywhere on filebrowser\n    const selectorContent = '.jp-DirListing-content';\n    // matches all filebrowser items\n    const selectorItem = '.jp-DirListing-item[data-isdir]';\n    // matches only non-directory items\n    const selectorNotDir = '.jp-DirListing-item[data-isdir=\"false\"]';\n    // If the user did not click on any file, we still want to show paste and new folder,\n    // so target the content rather than an item.\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewDirectory,\n        selector: selectorContent,\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewFile,\n        selector: selectorContent,\n        rank: 2\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.createNewMarkdownFile,\n        selector: selectorContent,\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.paste,\n        selector: selectorContent,\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.open,\n        selector: selectorItem,\n        rank: 1\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.openBrowserTab,\n        selector: selectorNotDir,\n        rank: 3\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.rename,\n        selector: selectorItem,\n        rank: 4\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.del,\n        selector: selectorItem,\n        rank: 5\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.cut,\n        selector: selectorItem,\n        rank: 6\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copy,\n        selector: selectorNotDir,\n        rank: 7\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.duplicate,\n        selector: selectorNotDir,\n        rank: 8\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.shutdown,\n        selector: selectorNotDir,\n        rank: 10\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.share,\n        selector: selectorItem,\n        rank: 11\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyPath,\n        selector: selectorItem,\n        rank: 12\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.toggleLastModified,\n        selector: '.jp-DirListing-header',\n        rank: 14\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.del,\n        selector: selectorBrowser,\n        keys: ['Delete']\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.cut,\n        selector: selectorBrowser,\n        keys: ['Ctrl X']\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.copy,\n        selector: selectorBrowser,\n        keys: ['Ctrl C']\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.paste,\n        selector: selectorBrowser,\n        keys: ['Ctrl V']\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.rename,\n        selector: selectorBrowser,\n        keys: ['F2']\n    });\n    app.commands.addKeyBinding({\n        command: CommandIDs.duplicate,\n        selector: selectorBrowser,\n        keys: ['Ctrl D']\n    });\n}\n/**\n * A namespace for private module data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a launcher for a given filebrowser widget.\n     */\n    function createLauncher(commands, browser) {\n        const { model } = browser;\n        return commands\n            .execute('launcher:create', { cwd: model.path })\n            .then((launcher) => {\n            model.pathChanged.connect(() => {\n                if (launcher.content) {\n                    launcher.content.cwd = model.path;\n                }\n            }, launcher);\n            return launcher;\n        });\n    }\n    Private.createLauncher = createLauncher;\n    /**\n     * Get browser object given file path.\n     */\n    function getBrowserForPath(path, factory) {\n        const { defaultBrowser: browser, tracker } = factory;\n        const driveName = browser.model.manager.services.contents.driveName(path);\n        if (driveName) {\n            const browserForPath = tracker.find(_path => _path.model.driveName === driveName);\n            if (!browserForPath) {\n                // warn that no filebrowser could be found for this driveName\n                console.warn(`${CommandIDs.goToPath} failed to find filebrowser for path: ${path}`);\n                return;\n            }\n            return browserForPath;\n        }\n        // if driveName is empty, assume the main filebrowser\n        return browser;\n    }\n    Private.getBrowserForPath = getBrowserForPath;\n    /**\n     * Navigate to a path or the path containing a file.\n     */\n    async function navigateToPath(path, factory, translator) {\n        const trans = translator.load('jupyterlab');\n        const browserForPath = Private.getBrowserForPath(path, factory);\n        if (!browserForPath) {\n            throw new Error(trans.__('No browser for path'));\n        }\n        const { services } = browserForPath.model.manager;\n        const localPath = services.contents.localPath(path);\n        await services.ready;\n        const item = await services.contents.get(path, { content: false });\n        const { model } = browserForPath;\n        await model.restored;\n        if (item.type === 'directory') {\n            await model.cd(`/${localPath}`);\n        }\n        else {\n            await model.cd(`/${PathExt.dirname(localPath)}`);\n        }\n        return item;\n    }\n    Private.navigateToPath = navigateToPath;\n    /**\n     * Restores file browser state and overrides state if tree resolver resolves.\n     */\n    async function restoreBrowser(browser, commands, router, tree) {\n        const restoring = 'jp-mod-restoring';\n        browser.addClass(restoring);\n        if (!router) {\n            await browser.model.restore(browser.id);\n            await browser.model.refresh();\n            browser.removeClass(restoring);\n            return;\n        }\n        const listener = async () => {\n            router.routed.disconnect(listener);\n            const paths = await (tree === null || tree === void 0 ? void 0 : tree.paths);\n            if ((paths === null || paths === void 0 ? void 0 : paths.file) || (paths === null || paths === void 0 ? void 0 : paths.browser)) {\n                // Restore the model without populating it.\n                await browser.model.restore(browser.id, false);\n                if (paths.file) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.file,\n                        dontShowBrowser: true\n                    });\n                }\n                if (paths.browser) {\n                    await commands.execute(CommandIDs.openPath, {\n                        path: paths.browser,\n                        dontShowBrowser: true\n                    });\n                }\n            }\n            else {\n                await browser.model.restore(browser.id);\n                await browser.model.refresh();\n            }\n            browser.removeClass(restoring);\n        };\n        router.routed.connect(listener);\n    }\n    Private.restoreBrowser = restoreBrowser;\n})(Private || (Private = {}));\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    browser,\n    shareFile,\n    fileUploadStatus,\n    downloadPlugin,\n    browserWidget,\n    launcherToolbarButton,\n    openWithPlugin\n];\nexport default plugins;\n//# sourceMappingURL=index.js.map"],"sourceRoot":""}