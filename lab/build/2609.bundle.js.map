{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/attachments/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/cells/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablemap.js"],"names":["DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","each","cell","index","detectTargetArea","target","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","value","text","split","slice","VirtualDOM","h","className","Collapser","ReactWidget","super","this","addClass","onClick","e","handleClick","InputCollapser","_a","parent","inputHidden","update","OutputCollapser","outputHidden","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","defaultContentFactory","prompt","_prompt","createInputPrompt","editorOptions","factory","editorFactory","updateOnShow","editor","_editor","CodeEditorWrapper","layout","PanelLayout","addWidget","widget","_rendered","hide","show","isDisposed","dispose","ContentFactory","defaultEditorFactory","InputPrompt","CodeMirrorEditorFactory","newInlineEditor","_executionCount","textContent","AttachmentsModel","_map","_isDisposed","_stateChanged","Signal","_changed","_modelDB","_serialized","_changeGuard","values","key","Object","keys","undefined","set","changed","connect","_onMapChanged","modelDB","createValue","get","fromJSON","toJSON","_onSerializedChanged","has","item","_createItem","delete","forEach","clear","ret","createAttachmentModel","_onGenericChange","sender","args","emit","newValue","AttachmentModel","AttachmentsResolver","_parent","_model","url","startsWith","resolveUrl","path","getDownloadUrl","attachment","data","mimeType","imageRendererFactory","Error","_b","_c","isLocal","call","Private","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","id","UUID","contentChanged","stateChanged","_modelDBMutex","onGenericChange","observableMetadata","createMap","onModelDBMetadataChange","trusted","onTrustedChanged","metadata","Array","isArray","source","join","JSONExt","sharedModel","getId","getValue","setValue","create","JSON","parse","stringify","cell_type","event","getMetadata","_changeCellMetata","setMetadata","jupyter","collapsed","name","scrolled","tags","change","_onSharedModelChanged","metadataChange","map","AttachmentsCellModel","attachments","_attachments","createAttachmentsModel","RawCellModel","MarkdownCellModel","CodeCellModel","outputs","execution_count","_onExecutionCountChanged","setOutputs","_outputs","createOutputArea","onModelDBOutputsChange","collapseChanged","oldValue","hasOwnProperty","reinitialize","clearExecution","getOutputs","output","add","switchSharedModel","codeCell","newValues","updateOutputs","newIndex","oldIndex","oldValues","outputsChange","executionCountChange","outputs_hidden","newJupyter","s","t","p","prototype","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","CONTENT_CLASS","Placeholder","callback","_callback","InputPlaceholder","ellipsesIcon","elementPosition","height","width","OutputPlaceholder","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_readOnly","_inputHidden","_syncCollapse","_syncEditable","header","createCellHeader","inputWrapper","_inputWrapper","Panel","inputCollapser","input","_input","updateEditorOnShow","_inputPlaceholder","footer","createCellFooter","editorConfig","setOptions","onMetadataChanged","loadCollapseState","loadEditableState","firstElementChild","syncEditable","saveEditableState","current","readOnly","Promise","resolve","setPrompt","syncCollapse","saveCollapseState","handleInputHidden","assign","source_hidden","constructor","msg","focus","refresh","getOption","setOption","toggleClass","_editorFactory","CodeCell","_outputHidden","_syncScrolled","_savingMetadata","rendermime","_rendermime","outputWrapper","_outputWrapper","outputCollapser","_output","maxNumberOutputs","outputLengthChanged","_outputLengthHandler","insertWidget","_outputPlaceholder","onStateChanged","initializeState","loadScrolledState","removeWidget","isHidden","_outputsScrolled","syncScrolled","saveScrolledState","outputsScrolled","disconnect","force","execute","async","sessionContext","code","trim","session","kernel","cellId","recordTiming","future","msgPromise","outputArea","recordTimingHook","label","msg_type","content","execution_state","date","Date","toISOString","timingInfo","registerMessageHook","started","finished","AttachmentsCell","_evtPaste","preventDefault","_evtNativeDrop","_evtDragOver","_evtDrop","onAfterAttach","addEventListener","removeEventListener","some","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","toArray","filter","types","withContent","URI","_generateURI","updateCellSourceWithAttachment","then","fullModel","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","result","matches","exec","bundle","onerror","console","error","readAsDataURL","lastIndex","lastIndexOf","concat","substring","MarkdownCell","_renderer","_prevText","_ready","PromiseDelegate","clone","resolver","_monitor","ActivityMonitor","signal","timeout","activityStopped","_updateRenderedInput","renderInput","promise","_handleRendered","inputArea","removeClass","showEditor","onUpdateRequest","attachmentName","textToBeAppended","mimeModel","MimeModel","createRenderer","renderModel","RawCell","ObservableMap","Map","_itemCmp","itemCmp","size","oldVal","keyList","v","k","push","valList","first","second"],"mappings":"ioBAiBA,MAIMA,EAAmB,eAQnBC,EAA0B,uBAI1BC,EAAyB,sBAIzBC,EAA0B,4BACzB,IAAIC,GACX,SAAWA,GA8BPA,EAAcC,SAhBd,SAAkBC,EAAMC,EAAOC,GAC3B,IAAIC,GAAa,EACjB,KAAOH,GAAQA,EAAKI,eAAe,CAC/B,GAAIF,EAAWF,GAAO,EAClB,IAAAK,MAAKJ,GAAO,CAACK,EAAMC,KACf,GAAID,EAAKN,OAASA,EAEd,OADAG,EAAYI,GACL,KAGf,MAEJP,EAAOA,EAAKI,cAEhB,OAAOD,GA2BXL,EAAcU,iBAlBd,SAA0BF,EAAMG,GAC5B,IAAIC,EAeJ,OAZQA,EAFJJ,EACIA,EAAKK,aAAaX,KAAKY,SAASH,GACnB,QAERH,EAAKO,WAAWD,SAASH,GACjB,SAGA,OAIJ,UAEVC,GAiBXZ,EAAcgB,gBALd,SAAyBC,EAAOC,EAAOC,EAAOC,GAC1C,MAAMC,EAAKC,KAAKC,IAAIJ,EAAQF,GACtBO,EAAKF,KAAKC,IAAIH,EAAQF,GAC5B,OAAOG,GA1FQ,GA0FgBG,GA1FhB,GAmInBxB,EAAcyB,oBAhCd,SAA6BC,EAAYC,GACrC,MAAMC,EAAQD,EAAcE,OAC5B,IAAIC,EACJ,GAA8B,SAA1BJ,EAAWK,MAAMC,KAAiB,CAClC,MAAMC,EAAiBP,EAAWK,MAC7BE,eACLH,EAAe,IACXG,IACAH,EAAeG,EAAeC,iBAIlCJ,EAAe,GAEnB,MAAMK,EAAcT,EAAWK,MAAMK,MAAMC,KAAKC,MAAM,MAAM,GAAGC,MAAM,EAAG,IACxE,OAAIX,EAAQ,EACa,KAAjBE,EACO,EAAAU,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW9C,GAAoB,EAAA6C,EAAA,KAAO,CAAEC,UAAW5C,GAA0B,IAAMgC,EAAe,MAAO,EAAAW,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,IAAe,EAAAM,EAAA,IAAM,CAAEC,UAAW3C,GAA2B,MAGtP,EAAAyC,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW9C,GAAoB,EAAA6C,EAAA,KAAO,CAAEC,UAAW5C,IAA2B,EAAA2C,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,IAAe,EAAAM,EAAA,IAAM,CAAEC,UAAW3C,GAA2B,MAIjN,KAAjB+B,EACO,EAAAU,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW,0CAAoD,EAAAD,EAAA,KAAO,CAAEC,UAAW5C,GAA0B,IAAMgC,EAAe,MAAO,EAAAW,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,MAGzN,EAAAK,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW,0CAAoD,EAAAD,EAAA,KAAO,CAAEC,UAAW5C,IAA2B,EAAA2C,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,OAzGrN,CA8GGnC,IAAkBA,EAAgB,K,0BCvH9B,MAAM2C,UAAkB,EAAAC,YAI3B,cACIC,QACAC,KAAKC,SA3BW,gBAgCpB,gBACI,OAAO,EAKX,SAEI,OAAO,gBAAoB,MAAO,CAAEL,UApCd,qBAoCqCM,QAASC,GAAKH,KAAKI,YAAYD,MAM3F,MAAME,UAAuBR,EAIhC,cACIE,QACAC,KAAKC,SA5CW,qBAiDpB,gBACI,IAAIK,EACJ,MAAM5C,EAA8B,QAAtB4C,EAAKN,KAAKO,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACxE,QAAI7C,GACOA,EAAK8C,YASpB,YAAYL,GACR,IAAIG,EACJ,MAAM5C,EAA8B,QAAtB4C,EAAKN,KAAKO,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACpE7C,IACAA,EAAK8C,aAAe9C,EAAK8C,aAG7BR,KAAKS,UAMN,MAAMC,UAAwBb,EAIjC,cACIE,QACAC,KAAKC,SA7EY,sBAkFrB,gBACI,IAAIK,EACJ,MAAM5C,EAA8B,QAAtB4C,EAAKN,KAAKO,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACxE,QAAI7C,GACOA,EAAKiD,aASpB,YAAYR,GACR,IAAIG,EACJ,MAAM5C,EAA8B,QAAtB4C,EAAKN,KAAKO,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACpE7C,IACAA,EAAKiD,cAAgBjD,EAAKiD,cAG9BX,KAAKS,U,eC3GN,MAAMG,UAAmB,EAAAC,OAI5B,cACId,QACAC,KAAKC,SAda,kBAoBnB,MAAMa,UAAmB,EAAAD,OAI5B,cACId,QACAC,KAAKC,SAtBa,kB,yBCkBnB,MAAMc,UAAkB,EAAAF,OAI3B,YAAYG,GACRjB,QACAC,KAAKC,SAzBY,gBA0BjB,MAAMhB,EAASe,KAAKf,MAAQ+B,EAAQ/B,MAC9BgC,EAAkBjB,KAAKiB,eACzBD,EAAQC,gBAAkBF,EAAUG,sBAElCC,EAAUnB,KAAKoB,QAAUH,EAAeI,oBAC9CF,EAAOlB,SA3BiB,uBA6BxB,MAAMqB,EAAgB,CAClBrC,QACAsC,QAASN,EAAeO,cACxBC,aAAcT,EAAQS,cAEpBC,EAAU1B,KAAK2B,QAAU,IAAI,EAAAC,kBAAkBN,GACrDI,EAAOzB,SA3BiB,uBA4BxB,MAAM4B,EAAU7B,KAAK6B,OAAS,IAAI,EAAAC,YAClCD,EAAOE,UAAUZ,GACjBU,EAAOE,UAAUL,GAKrB,mBACI,OAAO1B,KAAK2B,QAKhB,aACI,OAAO3B,KAAK2B,QAAQD,OAKxB,iBACI,OAAO1B,KAAKoB,QAAQhE,KAKxB,YAAY4E,GACR,MAAMH,EAAS7B,KAAK6B,OAChB7B,KAAKiC,YACLjC,KAAKiC,UAAU1B,OAAS,MAE5BP,KAAK2B,QAAQO,OACblC,KAAKiC,UAAYD,EACjBH,EAAOE,UAAUC,GAKrB,aACQhC,KAAKiC,YACLjC,KAAKiC,UAAU1B,OAAS,MAE5BP,KAAK2B,QAAQQ,OAKjB,UAAU7C,GACNU,KAAKoB,QAAQjC,eAAiBG,EAKlC,UAEQU,KAAKoC,aAGTpC,KAAKoB,QAAU,KACfpB,KAAK2B,QAAU,KACf3B,KAAKiC,UAAY,KACjBlC,MAAMsC,aAMd,SAAWtB,GAMP,MAAMuB,EAIF,YAAYtB,EAAU,IAClBhB,KAAK2B,QAAUX,EAAQQ,eAAiBT,EAAUwB,qBAKtD,oBACI,OAAOvC,KAAK2B,QAKhB,oBACI,OAAO,IAAIa,GAGnBzB,EAAUuB,eAAiBA,EAW3BvB,EAAUwB,sBANiB,IAAI,EAAAE,yBACLC,gBAS1B3B,EAAUG,sBAAwB,IAAIoB,EAAe,IAzCzD,CA0CGvB,IAAcA,EAAY,KAItB,MAAMyB,UAAoB,EAAA3B,OAI7B,cACId,QACAC,KAAK2C,gBAAkB,KACvB3C,KAAKC,SAvJc,kBA4JvB,qBACI,OAAOD,KAAK2C,gBAEhB,mBAAmBrD,GACfU,KAAK2C,gBAAkBrD,EAEnBU,KAAK5C,KAAKwF,YADA,OAAVtD,EACwB,IAGA,IAAIA,GAAS,S,gDChL1C,MAAMuD,EAIT,YAAY7B,EAAU,IAUlB,GATAhB,KAAK8C,KAAO,IAAI,IAChB9C,KAAK+C,aAAc,EACnB/C,KAAKgD,cAAgB,IAAI,EAAAC,OAAOjD,MAChCA,KAAKkD,SAAW,IAAI,EAAAD,OAAOjD,MAC3BA,KAAKmD,SAAW,KAChBnD,KAAKoD,YAAc,KACnBpD,KAAKqD,cAAe,EACpBrD,KAAKiB,eACDD,EAAQC,gBAAkB4B,EAAiB3B,sBAC3CF,EAAQsC,OACR,IAAK,MAAMC,KAAOC,OAAOC,KAAKzC,EAAQsC,aACNI,IAAxB1C,EAAQsC,OAAOC,IACfvD,KAAK2D,IAAIJ,EAAKvC,EAAQsC,OAAOC,IAIzCvD,KAAK8C,KAAKc,QAAQC,QAAQ7D,KAAK8D,cAAe9D,MAG1CgB,EAAQ+C,UACR/D,KAAKmD,SAAWnC,EAAQ+C,QACxB/D,KAAKoD,YAAcpD,KAAKmD,SAASa,YAAY,eACzChE,KAAKoD,YAAYa,MACjBjE,KAAKkE,SAASlE,KAAKoD,YAAYa,OAG/BjE,KAAKoD,YAAYO,IAAI3D,KAAKmE,UAE9BnE,KAAKoD,YAAYQ,QAAQC,QAAQ7D,KAAKoE,qBAAsBpE,OAMpE,mBACI,OAAOA,KAAKgD,cAKhB,cACI,OAAOhD,KAAKkD,SAKhB,WACI,OAAOlD,KAAK8C,KAAKW,OAKrB,aACI,OAAOzD,KAAK8C,KAAKW,OAAO1E,OAK5B,iBACI,OAAOiB,KAAK+C,YAKhB,UACQ/C,KAAKoC,aAGTpC,KAAK+C,aAAc,EACnB/C,KAAK8C,KAAKT,UACV,EAAAY,OAAA,UAAiBjD,OAKrB,IAAIuD,GACA,OAAOvD,KAAK8C,KAAKuB,IAAId,GAKzB,IAAIA,GACA,OAAOvD,KAAK8C,KAAKmB,IAAIV,GAKzB,IAAIA,EAAKjE,GAEL,MAAMgF,EAAOtE,KAAKuE,YAAY,CAAEjF,UAChCU,KAAK8C,KAAKa,IAAIJ,EAAKe,GAKvB,OAAOf,GACHvD,KAAK8C,KAAK0B,OAAOjB,GAKrB,QACIvD,KAAK8C,KAAKQ,SAASmB,SAASH,IACxBA,EAAKjC,aAETrC,KAAK8C,KAAK4B,QAQd,SAASpB,GACLtD,KAAK0E,QACLlB,OAAOC,KAAKH,GAAQmB,SAAQlB,SACJG,IAAhBJ,EAAOC,IACPvD,KAAK2D,IAAIJ,EAAKD,EAAOC,OAOjC,SACI,MAAMoB,EAAM,GACZ,IAAK,MAAMpB,KAAOvD,KAAK8C,KAAKW,OACxBkB,EAAIpB,GAAOvD,KAAK8C,KAAKmB,IAAIV,GAAKY,SAElC,OAAOQ,EAKX,YAAY3D,GACR,MACMsD,EADUtE,KAAKiB,eACA2D,sBAAsB5D,GAE3C,OADAsD,EAAKV,QAAQC,QAAQ7D,KAAK6E,iBAAkB7E,MACrCsE,EAKX,cAAcQ,EAAQC,GACd/E,KAAKoD,cAAgBpD,KAAKqD,eAC1BrD,KAAKqD,cAAe,EACpBrD,KAAKoD,YAAYO,IAAI3D,KAAKmE,UAC1BnE,KAAKqD,cAAe,GAExBrD,KAAKkD,SAAS8B,KAAKD,GACnB/E,KAAKgD,cAAcgC,UAAK,GAM5B,qBAAqBF,EAAQC,GACpB/E,KAAKqD,eACNrD,KAAKqD,cAAe,EACpBrD,KAAKkE,SAASa,EAAKE,UACnBjF,KAAKqD,cAAe,GAM5B,mBACIrD,KAAKgD,cAAcgC,UAAK,KAMhC,SAAWnC,GAIP,MAAMP,EAIF,sBAAsBtB,GAClB,OAAO,IAAI,EAAAkE,gBAAgBlE,IAGnC6B,EAAiBP,eAAiBA,EAIlCO,EAAiB3B,sBAAwB,IAAIoB,EAhBjD,CAiBGO,IAAqBA,EAAmB,KAMpC,MAAMsC,EAIT,YAAYnE,GACRhB,KAAKoF,QAAUpE,EAAQT,QAAU,KACjCP,KAAKqF,OAASrE,EAAQ/B,MAK1B,iBAAiBqG,GACb,OAAItF,KAAKoF,UAAYE,EAAIC,WAAW,eACzBvF,KAAKoF,QAAQI,WAAWF,GAE5BA,EAQX,qBAAqBG,GACjB,GAAIzF,KAAKoF,UAAYK,EAAKF,WAAW,eACjC,OAAOvF,KAAKoF,QAAQM,eAAeD,GAGvC,MAAMlC,EAAMkC,EAAKhG,MAAM,cAAcV,QAC/B4G,EAAa3F,KAAKqF,OAAOpB,IAAIV,GACnC,QAAmBG,IAAfiC,EAEA,OAAOF,EAEX,MAAM,KAAEG,GAASD,EACXE,EAAWrC,OAAOC,KAAKmC,GAAM,GAEnC,QAAiBlC,IAAbmC,IACsD,IAAtD,EAAAC,qBAAA,kBAAuCD,GACvC,MAAM,IAAIE,MAAM,0CAA0CF,OAG9D,MADgB,QAAQA,YAAmBD,EAAKC,KAOpD,QAAQP,GACJ,IAAIhF,EAAI0F,EAAIC,EACZ,QAAIjG,KAAKoF,UAAYE,EAAIC,WAAW,iBAC2E,QAAnGU,EAA4C,QAAtCD,GAAM1F,EAAKN,KAAKoF,SAASc,eAA4B,IAAPF,OAAgB,EAASA,EAAGG,KAAK7F,EAAIgF,UAAyB,IAAPW,GAAgBA,G,ICkU3IG,E,sBAhjBG,SAASC,EAAgBpH,GAC5B,MAAsB,SAAfA,EAAMC,KAEV,SAASoH,EAAoBrH,GAChC,MAAsB,aAAfA,EAAMC,KAEV,SAASqH,EAAetH,GAC3B,MAAsB,QAAfA,EAAMC,KAKV,MAAMsH,UAAkB,EAAAC,WAAA,MAI3B,YAAYzF,GACR,IAAIV,EACJP,MAAM,CACFgE,QAAS/C,EAAQ+C,QACjB2C,GAAI1F,EAAQ0F,KAA+B,QAAvBpG,EAAKU,EAAQtD,YAAyB,IAAP4C,OAAgB,EAASA,EAAGoG,KAAO,EAAAC,KAAA,UAK1F3G,KAAK4G,eAAiB,IAAI,EAAA3D,OAAOjD,MAIjCA,KAAK6G,aAAe,IAAI,EAAA5D,OAAOjD,MAI/BA,KAAK8G,cAAgB,gBACrB9G,KAAKV,MAAMsE,QAAQC,QAAQ7D,KAAK+G,gBAAiB/G,MAChCA,KAAK+D,QAAQC,YAAY,QACjCL,IAAI3D,KAAKd,MAClB,MAAM8H,EAAqBhH,KAAK+D,QAAQkD,UAAU,YAClDD,EAAmBpD,QAAQC,QAAQ7D,KAAKkH,wBAAyBlH,MACjEgH,EAAmBpD,QAAQC,QAAQ7D,KAAK+G,gBAAiB/G,MACzD,MAAMtC,EAAOsD,EAAQtD,KACfyJ,EAAUnH,KAAK+D,QAAQC,YAAY,WAEzC,GADAmD,EAAQvD,QAAQC,QAAQ7D,KAAKoH,iBAAkBpH,OAC1CtC,EAED,YADAyJ,EAAQxD,KAAI,GAGhBwD,EAAQxD,MAAMjG,EAAK2J,SAAkB,gBAC9B3J,EAAK2J,SAAkB,QAC1BC,MAAMC,QAAQ7J,EAAK8J,QACnBxH,KAAKV,MAAMC,KAAO7B,EAAK8J,OAAOC,KAAK,IAGnCzH,KAAKV,MAAMC,KAAO7B,EAAK8J,OAE3B,MAAMH,EAAW,EAAAK,QAAA,SAAiBhK,EAAK2J,UACrB,QAAdrH,KAAKd,aACEmI,EAAiB,OAEV,SAAdrH,KAAKd,cACEmI,EAAoB,iBACpBA,EAAmB,UAE9B,IAAK,MAAM9D,KAAO8D,EACdL,EAAmBrD,IAAIJ,EAAK8D,EAAS9D,IAM7C,WAGI,MAAO,MAKX,SACI,OAAOvD,KAAK2H,YAAYC,QAK5B,eACI,OAAO5H,KAAK+D,QAAQE,IAAI,YAK5B,cACI,OAAOjE,KAAK+D,QAAQ8D,SAAS,WAKjC,YAAY5C,GACSjF,KAAKmH,UACLlC,GAGjBjF,KAAK+D,QAAQ+D,SAAS,UAAW7C,GAKrC,SACI,MAAMoC,EAAW7D,OAAOuE,OAAO,MAC/B,IAAK,MAAMxE,KAAOvD,KAAKqH,SAAS5D,OAAQ,CACpC,MAAMnE,EAAQ0I,KAAKC,MAAMD,KAAKE,UAAUlI,KAAKqH,SAASpD,IAAIV,KAC1D8D,EAAS9D,GAAOjE,EAKpB,OAHIU,KAAKmH,UACLE,EAAkB,SAAI,GAEnB,CACHc,UAAWnI,KAAKd,KAChBsI,OAAQxH,KAAKV,MAAMC,KACnB8H,YAQR,iBAAiBF,EAASpC,IAM1B,wBAAwBD,EAAQsD,GAC5B,MAAMf,EAAWrH,KAAK2H,YAAYU,cAClCrI,KAAK8G,eAAc,KACf,OAAQsB,EAAMlJ,MACV,IAAK,MAGL,IAAK,SACDc,KAAKsI,kBAAkBjB,EAAUe,GACjC,MACJ,IAAK,gBACMf,EAASe,EAAM7E,KACtB,MACJ,QACI,MAAM,IAAIwC,MAAM,uBAAuBqC,EAAMlJ,QAErDc,KAAK2H,YAAYY,YAAYlB,MASrC,kBAAkBA,EAAUe,GACxB,OAAQA,EAAM7E,KACV,IAAK,UACD8D,EAASmB,QAAUJ,EAAMnD,SACzB,MACJ,IAAK,YACDoC,EAASoB,UAAYL,EAAMnD,SAC3B,MACJ,IAAK,OACDoC,EAASqB,KAAON,EAAMnD,SACtB,MACJ,IAAK,WACDoC,EAASsB,SAAWP,EAAMnD,SAC1B,MACJ,IAAK,OACDoC,EAASuB,KAAOR,EAAMnD,SACtB,MACJ,IAAK,UACDoC,EAASF,QAAUiB,EAAMnD,SACzB,MACJ,QAIIoC,EAASe,EAAM7E,KAAO6E,EAAMnD,UAYxC,sBAAsBH,EAAQ+D,GAC1B9I,MAAM+I,sBAAsBhE,EAAQ+D,GACpC7I,KAAK8G,eAAc,KACf,IAAIxG,EACJ,GAAIuI,EAAOE,eAAgB,CACvB,MAAM9D,EAA4C,QAAhC3E,EAAKuI,EAAOE,sBAAmC,IAAPzI,OAAgB,EAASA,EAAG2E,SAClFA,GACAzB,OAAOC,KAAKwB,GAAU+D,KAAIzF,IACtB,OAAQA,GACJ,IAAK,YACDvD,KAAKqH,SAAS1D,IAAI,YAAasB,EAASuD,SACxC,MACJ,IAAK,UACDxI,KAAKqH,SAAS1D,IAAI,UAAWsB,EAASuD,SACtC,MACJ,IAAK,OACDxI,KAAKqH,SAAS1D,IAAI,OAAQsB,EAASyD,MACnC,MACJ,IAAK,WACD1I,KAAKqH,SAAS1D,IAAI,WAAYsB,EAAS0D,UACvC,MACJ,IAAK,OACD3I,KAAKqH,SAAS1D,IAAI,OAAQsB,EAAS2D,MACnC,MACJ,IAAK,UACD5I,KAAKqH,SAAS1D,IAAI,UAAWsB,EAASkC,SACtC,MACJ,QAIInH,KAAKqH,SAAS1D,IAAIJ,EAAK0B,EAAS1B,YAU5D,kBACIvD,KAAK4G,eAAe5B,UAAK,IAM1B,MAAMiE,UAA6BzC,EAItC,YAAYxF,GACRjB,MAAMiB,GACN,MAAMO,EAAUP,EAAQC,gBAAkBgI,EAAqB/H,sBAC/D,IAAIgI,EACJ,MAAMxL,EAAOsD,EAAQtD,MACjBA,GAA4B,QAAnBA,EAAKyK,WAA0C,aAAnBzK,EAAKyK,YAC1Ce,EAAcxL,EACTwL,aAETlJ,KAAKmJ,aAAe5H,EAAQ6H,uBAAuB,CAC/C9F,OAAQ4F,EACRnF,QAAS/D,KAAK+D,UAElB/D,KAAKmJ,aAAatC,aAAahD,QAAQ7D,KAAK+G,gBAAiB/G,MAKjE,kBACI,OAAOA,KAAKmJ,aAKhB,SACI,MAAMzL,EAAOqC,MAAMoE,SAInB,OAHInE,KAAKkJ,YAAYnK,SACjBrB,EAAKwL,YAAclJ,KAAKkJ,YAAY/E,UAEjCzG,IAMf,SAAWuL,GAIP,MAAM3G,EAIF,uBAAuBtB,GACnB,OAAO,IAAI6B,EAAiB7B,IAGpCiI,EAAqB3G,eAAiBA,EAItC2G,EAAqB/H,sBAAwB,IAAIoB,EAhBrD,CAiBG2G,IAAyBA,EAAuB,KAI5C,MAAMI,UAAqBJ,EAI9B,WACI,MAAO,MAKX,SACI,MAAMvL,EAAOqC,MAAMoE,SAEnB,OADAzG,EAAKgJ,GAAK1G,KAAK0G,GACRhJ,GAMR,MAAM4L,UAA0BL,EAInC,YAAYjI,GACRjB,MAAMiB,GAENhB,KAAK6F,SAAW,oBAKpB,WACI,MAAO,WAKX,SACI,MAAMnI,EAAOqC,MAAMoE,SAEnB,OADAzG,EAAKgJ,GAAK1G,KAAK0G,GACRhJ,GAMR,MAAM6L,UAAsB/C,EAI/B,YAAYxF,GACRjB,MAAMiB,GACN,MAAMO,EAAUP,EAAQC,gBAAkBsI,EAAcrI,sBAClDiG,EAAUnH,KAAKmH,QACfzJ,EAAOsD,EAAQtD,KACrB,IAAI8L,EAAU,GACd,MAAMrK,EAAiBa,KAAK+D,QAAQC,YAAY,kBAwBhD,GAvBK7E,EAAe8E,QACZvG,GAA2B,SAAnBA,EAAKyK,WACbhJ,EAAewE,IAAIjG,EAAK+L,iBAAmB,MAC3CD,EAAU9L,EAAK8L,SAGfrK,EAAewE,IAAI,OAG3BxE,EAAeyE,QAAQC,QAAQ7D,KAAK0J,yBAA0B1J,MAC9DA,KAAK8G,eAAc,KACI9G,KAAK2H,YACbgC,WAAWH,QAAyCA,EAAU,OAE7ExJ,KAAK4J,SAAWrI,EAAQsI,iBAAiB,CAAE1C,UAAS7D,OAAQkG,IAC5DxJ,KAAK4J,SAAShG,QAAQC,QAAQ7D,KAAK+G,gBAAiB/G,MACpDA,KAAK4J,SAAShG,QAAQC,QAAQ7D,KAAK8J,uBAAwB9J,MAI3DA,KAAKqH,SAASzD,QAAQC,QAAQuC,EAAQ2D,gBAAiB/J,MAGnDA,KAAKqH,SAAShD,IAAI,aAAc,CAChC,MAAMoE,EAAYzI,KAAKqH,SAASpD,IAAI,aACpCmC,EAAQ2D,gBAAgB/J,KAAKqH,SAAU,CACnCnI,KAAM,SACNqE,IAAK,YACLyG,SAAUvB,EACVxD,SAAUwD,SAGb,GAAIzI,KAAKqH,SAAShD,IAAI,WAAY,CACnC,MAAMmE,EAAUxI,KAAKqH,SAASpD,IAAI,WAC9BuE,EAAQyB,eAAe,mBACvB7D,EAAQ2D,gBAAgB/J,KAAKqH,SAAU,CACnCnI,KAAM,SACNqE,IAAK,UACLyG,SAAUxB,EACVvD,SAAUuD,KAK1B,kBAAkBb,EAAauC,GACvBA,IACAlK,KAAKmK,iBACLxC,EAAYyC,aAAa3F,SAAQ4F,GAAUrK,KAAK4J,SAASU,IAAID,MAEjEtK,MAAMwK,kBAAkB5C,EAAauC,GAKzC,WACI,MAAO,OAKX,qBACI,OAAOlK,KAAK+D,QAAQ8D,SAAS,kBAEjC,mBAAmB5C,GAEXA,IADajF,KAAKb,gBAItBa,KAAK+D,QAAQ+D,SAAS,iBAAkB7C,GAAY,MAExD,iBACIjF,KAAKwJ,QAAQ9E,QACb1E,KAAKb,eAAiB,KACtBa,KAAKqH,SAAS7C,OAAO,aAKzB,cACI,OAAOxE,KAAK4J,SAKhB,UACQ5J,KAAKoC,aAGTpC,KAAK4J,SAASvH,UACdrC,KAAK4J,SAAW,KAChB7J,MAAMsC,WAKV,SACI,MAAM3E,EAAOqC,MAAMoE,SAInB,OAHAzG,EAAK+L,gBAAkBzJ,KAAKb,gBAAkB,KAC9CzB,EAAK8L,QAAUxJ,KAAKwJ,QAAQrF,SAC5BzG,EAAKgJ,GAAK1G,KAAK0G,GACRhJ,EAKX,iBAAiByJ,EAASpC,GAClB/E,KAAK4J,WACL5J,KAAK4J,SAASzC,QAAUpC,EAAKE,UAEjCjF,KAAK6G,aAAa7B,KAAK,CACnB0D,KAAM,UACNsB,SAAUjF,EAAKiF,SACf/E,SAAUF,EAAKE,WAMvB,uBAAuBH,EAAQsD,GAC3B,MAAMoC,EAAWxK,KAAK2H,YACtB3H,KAAK8G,eAAc,KACf,OAAQsB,EAAMlJ,MACV,IAAK,MAAO,CACR,MAAMsK,EAAUpB,EAAMqC,UAAUzB,KAAIqB,GAAUA,EAAOlG,WACrDqG,EAASE,cAActC,EAAMuC,SAAUvC,EAAMuC,SAAWnB,EAAQzK,OAAQyK,GACxE,MAEJ,IAAK,MAAO,CACR,MAAMiB,EAAYrC,EAAMqC,UAAUzB,KAAIqB,GAAUA,EAAOlG,WACvDqG,EAASE,cAActC,EAAMwC,SAAUxC,EAAMyC,UAAU9L,OAAQ0L,GAC/D,MAEJ,IAAK,SACDD,EAASE,cAActC,EAAMwC,SAAUxC,EAAMyC,UAAU9L,QACvD,MACJ,QACI,MAAM,IAAIgH,MAAM,uBAAuBqC,EAAMlJ,YAa7D,sBAAsB4F,EAAQ+D,GAC1B9I,MAAM+I,sBAAsBhE,EAAQ+D,GACpC7I,KAAK8G,eAAc,KACX+B,EAAOiC,gBACP9K,KAAKmK,iBACLrF,EAAOsF,aAAa3F,SAAQ4F,GAAUrK,KAAK4J,SAASU,IAAID,MAExDxB,EAAOkC,uBACP/K,KAAKb,eAAiB0J,EAAOkC,qBAAqB9F,SAC5C4D,EAAOkC,qBAAqB9F,SAC5B,SAOlB,yBAAyBnG,EAAOiG,GAC5B,MAAMyF,EAAWxK,KAAK2H,YACtB3H,KAAK8G,eAAc,KACf0D,EAASf,gBAAkB1E,EAAKE,SAC1BF,EAAKE,SACL,QAEVjF,KAAK4G,eAAe5B,UAAK,GACzBhF,KAAK6G,aAAa7B,KAAK,CACnB0D,KAAM,iBACNsB,SAAUjF,EAAKiF,SACf/E,SAAUF,EAAKE,aAO3B,SAAWsE,GAIP,MAAMjH,EAIF,iBAAiBtB,GACb,OAAO,IAAI,IAAgBA,IAGnCuI,EAAcjH,eAAiBA,EAI/BiH,EAAcrI,sBAAwB,IAAIoB,EAhB9C,CAiBGiH,IAAkBA,EAAgB,KAErC,SAAWnD,GA2BPA,EAAQ2D,gBA1BR,SAAyB1C,EAAUtC,GAC/B,GAAiB,cAAbA,EAAKxB,IAAqB,CAC1B,MAAMiF,EAAWnB,EAASpD,IAAI,YAAc,IACtC,eAAE+G,GAAmBxC,EAASyC,EAvkBV,SAAUC,EAAG/K,GAC/C,IAAIgL,EAAI,GACR,IAAK,IAAIC,KAAKF,EAAO1H,OAAO6H,UAAUpB,eAAe9D,KAAK+E,EAAGE,IAAMjL,EAAEmL,QAAQF,GAAK,IAC9ED,EAAEC,GAAKF,EAAEE,IACb,GAAS,MAALF,GAAqD,mBAAjC1H,OAAO+H,sBACtB,KAAIC,EAAI,EAAb,IAAgBJ,EAAI5H,OAAO+H,sBAAsBL,GAAIM,EAAIJ,EAAErM,OAAQyM,IAC3DrL,EAAEmL,QAAQF,EAAEI,IAAM,GAAKhI,OAAO6H,UAAUI,qBAAqBtF,KAAK+E,EAAGE,EAAEI,MACvEL,EAAEC,EAAEI,IAAMN,EAAEE,EAAEI,KAE1B,OAAOL,EA8jBkDO,CAAOlD,EAAS,CAAC,mBAC9DwC,IAAmBjG,EAAKE,gBACFvB,IAAlBqB,EAAKE,WACLgG,EAA2B,eAAIlG,EAAKE,UAED,IAAnCzB,OAAOC,KAAKwH,GAAYlM,OACxBsI,EAAS7C,OAAO,WAGhB6C,EAAS1D,IAAI,UAAWsH,SAI/B,GAAiB,YAAblG,EAAKxB,IAAmB,CAC7B,MAAMiF,EAAWzD,EAAKE,UAAY,GAC9BuD,EAAQyB,eAAe,kBACvB5C,EAAS1D,IAAI,YAAa6E,EAAQwC,gBAGlC3D,EAAS7C,OAAO,eAvBhC,CA4BG4B,IAAYA,EAAU,K,eCzlBzB,MAYMuF,EAAgB,yBAgBf,MAAMC,UAAoB,EAAA9L,YAI7B,YAAY+L,GACR9L,QACAC,KAAKC,SAlCa,kBAmClBD,KAAK8L,UAAYD,EAKrB,YAAY1L,IAER0L,EADiB7L,KAAK8L,WACb3L,IAMV,MAAM4L,UAAyBH,EAIlC,YAAYC,GACR9L,MAAM8L,GACN7L,KAAKC,SAtCmB,uBA2C5B,SACI,MAAO,CACH,gBAAoB,MAAO,CAAEL,UAzDd,uCAyD6C2D,IAAK,UACjE,gBAAoB,MAAO,CAAE3D,UAAW+L,EAAezL,QAASC,GAAKH,KAAKI,YAAYD,GAAIoD,IAAK,WAC3F,gBAAoB,EAAAyI,aAAA,MAAoB,CAAEpM,UAAW,mBAAoBqM,gBAAiB,SAAUC,OAAQ,OAAQC,MAAO,YAOpI,MAAMC,UAA0BR,EAInC,YAAYC,GACR9L,MAAM8L,GACN7L,KAAKC,SAxDoB,wBA6D7B,SACI,MAAO,CACH,gBAAoB,MAAO,CAAEL,UA3Eb,wCA2E6C2D,IAAK,WAClE,gBAAoB,MAAO,CAAE3D,UAAW+L,EAAezL,QAASC,GAAKH,KAAKI,YAAYD,GAAIoD,IAAK,WAC3F,gBAAoB,EAAAyI,aAAA,MAAoB,CAAEpM,UAAW,mBAAoBqM,gBAAiB,SAAUC,OAAQ,OAAQC,MAAO,Y,0BC7E3I,MAwDME,EAAiB,kBACjBC,EAAmB,mBAYnBC,EAAqB,sCAOpB,MAAMC,UAAa,EAAA3L,OAItB,YAAYG,GACRjB,QACAC,KAAKyM,WAAY,EACjBzM,KAAK0M,cAAe,EACpB1M,KAAK2M,eAAgB,EACrB3M,KAAK4M,eAAgB,EACrB5M,KAAKC,SAtFM,WAuFX,MAAMhB,EAASe,KAAKqF,OAASrE,EAAQ/B,MAC/BgC,EAAkBjB,KAAKiB,eACzBD,EAAQC,gBAAkBuL,EAAKtL,sBACnClB,KAAK6B,OAAS,IAAI,EAAAC,YAElB,MAAM+K,EAAS5L,EAAe6L,mBAC9BD,EAAO5M,SAzFW,kBA0FlBD,KAAK6B,OAAOE,UAAU8K,GAEtB,MAAME,EAAgB/M,KAAKgN,cAAgB,IAAI,EAAAC,MAC/CF,EAAa9M,SArFY,wBAsFzB,MAAMiN,EAAiB,IAAI7M,EAC3B6M,EAAejN,SAvEY,0BAwE3B,MAAMkN,EAASnN,KAAKoN,OAAS,IAAIrM,EAAU,CACvC9B,QACAgC,iBACAQ,aAAcT,EAAQqM,qBAE1BF,EAAMlN,SArFgB,qBAsFtB8M,EAAahL,UAAUmL,GACvBH,EAAahL,UAAUoL,GACvBnN,KAAK6B,OAAOE,UAAUgL,GACtB/M,KAAKsN,kBAAoB,IAAIvB,GAAiB,KAC1C/L,KAAKQ,aAAeR,KAAKQ,eAG7B,MAAM+M,EAASvN,KAAKiB,eAAeuM,mBAInC,GAHAD,EAAOtN,SA1GW,kBA2GlBD,KAAK6B,OAAOE,UAAUwL,GAElBvM,EAAQyM,aAAc,CACtB,IAAInM,EAAgB,GACpBkC,OAAOC,KAAKzC,EAAQyM,cAAchJ,SAASlB,IACvC,IAAIjD,EAAI0F,EACR1E,EAAciC,GAA2F,QAAnFyC,EAAqC,QAA/B1F,EAAKU,EAAQyM,oBAAiC,IAAPnN,OAAgB,EAASA,EAAGiD,UAAyB,IAAPyC,EAAgBA,EAAK,QAE1IhG,KAAK0B,OAAOgM,WAAWpM,GAE3BrC,EAAMoI,SAASzD,QAAQC,QAAQ7D,KAAK2N,kBAAmB3N,MAS3D,kBAGI,OAFAA,KAAK4N,oBACL5N,KAAK6N,oBACE7N,KAKX,iBACI,OAAKA,KAAK0M,aAIC1M,KAAKsN,kBAAkBlQ,KACzB0Q,kBAJE9N,KAAKoN,OAAOnP,WAU3B,mBACI,OAAO+B,KAAKoN,OAAOrP,aAKvB,aACI,OAAOiC,KAAKoN,OAAO1L,OAKvB,YACI,OAAO1B,KAAKqF,OAKhB,gBACI,OAAOrF,KAAKoN,OAKhB,eACI,OAAOpN,KAAKyM,UAEhB,aAAanN,GACLA,IAAUU,KAAKyM,YAGnBzM,KAAKyM,UAAYnN,EACbU,KAAK+N,cACL/N,KAAKgO,oBAEThO,KAAKS,UAKT,oBACI,MAAM,SAAE4G,GAAarH,KAAKf,MACpBgP,EAAU5G,EAASpD,IAAI,YACxBjE,KAAKkO,WAAwB,IAAZD,IAChBjO,KAAKkO,eAAwBxK,IAAZuK,IAGnBjO,KAAKkO,SACLlO,KAAKf,MAAMoI,SAAS1D,IAAI,YAAY,GAGpC3D,KAAKf,MAAMoI,SAAS7C,OAAO,aAMnC,oBACIxE,KAAKkO,UAAmD,IAAxClO,KAAKf,MAAMoI,SAASpD,IAAI,YAK5C,YACI,OAAOkK,QAAQC,aAAQ1K,GAK3B,UAAUpE,GACNU,KAAKoN,OAAOiB,UAAU/O,GAK1B,kBACI,OAAOU,KAAK0M,aAEhB,gBAAgBpN,GACZ,GAAIU,KAAK0M,eAAiBpN,EACtB,OAEJ,MAAMuC,EAAS7B,KAAKgN,cAAcnL,OAC9BvC,GACAU,KAAKoN,OAAO7M,OAAS,KACrBsB,EAAOE,UAAU/B,KAAKsN,qBAGtBtN,KAAKsN,kBAAkB/M,OAAS,KAChCsB,EAAOE,UAAU/B,KAAKoN,SAE1BpN,KAAK0M,aAAepN,EAChBU,KAAKsO,cACLtO,KAAKuO,oBAETvO,KAAKwO,kBAAkBlP,GAK3B,oBACI,MAAMkJ,EAAUhF,OAAOiL,OAAO,GAAIzO,KAAKf,MAAMoI,SAASpD,IAAI,YACrDjE,KAAKQ,cAAyC,IAA1BgI,EAAQkG,gBAC3B1O,KAAKQ,kBAAyCkD,IAA1B8E,EAAQkG,gBAG9B1O,KAAKQ,YACLgI,EAAQkG,eAAgB,SAGjBlG,EAAQkG,cAEiB,IAAhClL,OAAOC,KAAK+E,GAASzJ,OACrBiB,KAAKf,MAAMoI,SAAS7C,OAAO,WAG3BxE,KAAKf,MAAMoI,SAAS1D,IAAI,UAAW6E,IAM3C,oBACI,MAAMA,EAAUxI,KAAKf,MAAMoI,SAASpD,IAAI,YAAc,GACtDjE,KAAKQ,cAAgBgI,EAAQkG,cAUjC,kBAAkBpP,IAMlB,mBACI,OAAOU,KAAK2M,cAEhB,iBAAiBrN,GACTU,KAAK2M,gBAAkBrN,IAG3BU,KAAK2M,cAAgBrN,EACjBA,GACAU,KAAK4N,qBAMb,mBACI,OAAO5N,KAAK4M,cAEhB,iBAAiBtN,GACTU,KAAK4M,gBAAkBtN,IAG3BU,KAAK4M,cAAgBtN,EACjBA,GACAU,KAAK6N,qBAMb,QAEI,OAAO,IAAIc,EADS3O,KAAK2O,aACF,CACnB1P,MAAOe,KAAKf,MACZgC,eAAgBjB,KAAKiB,iBAM7B,UAEQjB,KAAKoC,aAGTpC,KAAKoN,OAAS,KACdpN,KAAKqF,OAAS,KACdrF,KAAKgN,cAAgB,KACrBhN,KAAKsN,kBAAoB,KACzBvN,MAAMsC,WAKV,cAAcuM,GACV5O,KAAKS,SAKT,kBAAkBmO,GACd5O,KAAK0B,OAAOmN,QAKhB,aAAaD,GAET5O,KAAK0B,OAAOoN,UAKhB,gBAAgBF,GACP5O,KAAKqF,QAINrF,KAAK0B,OAAOqN,UAAU,cAAgB/O,KAAKyM,YAC3CzM,KAAK0B,OAAOsN,UAAU,WAAYhP,KAAKyM,WACvCzM,KAAKiP,YAlVM,kBAkVsBjP,KAAKyM,YAM9C,kBAAkBxN,EAAO8F,GACrB,OAAQA,EAAKxB,KACT,IAAK,UACGvD,KAAKsO,cACLtO,KAAK4N,oBAET,MACJ,IAAK,WACG5N,KAAK+N,cACL/N,KAAK6N,uBAWzB,SAAWrB,GAMP,MAAMlK,EAIF,YAAYtB,EAAU,IAClBhB,KAAKkP,eACDlO,EAAQQ,eAAiBT,EAAUwB,qBAK3C,oBACI,OAAOvC,KAAKkP,eAKhB,mBACI,OAAO,IAAItO,EAKf,mBACI,OAAO,IAAIE,EAKf,oBACI,OAAO,IAAI0B,EAKf,qBACI,OAAO,IAAI,KAKf,YAAYxB,GACR,OAAO,IAAI,KAAMA,IAGzBwL,EAAKlK,eAAiBA,EAItBkK,EAAKtL,sBAAwB,IAAIoB,EAvDrC,CAwDGkK,IAASA,EAAO,KAOZ,MAAM2C,UAAiB3C,EAI1B,YAAYxL,GACRjB,MAAMiB,GACNhB,KAAKoP,eAAgB,EACrBpP,KAAKqP,eAAgB,EACrBrP,KAAKsP,iBAAkB,EACvBtP,KAAKC,SAhbW,eAkbhB,MAAMsP,EAAcvP,KAAKwP,YAAcxO,EAAQuO,WACzCtO,EAAiBjB,KAAKiB,eACtBhC,EAAQe,KAAKf,MAEbwQ,EAAiBzP,KAAK0P,eAAiB,IAAI,EAAAzC,MACjDwC,EAAcxP,SA/cY,yBAgd1B,MAAM0P,EAAkB,IAAIjP,EAC5BiP,EAAgB1P,SAjcY,2BAkc5B,MAAMoK,EAAUrK,KAAK4P,QAAU,IAAI,KAAW,CAC1C3Q,MAAOA,EAAMuK,QACb+F,aACAtO,eAAgBA,EAChB4O,iBAAkB7O,EAAQ6O,mBAE9BxF,EAAOpK,SAhdgB,sBAodM,IAAzBhB,EAAMuK,QAAQzK,QACdiB,KAAKC,SAASqM,GAElBjC,EAAOyF,oBAAoBjM,QAAQ7D,KAAK+P,qBAAsB/P,MAC9DyP,EAAc1N,UAAU4N,GACxBF,EAAc1N,UAAUsI,GACxBrK,KAAK6B,OAAOmO,aAAa,EAAGP,GAC5BzP,KAAKiQ,mBAAqB,IAAI7D,GAAkB,KAC5CpM,KAAKW,cAAgBX,KAAKW,gBAE9B1B,EAAM4H,aAAahD,QAAQ7D,KAAKkQ,eAAgBlQ,MASpD,kBAII,OAHAD,MAAMoQ,kBACNnQ,KAAKoQ,oBACLpQ,KAAKqO,UAAU,GAAGrO,KAAKf,MAAME,gBAAkB,MACxCa,KAKX,iBACI,OAAOA,KAAK4P,QAKhB,mBACI,OAAO5P,KAAKoP,cAEhB,iBAAiB9P,GACb,GAAIU,KAAKoP,gBAAkB9P,EACvB,OAEJ,MAAMuC,EAAS7B,KAAK0P,eAAe7N,OAC/BvC,GACAuC,EAAOwO,aAAarQ,KAAK4P,SACzB/N,EAAOE,UAAU/B,KAAKiQ,oBAClBjQ,KAAKQ,cAAgBR,KAAK0P,eAAeY,UACzCtQ,KAAK0P,eAAexN,SAIpBlC,KAAK0P,eAAeY,UACpBtQ,KAAK0P,eAAevN,OAExBN,EAAOwO,aAAarQ,KAAKiQ,oBACzBpO,EAAOE,UAAU/B,KAAK4P,UAE1B5P,KAAKoP,cAAgB9P,EACjBU,KAAKsO,cACLtO,KAAKuO,oBAMb,oBAMIvO,KAAKsP,iBAAkB,EACvB,IACIvP,MAAMwO,oBACN,MAAMlH,EAAWrH,KAAKf,MAAMoI,SACtBoB,EAAYzI,KAAKf,MAAMoI,SAASpD,IAAI,aAC1C,GAAKjE,KAAKW,eAA8B,IAAd8H,IACpBzI,KAAKW,mBAA8B+C,IAAd+E,EACvB,OAIAzI,KAAKW,aACL0G,EAAS1D,IAAI,aAAa,GAG1B0D,EAAS7C,OAAO,aAGxB,QACIxE,KAAKsP,iBAAkB,GAS/B,oBACIvP,MAAM6N,oBACN5N,KAAKW,eAAiBX,KAAKf,MAAMoI,SAASpD,IAAI,aAKlD,sBACI,OAAOjE,KAAKuQ,iBAEhB,oBAAoBjR,GAChBU,KAAKiP,YAAY,yBAA0B3P,GAC3CU,KAAKuQ,iBAAmBjR,EACpBU,KAAKwQ,cACLxQ,KAAKyQ,oBAMb,oBACI,MAAM,SAAEpJ,GAAarH,KAAKf,MACpBgP,EAAU5G,EAASpD,IAAI,YACxBjE,KAAK0Q,kBAA+B,IAAZzC,IACvBjO,KAAK0Q,sBAA+BhN,IAAZuK,IAG1BjO,KAAK0Q,gBACLrJ,EAAS1D,IAAI,YAAY,GAGzB0D,EAAS7C,OAAO,aAMxB,oBACI,MAAM6C,EAAWrH,KAAKf,MAAMoI,SAEK,SAA7BA,EAASpD,IAAI,YACbjE,KAAK0Q,iBAAkB,EAGvB1Q,KAAK0Q,kBAAoBrJ,EAASpD,IAAI,YAM9C,mBACI,OAAOjE,KAAKqP,cAEhB,iBAAiB/P,GACTU,KAAKqP,gBAAkB/P,IAG3BU,KAAKqP,cAAgB/P,EACjBA,GACAU,KAAKoQ,qBAWb,kBAAkB9Q,IACTA,GAASU,KAAK0P,eAAeY,SAC9BtQ,KAAK0P,eAAevN,OAEf7C,IAAUU,KAAK0P,eAAeY,UAAYtQ,KAAKoP,eACpDpP,KAAK0P,eAAexN,OAM5B,QAEI,OAAO,IAAIyM,EADS3O,KAAK2O,aACF,CACnB1P,MAAOe,KAAKf,MACZgC,eAAgBjB,KAAKiB,eACrBsO,WAAYvP,KAAKwP,cAMzB,kBACI,OAAO,IAAI,KAAqB,CAC5BvQ,MAAOe,KAAKf,MAAMuK,QAClBvI,eAAgBjB,KAAKiB,eACrBsO,WAAYvP,KAAKwP,cAMzB,UACQxP,KAAKoC,aAGTpC,KAAK4P,QAAQE,oBAAoBa,WAAW3Q,KAAK+P,qBAAsB/P,MACvEA,KAAKwP,YAAc,KACnBxP,KAAK4P,QAAU,KACf5P,KAAK0P,eAAiB,KACtB1P,KAAKiQ,mBAAqB,KAC1BlQ,MAAMsC,WAKV,eAAepD,EAAO8F,GAClB,OAAQA,EAAK2D,MACT,IAAK,iBACD1I,KAAKqO,UAAU,GAAGpP,EAAME,gBAAkB,OAStD,kBAAkBF,EAAO8F,GACrB,IAAI/E,KAAKsP,gBAAT,CAIA,OAAQvK,EAAKxB,KACT,IAAK,WACGvD,KAAKwQ,cACLxQ,KAAKoQ,oBAET,MACJ,IAAK,YACGpQ,KAAKsO,cACLtO,KAAK4N,oBAMjB7N,MAAM4N,kBAAkB1O,EAAO8F,IAKnC,qBAAqBD,EAAQC,GACzB,MAAM6L,EAAiB,IAAT7L,EACd/E,KAAKiP,YAAY3C,EAAkBsE,KAM3C,SAAWzB,GA6EPA,EAAS0B,QAzETC,eAAuBpT,EAAMqT,EAAgB1J,GACzC,IAAI/G,EACJ,MAAMrB,EAAQvB,EAAKuB,MACb+R,EAAO/R,EAAMK,MAAMC,KACzB,IAAKyR,EAAKC,UAA8C,QAAjC3Q,EAAKyQ,EAAeG,eAA4B,IAAP5Q,OAAgB,EAASA,EAAG6Q,QAExF,YADAlS,EAAMkL,iBAGV,MAAMiH,EAAS,CAAEA,OAAQnS,EAAMyH,IAC/BW,EAAW7D,OAAOiL,OAAOjL,OAAOiL,OAAOjL,OAAOiL,OAAO,GAAIxP,EAAMoI,SAASlD,UAAWkD,GAAW+J,GAC9F,MAAM,aAAEC,GAAiBhK,EAKzB,IAAIiK,EAJJrS,EAAMkL,iBACNzM,EAAKiD,cAAe,EACpBjD,EAAK2Q,UAAU,KACfpP,EAAMkI,SAAU,EAEhB,IACI,MAAMoK,EAAa,aAAmBP,EAAMtT,EAAK8T,WAAYT,EAAgB1J,GAE7E,GAAIgK,EAAc,CACd,MAAMI,EAAoB7C,IACtB,IAAI8C,EACJ,OAAQ9C,EAAI/B,OAAO8E,UACf,IAAK,SACDD,EAAQ,UAAU9C,EAAIgD,QAAQC,kBAC9B,MACJ,IAAK,gBACDH,EAAQ,gBACR,MACJ,QACI,OAAO,EAIf,MAAMpS,EAAQsP,EAAI/B,OAAOiF,OAAQ,IAAIC,MAAOC,cACtCC,EAAazO,OAAOiL,OAAO,GAAIxP,EAAMoI,SAASpD,IAAI,cAGxD,OAFAgO,EAAW,SAASP,KAAWpS,EAC/BL,EAAMoI,SAAS1D,IAAI,YAAasO,IACzB,GAEXvU,EAAK8T,WAAWF,OAAOY,oBAAoBT,QAG3CxS,EAAMoI,SAAS7C,OAAO,aAG1B8M,EAAS5T,EAAK8T,WAAWF,OACzB,MAAM1C,QAAa2C,EAEnB,GADAtS,EAAME,eAAiByP,EAAIgD,QAAQnI,gBAC/B4H,EAAc,CACd,MAAMY,EAAazO,OAAOiL,OAAO,GAAIxP,EAAMoI,SAASpD,IAAI,cAClDkO,EAAUvD,EAAIvH,SAAS8K,QAEzBA,IACAF,EAAW,+BAAiCE,GAGhD,MAAMC,EAAWxD,EAAI/B,OAAOiF,KAC5BG,EAAW,uBACPG,IAAY,IAAIL,MAAOC,cAC3B/S,EAAMoI,SAAS1D,IAAI,YAAasO,GAEpC,OAAOrD,EAEX,MAAOzO,GAMH,MAHImR,IAAW5T,EAAK0E,YAAc1E,EAAK8T,WAAWF,SAAWA,GACzD5T,EAAK2Q,UAAU,IAEblO,IA1ElB,CA8EGgP,IAAaA,EAAW,KAKpB,MAAMkD,UAAwB7F,EAWjC,YAAYpE,GACR,OAAQA,EAAMlJ,MACV,IAAK,QACDc,KAAKsS,UAAUlK,GACf,MACJ,IAAK,YAGL,IAAK,WACDA,EAAMmK,iBACN,MACJ,IAAK,OACDvS,KAAKwS,eAAepK,GACpB,MACJ,IAAK,cACDpI,KAAKyS,aAAarK,GAClB,MACJ,IAAK,UACDpI,KAAK0S,SAAStK,IAS1B,cAAcwG,GACV7O,MAAM4S,cAAc/D,GACpB,MAAMxR,EAAO4C,KAAK5C,KAClBA,EAAKwV,iBAAiB,cAAe5S,MACrC5C,EAAKwV,iBAAiB,UAAW5S,MACjC5C,EAAKwV,iBAAiB,YAAa5S,MACnC5C,EAAKwV,iBAAiB,WAAY5S,MAClC5C,EAAKwV,iBAAiB,OAAQ5S,MAC9B5C,EAAKwV,iBAAiB,QAAS5S,MAMnC,eAAe4O,GACX,MAAMxR,EAAO4C,KAAK5C,KAClBA,EAAKyV,oBAAoB,OAAQ7S,MACjC5C,EAAKyV,oBAAoB,WAAY7S,MACrC5C,EAAKyV,oBAAoB,YAAa7S,MACtC5C,EAAKyV,oBAAoB,QAAS7S,MAClC5C,EAAKyV,oBAAoB,cAAe7S,MACxC5C,EAAKyV,oBAAoB,UAAW7S,MAExC,aAAaoI,IACiB,IAAA0K,MAAK,EAAAhN,qBAAA,WAAgCD,KACtDuC,EAAM2K,SAASC,QAAQzG,IAGfnE,EAAM2K,SAASE,QAAQ1G,GACxBtN,MAAMiU,WAAarN,MAKnCuC,EAAMmK,iBACNnK,EAAM+K,kBACN/K,EAAMgL,WAAahL,EAAMiL,gBAK7B,UAAUjL,GACN,GAAIA,EAAMkL,cAAe,CACrB,MAAMC,EAAQnL,EAAMkL,cAAcC,MAClC,IAAK,IAAI/H,EAAI,EAAGA,EAAI+H,EAAMxU,OAAQyM,IAAK,CACnC,GAAsB,eAAlB+H,EAAM/H,GAAGtM,KAAuB,CAEhC,GAAIsM,EAAI+H,EAAMxU,OAAS,GAA2B,SAAtBwU,EAAM/H,EAAI,GAAGgI,KACrC,SAEJD,EAAM/H,GAAGiI,aAAYlU,IACjB,IAAIe,EAAI0F,EACuC,QAA9CA,GAAM1F,EAAKN,KAAK0B,QAAQgS,wBAAqC,IAAP1N,GAAyBA,EAAGG,KAAK7F,EAAIf,MAGpGS,KAAK2T,aAAavL,EAAMkL,cAAcC,QAG9CnL,EAAMmK,iBAKV,eAAenK,GACPA,EAAMwL,cACN5T,KAAK2T,aAAavL,EAAMwL,aAAaL,OAEzCnL,EAAMmK,iBAKV,SAASnK,GACL,MAAMyL,GAAqB,IAAAC,UAAQ,IAAAC,QAAO3L,EAAM2K,SAASiB,SAASnO,IAC9D,GAAIA,IAAa0G,EAAoB,CACjC,MAAM3G,EAAOwC,EAAM2K,SAASE,QAAQ1G,GACpC,OAAyE,IAAjE,EAAAzG,qBAAA,kBAAuCF,EAAK3G,MAAMiU,UAE9D,OAA6D,IAAtD,EAAApN,qBAAA,kBAAuCD,OAElD,GAAkC,IAA9BgO,EAAmB9U,OAKvB,GAFAqJ,EAAMmK,iBACNnK,EAAM+K,kBACuB,SAAzB/K,EAAMiL,eAAV,CAIAjL,EAAMgL,WAAa,OACnB,IAAK,MAAMvN,KAAYgO,EACnB,GAAIhO,IAAa0G,EAAoB,CACjC,MAAM,MAAEtN,EAAK,YAAEgV,GAAgB7L,EAAM2K,SAASE,QAAQ1G,GACtD,GAAmB,SAAftN,EAAMC,KAAiB,CACvB,MAAMgV,EAAMlU,KAAKmU,aAAalV,EAAMyJ,MACpC1I,KAAKoU,+BAA+BnV,EAAMyJ,KAAMwL,GAC3CD,IAAcI,MAAKC,IACpBtU,KAAKf,MAAMiK,YAAYvF,IAAIuQ,EAAK,CAC5B,CAACI,EAAUpB,UAAWoB,EAAU1C,kBAK3C,CAED,MAAMsC,EAAMlU,KAAKmU,eACjBnU,KAAKf,MAAMiK,YAAYvF,IAAIuQ,EAAK,CAC5B,CAACrO,GAAWuC,EAAM2K,SAASE,QAAQpN,KAEvC7F,KAAKoU,+BAA+BF,EAAKA,SAvB7C9L,EAAMgL,WAAa,OA+B3B,aAAaG,GACT,IAAK,IAAI/H,EAAI,EAAGA,EAAI+H,EAAMxU,OAAQyM,IAAK,CACnC,MAAMlH,EAAOiP,EAAM/H,GACnB,GAAkB,SAAdlH,EAAKkP,KAAiB,CACtB,MAAMe,EAAOjQ,EAAKkQ,YACdD,GACAvU,KAAKyU,YAAYF,KASjC,YAAYA,GACR,MAAMG,EAAS,IAAIC,WACnBD,EAAOE,OAASC,IACZ,MAAM,KAAEC,EAAI,SAAEC,GAAa,EAAAC,OAAA,MAAaN,EAAOO,QAC/C,GAAiB,UAAbF,EACA,OAEJ,MACMG,EADe,oDACQC,KAAKL,GAClC,IAAKI,GAA8B,IAAnBA,EAAQnW,OACpB,OAEJ,MAAM8G,EAAWqP,EAAQ,GAEnBE,EAAS,CAAE,CAACvP,GADEqP,EAAQ,IAEtBhB,EAAMlU,KAAKmU,aAAaI,EAAK7L,MAC/B7C,EAASN,WAAW,YACpBvF,KAAKf,MAAMiK,YAAYvF,IAAIuQ,EAAKkB,GAChCpV,KAAKoU,+BAA+BG,EAAK7L,KAAMwL,KAGvDQ,EAAOW,QAAUR,IACbS,QAAQC,MAAM,oBAAoBhB,EAAK7L,OAASmM,IAEpDH,EAAOc,cAAcjB,GAMzB,aAAa7L,EAAO,IAChB,MAAM+M,EAAY/M,EAAKgN,YAAY,KACnC,OAAsB,IAAfD,EACD,EAAA9O,KAAA,QAAagP,OAAOjN,EAAKkN,UAAUH,IACnC,EAAA9O,KAAA,SAeP,MAAMkP,UAAqBxD,EAI9B,YAAYrR,GACR,IAAIV,EACJP,MAAMiB,GACNhB,KAAK8V,UAAY,KACjB9V,KAAKiC,WAAY,EACjBjC,KAAK+V,UAAY,GACjB/V,KAAKgW,OAAS,IAAI,EAAAC,gBAClBjW,KAAKC,SA3/Be,mBA6/BpBD,KAAKwP,YAAcxO,EAAQuO,WAAW2G,MAAM,CACxCC,SAAU,IAAIhR,EAAoB,CAC9B5E,OAA+C,QAAtCD,EAAKU,EAAQuO,WAAW4G,gBAA6B,IAAP7V,EAAgBA,OAAKoD,EAC5EzE,MAAOe,KAAKf,MAAMiK,gBAI1BlJ,KAAK0B,OAAOsN,UAAU,eAAe,GAErChP,KAAKoW,SAAW,IAAI,EAAAC,gBAAgB,CAChCC,OAAQtW,KAAKf,MAAM2H,eACnB2P,QAn/BW,MAq/BfvW,KAAKoW,SAASI,gBAAgB3S,SAAQ,KAC9B7D,KAAKiC,WACLjC,KAAKS,WAEVT,MACEA,KAAKyW,uBAAuBpC,MAAK,KAClCrU,KAAKgW,OAAO5H,aAAQ,MAExBpO,KAAK0W,YAAY1W,KAAK8V,WAK1B,YACI,OAAO9V,KAAKgW,OAAOW,QAKvB,eACI,OAAO3W,KAAKiC,UAEhB,aAAa3C,GACLA,IAAUU,KAAKiC,YAGnBjC,KAAKiC,UAAY3C,EACjBU,KAAK4W,kBAIA5W,KAAKiC,WACNjC,KAAK0B,OAAOoN,WAMpB,YAAY9M,GACRhC,KAAKC,SAASoM,GACdrM,KAAK6W,UAAUH,YAAY1U,GAK/B,aACIhC,KAAK8W,YAAYzK,GACjBrM,KAAK6W,UAAUE,aAKnB,gBAAgBnI,GAEZ5O,KAAK4W,kBACL7W,MAAMiX,gBAAgBpI,GAK1B,+BAA+BqI,EAAgB/C,GAC3C,IAAI5T,EAAI0F,EACR,MAAMkR,EAAmB,KAAKD,iBAA8B/C,QAAiCA,EAAM+C,KACpD,QAA9CjR,GAAM1F,EAAKN,KAAK0B,QAAQgS,wBAAqC,IAAP1N,GAAyBA,EAAGG,KAAK7F,EAAI4W,GAKhG,kBACSlX,KAAKiC,WAMDjC,KAAKyW,uBACVzW,KAAK0W,YAAY1W,KAAK8V,YANtB9V,KAAK+W,aAYb,uBACI,MAAM9X,EAAQe,KAAKf,MACbM,EAAQN,GAASA,EAAMK,MAAMC,MA7kCb,mCA+kCtB,GAAIA,IAASS,KAAK+V,UAAW,CACzB,MAAMoB,EAAY,IAAI,EAAAC,UAAU,CAAExR,KAAM,CAAE,gBAAiBrG,KAM3D,OALKS,KAAK8V,YACN9V,KAAK8V,UAAY9V,KAAKwP,YAAY6H,eAAe,iBACjDrX,KAAK8V,UAAU7V,SAhmCD,sBAkmClBD,KAAK+V,UAAYxW,EACVS,KAAK8V,UAAUwB,YAAYH,GAEtC,OAAOhJ,QAAQC,aAAQ,GAK3B,QAEI,OAAO,IAAIO,EADS3O,KAAK2O,aACF,CACnB1P,MAAOe,KAAKf,MACZgC,eAAgBjB,KAAKiB,eACrBsO,WAAYvP,KAAKwP,eAUtB,MAAM+H,UAAgB/K,EAIzB,YAAYxL,GACRjB,MAAMiB,GACNhB,KAAKC,SA3nCU,cAgoCnB,QAEI,OAAO,IAAI0O,EADS3O,KAAK2O,aACF,CACnB1P,MAAOe,KAAKf,MACZgC,eAAgBjB,KAAKiB,oB,kDC9hC7BmF,E,WAtKG,MAAMoR,EAIT,YAAYxW,EAAU,IAKlB,GAJAhB,KAAK8C,KAAO,IAAI2U,IAChBzX,KAAKkD,SAAW,IAAI,EAAAD,OAAOjD,MAC3BA,KAAK+C,aAAc,EACnB/C,KAAK0X,SAAW1W,EAAQ2W,SAAWvR,EAAQuR,QACvC3W,EAAQsC,OACR,IAAK,MAAMC,KAAOvC,EAAQsC,OACtBtD,KAAK8C,KAAKa,IAAIJ,EAAKvC,EAAQsC,OAAOC,IAO9C,WACI,MAAO,MAKX,cACI,OAAOvD,KAAKkD,SAKhB,iBACI,OAAOlD,KAAK+C,YAKhB,WACI,OAAO/C,KAAK8C,KAAK8U,KAiBrB,IAAIrU,EAAKjE,GACL,MAAMuY,EAAS7X,KAAK8C,KAAKmB,IAAIV,GAC7B,QAAcG,IAAVpE,EACA,MAAMyG,MAAM,6CAGhB,MAAM4R,EAAU3X,KAAK0X,SACrB,YAAehU,IAAXmU,GAAwBF,EAAQE,EAAQvY,KAG5CU,KAAK8C,KAAKa,IAAIJ,EAAKjE,GACnBU,KAAKkD,SAAS8B,KAAK,CACf9F,KAAM2Y,EAAS,SAAW,MAC1BtU,IAAKA,EACLyG,SAAU6N,EACV5S,SAAU3F,KAPHuY,EAkBf,IAAItU,GACA,OAAOvD,KAAK8C,KAAKmB,IAAIV,GASzB,IAAIA,GACA,OAAOvD,KAAK8C,KAAKuB,IAAId,GAOzB,OACI,MAAMuU,EAAU,GAIhB,OAHA9X,KAAK8C,KAAK2B,SAAQ,CAACsT,EAAGC,KAClBF,EAAQG,KAAKD,MAEVF,EAOX,SACI,MAAMI,EAAU,GAIhB,OAHAlY,KAAK8C,KAAK2B,SAAQ,CAACsT,EAAGC,KAClBE,EAAQD,KAAKF,MAEVG,EAaX,OAAO3U,GACH,MAAMsU,EAAS7X,KAAK8C,KAAKmB,IAAIV,GAU7B,OATgBvD,KAAK8C,KAAK0B,OAAOjB,IAE7BvD,KAAKkD,SAAS8B,KAAK,CACf9F,KAAM,SACNqE,IAAKA,EACLyG,SAAU6N,EACV5S,cAAUvB,IAGXmU,EAKX,QAEI,MAAMC,EAAU9X,KAAKyD,OACrB,IAAK,IAAI+H,EAAI,EAAGA,EAAIsM,EAAQ/Y,OAAQyM,IAChCxL,KAAKwE,OAAOsT,EAAQtM,IAM5B,UACQxL,KAAKoC,aAGTpC,KAAK+C,aAAc,EACnB,EAAAE,OAAA,UAAiBjD,MACjBA,KAAK8C,KAAK4B,WAOlB,SAAW0B,GAOPA,EAAQuR,QAHR,SAAiBQ,EAAOC,GACpB,OAAOD,IAAUC,GALzB,CAQGhS,IAAYA,EAAU","file":"2609.bundle.js","sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * This module contains some utility functions to operate on cells. This\n * could be shared by widgets that contain cells, like the CodeConsole or\n * Notebook widgets.\n */\nimport { each } from '@lumino/algorithm';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                each(cells, (cell, index) => {\n                    if (cell.node === node) {\n                        cellIndex = index;\n                        return false;\n                    }\n                });\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        let targetArea;\n        if (cell) {\n            if (cell.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (cell.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.value.text.split('\\n')[0].slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const model = (this.model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || InputArea.defaultContentFactory);\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editorOptions = {\n            model,\n            factory: contentFactory.editorFactory,\n            updateOnShow: options.updateOnShow\n        };\n        const editor = (this._editor = new CodeEditorWrapper(editorOptions));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        layout.addWidget(editor);\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options = {}) {\n            this._editor = options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n    /**\n     * A function to create the default CodeMirror editor factory.\n     */\n    function _createDefaultEditorFactory() {\n        const editorServices = new CodeMirrorEditorFactory();\n        return editorServices.newInlineEditor;\n    }\n    /**\n     * The default editor factory singleton based on CodeMirror.\n     */\n    InputArea.defaultEditorFactory = _createDefaultEditorFactory();\n    /**\n     * The default `ContentFactory` instance.\n     */\n    InputArea.defaultContentFactory = new ContentFactory({});\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { AttachmentModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        this._map = new ObservableMap();\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._modelDB = null;\n        this._serialized = null;\n        this._changeGuard = false;\n        this.contentFactory =\n            options.contentFactory || AttachmentsModel.defaultContentFactory;\n        if (options.values) {\n            for (const key of Object.keys(options.values)) {\n                if (options.values[key] !== undefined) {\n                    this.set(key, options.values[key]);\n                }\n            }\n        }\n        this._map.changed.connect(this._onMapChanged, this);\n        // If we are given a IModelDB, keep an up-to-date\n        // serialized copy of the AttachmentsModel in it.\n        if (options.modelDB) {\n            this._modelDB = options.modelDB;\n            this._serialized = this._modelDB.createValue('attachments');\n            if (this._serialized.get()) {\n                this.fromJSON(this._serialized.get());\n            }\n            else {\n                this._serialized.set(this.toJSON());\n            }\n            this._serialized.changed.connect(this._onSerializedChanged, this);\n        }\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The keys of the attachments in the model.\n     */\n    get keys() {\n        return this._map.keys();\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this._map.keys().length;\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._map.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the specified key is set.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get an item at the specified key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Set the value at the specified key.\n     */\n    set(key, value) {\n        // Normalize stream data.\n        const item = this._createItem({ value });\n        this._map.set(key, item);\n    }\n    /**\n     * Remove the attachment whose name is the specified key\n     */\n    remove(key) {\n        this._map.delete(key);\n    }\n    /**\n     * Clear all of the attachments.\n     */\n    clear() {\n        this._map.values().forEach((item) => {\n            item.dispose();\n        });\n        this._map.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        Object.keys(values).forEach(key => {\n            if (values[key] !== undefined) {\n                this.set(key, values[key]);\n            }\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const ret = {};\n        for (const key of this._map.keys()) {\n            ret[key] = this._map.get(key).toJSON();\n        }\n        return ret;\n    }\n    /**\n     * Create an attachment item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createAttachmentModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onMapChanged(sender, args) {\n        if (this._serialized && !this._changeGuard) {\n            this._changeGuard = true;\n            this._serialized.set(this.toJSON());\n            this._changeGuard = false;\n        }\n        this._changed.emit(args);\n        this._stateChanged.emit(void 0);\n    }\n    /**\n     * If the serialized version of the outputs have changed due to a remote\n     * action, then update the model accordingly.\n     */\n    _onSerializedChanged(sender, args) {\n        if (!this._changeGuard) {\n            this._changeGuard = true;\n            this.fromJSON(args.newValue);\n            this._changeGuard = false;\n        }\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for AttachmentsModel class statics.\n */\n(function (AttachmentsModel) {\n    /**\n     * The default implementation of a `IAttachemntsModel.IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachment model.\n         */\n        createAttachmentModel(options) {\n            return new AttachmentModel(options);\n        }\n    }\n    AttachmentsModel.ContentFactory = ContentFactory;\n    /**\n     * The default attachment model factory.\n     */\n    AttachmentsModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsModel || (AttachmentsModel = {}));\n/**\n * A resolver for cell attachments 'attchment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver {\n    /**\n     * Create an attachments resolver object.\n     */\n    constructor(options) {\n        this._parent = options.parent || null;\n        this._model = options.model;\n    }\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    async resolveUrl(url) {\n        if (this._parent && !url.startsWith('attachment:')) {\n            return this._parent.resolveUrl(url);\n        }\n        return url;\n    }\n    /**\n     * Get the download url of a given absolute server path.\n     *\n     * #### Notes\n     * The returned URL may include a query parameter.\n     */\n    async getDownloadUrl(path) {\n        if (this._parent && !path.startsWith('attachment:')) {\n            return this._parent.getDownloadUrl(path);\n        }\n        // Return a data URL with the data of the url\n        const key = path.slice('attachment:'.length);\n        const attachment = this._model.get(key);\n        if (attachment === undefined) {\n            // Resolve with unprocessed path, to show as broken image\n            return path;\n        }\n        const { data } = attachment;\n        const mimeType = Object.keys(data)[0];\n        // Only support known safe types:\n        if (mimeType === undefined ||\n            imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n            throw new Error(`Cannot render unknown image mime type \"${mimeType}\".`);\n        }\n        const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n        return dataUrl;\n    }\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     */\n    isLocal(url) {\n        var _a, _b, _c;\n        if (this._parent && !url.startsWith('attachment:')) {\n            return (_c = (_b = (_a = this._parent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a, url)) !== null && _c !== void 0 ? _c : true;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport * as models from '@jupyterlab/shared-models';\nimport { UUID } from '@lumino/coreutils';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    /**\n     * Construct a cell model from optional cell content.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            modelDB: options.modelDB,\n            id: options.id || ((_a = options.cell) === null || _a === void 0 ? void 0 : _a.id) || UUID.uuid4()\n        });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        /**\n         * A mutex to update the shared model.\n         */\n        this._modelDBMutex = models.createMutex();\n        this.value.changed.connect(this.onGenericChange, this);\n        const cellType = this.modelDB.createValue('type');\n        cellType.set(this.type);\n        const observableMetadata = this.modelDB.createMap('metadata');\n        observableMetadata.changed.connect(this.onModelDBMetadataChange, this);\n        observableMetadata.changed.connect(this.onGenericChange, this);\n        const cell = options.cell;\n        const trusted = this.modelDB.createValue('trusted');\n        trusted.changed.connect(this.onTrustedChanged, this);\n        if (!cell) {\n            trusted.set(false);\n            return;\n        }\n        trusted.set(!!cell.metadata['trusted']);\n        delete cell.metadata['trusted'];\n        if (Array.isArray(cell.source)) {\n            this.value.text = cell.source.join('');\n        }\n        else {\n            this.value.text = cell.source;\n        }\n        const metadata = JSONExt.deepCopy(cell.metadata);\n        if (this.type !== 'raw') {\n            delete metadata['format'];\n        }\n        if (this.type !== 'code') {\n            delete metadata['collapsed'];\n            delete metadata['scrolled'];\n        }\n        for (const key in metadata) {\n            observableMetadata.set(key, metadata[key]);\n        }\n    }\n    /**\n     * The type of cell.\n     */\n    get type() {\n        // This getter really should be abstract, but our current constructor\n        // depends on .type working\n        return 'raw';\n    }\n    /**\n     * The id for the cell.\n     */\n    get id() {\n        return this.sharedModel.getId();\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the trusted state of the model.\n     */\n    get trusted() {\n        return this.modelDB.getValue('trusted');\n    }\n    /**\n     * Set the trusted state of the model.\n     */\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue === newValue) {\n            return;\n        }\n        this.modelDB.setValue('trusted', newValue);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            const value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n            metadata[key] = value;\n        }\n        if (this.trusted) {\n            metadata['trusted'] = true;\n        }\n        return {\n            cell_type: this.type,\n            source: this.value.text,\n            metadata\n        };\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * Handle a change to the cell metadata modelDB and reflect it in the shared model.\n     */\n    onModelDBMetadataChange(sender, event) {\n        const metadata = this.sharedModel.getMetadata();\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add':\n                    this._changeCellMetata(metadata, event);\n                    break;\n                case 'change':\n                    this._changeCellMetata(metadata, event);\n                    break;\n                case 'remove':\n                    delete metadata[event.key];\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n            this.sharedModel.setMetadata(metadata);\n        });\n    }\n    /**\n     * Change the cell metadata for a given event.\n     *\n     * @param metadata The cell metadata.\n     * @param event The event to handle.\n     */\n    _changeCellMetata(metadata, event) {\n        switch (event.key) {\n            case 'jupyter':\n                metadata.jupyter = event.newValue;\n                break;\n            case 'collapsed':\n                metadata.collapsed = event.newValue;\n                break;\n            case 'name':\n                metadata.name = event.newValue;\n                break;\n            case 'scrolled':\n                metadata.scrolled = event.newValue;\n                break;\n            case 'tags':\n                metadata.tags = event.newValue;\n                break;\n            case 'trusted':\n                metadata.trusted = event.newValue;\n                break;\n            default:\n                // The default is applied for custom metadata that are not\n                // defined in the official nbformat but which are defined\n                // by the user.\n                metadata[event.key] = event.newValue;\n        }\n    }\n    /**\n     * Handle a change to the cell shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the shared model changes.\n     *\n     * This method overrides the CodeEditor protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CodeEditor._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            var _a;\n            if (change.metadataChange) {\n                const newValue = (_a = change.metadataChange) === null || _a === void 0 ? void 0 : _a.newValue;\n                if (newValue) {\n                    Object.keys(newValue).map(key => {\n                        switch (key) {\n                            case 'collapsed':\n                                this.metadata.set('collapsed', newValue.jupyter);\n                                break;\n                            case 'jupyter':\n                                this.metadata.set('jupyter', newValue.jupyter);\n                                break;\n                            case 'name':\n                                this.metadata.set('name', newValue.name);\n                                break;\n                            case 'scrolled':\n                                this.metadata.set('scrolled', newValue.scrolled);\n                                break;\n                            case 'tags':\n                                this.metadata.set('tags', newValue.tags);\n                                break;\n                            case 'trusted':\n                                this.metadata.set('trusted', newValue.trusted);\n                                break;\n                            default:\n                                // The default is applied for custom metadata that are not\n                                // defined in the official nbformat but which are defined\n                                // by the user.\n                                this.metadata.set(key, newValue[key]);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n        let attachments;\n        const cell = options.cell;\n        if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n            attachments = cell\n                .attachments;\n        }\n        this._attachments = factory.createAttachmentsModel({\n            values: attachments,\n            modelDB: this.modelDB\n        });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        if (this.attachments.length) {\n            cell.attachments = this.attachments.toJSON();\n        }\n        return cell;\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional cell content.\n     */\n    constructor(options) {\n        super(options);\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const cell = options.cell;\n        let outputs = [];\n        const executionCount = this.modelDB.createValue('executionCount');\n        if (!executionCount.get()) {\n            if (cell && cell.cell_type === 'code') {\n                executionCount.set(cell.execution_count || null);\n                outputs = cell.outputs;\n            }\n            else {\n                executionCount.set(null);\n            }\n        }\n        executionCount.changed.connect(this._onExecutionCountChanged, this);\n        this._modelDBMutex(() => {\n            const sharedCell = this.sharedModel;\n            sharedCell.setOutputs(outputs !== null && outputs !== void 0 ? outputs : []);\n        });\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this._outputs.changed.connect(this.onGenericChange, this);\n        this._outputs.changed.connect(this.onModelDBOutputsChange, this);\n        // We keep `collapsed` and `jupyter.outputs_hidden` metadata in sync, since\n        // they are redundant in nbformat 4.4. See\n        // https://github.com/jupyter/nbformat/issues/137\n        this.metadata.changed.connect(Private.collapseChanged, this);\n        // Sync `collapsed` and `jupyter.outputs_hidden` for the first time, giving\n        // preference to `collapsed`.\n        if (this.metadata.has('collapsed')) {\n            const collapsed = this.metadata.get('collapsed');\n            Private.collapseChanged(this.metadata, {\n                type: 'change',\n                key: 'collapsed',\n                oldValue: collapsed,\n                newValue: collapsed\n            });\n        }\n        else if (this.metadata.has('jupyter')) {\n            const jupyter = this.metadata.get('jupyter');\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                Private.collapseChanged(this.metadata, {\n                    type: 'change',\n                    key: 'jupyter',\n                    oldValue: jupyter,\n                    newValue: jupyter\n                });\n            }\n        }\n    }\n    switchSharedModel(sharedModel, reinitialize) {\n        if (reinitialize) {\n            this.clearExecution();\n            sharedModel.getOutputs().forEach(output => this._outputs.add(output));\n        }\n        super.switchSharedModel(sharedModel, reinitialize);\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.modelDB.getValue('executionCount');\n    }\n    set executionCount(newValue) {\n        const oldValue = this.executionCount;\n        if (newValue === oldValue) {\n            return;\n        }\n        this.modelDB.setValue('executionCount', newValue || null);\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this.metadata.delete('execution');\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.execution_count = this.executionCount || null;\n        cell.outputs = this.outputs.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        if (this._outputs) {\n            this._outputs.trusted = args.newValue;\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    onModelDBOutputsChange(sender, event) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add': {\n                    const outputs = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.newIndex, event.newIndex + outputs.length, outputs);\n                    break;\n                }\n                case 'set': {\n                    const newValues = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length, newValues);\n                    break;\n                }\n                case 'remove':\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length);\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n        });\n    }\n    /**\n     * Handle a change to the output shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the nbcell changes.\n     *\n     * This method overrides the CellModel protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CellModel._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            if (change.outputsChange) {\n                this.clearExecution();\n                sender.getOutputs().forEach(output => this._outputs.add(output));\n            }\n            if (change.executionCountChange) {\n                this.executionCount = change.executionCountChange.newValue\n                    ? change.executionCountChange.newValue\n                    : null;\n            }\n        });\n    }\n    /**\n     * Handle a change to the execution count.\n     */\n    _onExecutionCountChanged(count, args) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            codeCell.execution_count = args.newValue\n                ? args.newValue\n                : null;\n        });\n        this.contentChanged.emit(void 0);\n        this.stateChanged.emit({\n            name: 'executionCount',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\nvar Private;\n(function (Private) {\n    function collapseChanged(metadata, args) {\n        if (args.key === 'collapsed') {\n            const jupyter = (metadata.get('jupyter') || {});\n            const { outputs_hidden } = jupyter, newJupyter = __rest(jupyter, [\"outputs_hidden\"]);\n            if (outputs_hidden !== args.newValue) {\n                if (args.newValue !== undefined) {\n                    newJupyter['outputs_hidden'] = args.newValue;\n                }\n                if (Object.keys(newJupyter).length === 0) {\n                    metadata.delete('jupyter');\n                }\n                else {\n                    metadata.set('jupyter', newJupyter);\n                }\n            }\n        }\n        else if (args.key === 'jupyter') {\n            const jupyter = (args.newValue || {});\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                metadata.set('collapsed', jupyter.outputs_hidden);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n    }\n    Private.collapseChanged = collapseChanged;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An abstract base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends ReactWidget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(callback) {\n        super();\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = callback;\n    }\n    /**\n     * Handle the click event.\n     */\n    handleClick(e) {\n        const callback = this._callback;\n        callback(e);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the input placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: INPUT_PROMPT_CLASS, key: \"input\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the output placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: OUTPUT_PROMPT_CLASS, key: \"output\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n//# sourceMappingURL=placeholder.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, SimplifiedOutputArea, OutputPrompt, Stdin } from '@jupyterlab/outputarea';\nimport { MimeModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { some, filter, toArray } from '@lumino/algorithm';\nimport { PanelLayout, Panel, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellHeader, CellFooter } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        super();\n        this._readOnly = false;\n        this._inputHidden = false;\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || Cell.defaultContentFactory);\n        this.layout = new PanelLayout();\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            updateOnShow: options.updateEditorOnShow\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder(() => {\n            this.inputHidden = !this.inputHidden;\n        });\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n        // Editor settings\n        if (options.editorConfig) {\n            let editorOptions = {};\n            Object.keys(options.editorConfig).forEach((key) => {\n                var _a, _b;\n                editorOptions[key] = (_b = (_a = options.editorConfig) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : null;\n            });\n            this.editor.setOptions(editorOptions);\n        }\n        model.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._input.editorWidget;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._input.editor;\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { metadata } = this.model;\n        const current = metadata.get('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            this.model.metadata.set('editable', false);\n        }\n        else {\n            this.model.metadata.delete('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly = this.model.metadata.get('editable') === false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        this._input.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        if (this._inputHidden === value) {\n            return;\n        }\n        const layout = this._inputWrapper.layout;\n        if (value) {\n            this._input.parent = null;\n            layout.addWidget(this._inputPlaceholder);\n        }\n        else {\n            this._inputPlaceholder.parent = null;\n            layout.addWidget(this._input);\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = Object.assign({}, this.model.metadata.get('jupyter'));\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.metadata.delete('jupyter');\n        }\n        else {\n            this.model.metadata.set('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        const jupyter = this.model.metadata.get('jupyter') || {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * Handle `fit-request` messages.\n     */\n    onFitRequest(msg) {\n        // need this for for when a theme changes font size\n        this.editor.refresh();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (this.editor.getOption('readOnly') !== this._readOnly) {\n            this.editor.setOption('readOnly', this._readOnly);\n            this.toggleClass(READONLY_CLASS, this._readOnly);\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options = {}) {\n            this._editorFactory =\n                options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n    /**\n     * The default content factory for cells.\n     */\n    Cell.defaultContentFactory = new ContentFactory();\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this._outputHidden = false;\n        this._syncScrolled = false;\n        this._savingMetadata = false;\n        this.addClass(CODE_CELL_CLASS);\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        // Insert the output before the cell footer.\n        const outputWrapper = (this._outputWrapper = new Panel());\n        outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n        const outputCollapser = new OutputCollapser();\n        outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n        const output = (this._output = new OutputArea({\n            model: model.outputs,\n            rendermime,\n            contentFactory: contentFactory,\n            maxNumberOutputs: options.maxNumberOutputs\n        }));\n        output.addClass(CELL_OUTPUT_AREA_CLASS);\n        // Set a CSS if there are no outputs, and connect a signal for future\n        // changes to the number of outputs. This is for conditional styling\n        // if there are no outputs.\n        if (model.outputs.length === 0) {\n            this.addClass(NO_OUTPUTS_CLASS);\n        }\n        output.outputLengthChanged.connect(this._outputLengthHandler, this);\n        outputWrapper.addWidget(outputCollapser);\n        outputWrapper.addWidget(output);\n        this.layout.insertWidget(2, outputWrapper);\n        this._outputPlaceholder = new OutputPlaceholder(() => {\n            this.outputHidden = !this.outputHidden;\n        });\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        if (this._outputHidden === value) {\n            return;\n        }\n        const layout = this._outputWrapper.layout;\n        if (value) {\n            layout.removeWidget(this._output);\n            layout.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !this._outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        else {\n            if (this._outputWrapper.isHidden) {\n                this._outputWrapper.show();\n            }\n            layout.removeWidget(this._outputPlaceholder);\n            layout.addWidget(this._output);\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this._savingMetadata = true;\n        try {\n            super.saveCollapseState();\n            const metadata = this.model.metadata;\n            const collapsed = this.model.metadata.get('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                metadata.set('collapsed', true);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n        finally {\n            this._savingMetadata = false;\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.metadata.get('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const { metadata } = this.model;\n        const current = metadata.get('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            metadata.set('scrolled', true);\n        }\n        else {\n            metadata.delete('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        const metadata = this.model.metadata;\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (metadata.get('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!metadata.get('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        if (this._savingMetadata) {\n            // We are in middle of a metadata transaction, so don't react to it.\n            return;\n        }\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'paste':\n                this._evtPaste(event);\n                break;\n            case 'dragenter':\n                event.preventDefault();\n                break;\n            case 'dragover':\n                event.preventDefault();\n                break;\n            case 'drop':\n                this._evtNativeDrop(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        node.addEventListener('dragenter', this);\n        node.addEventListener('dragover', this);\n        node.addEventListener('drop', this);\n        node.addEventListener('paste', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('drop', this);\n        node.removeEventListener('dragover', this);\n        node.removeEventListener('dragenter', this);\n        node.removeEventListener('paste', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = toArray(filter(event.mimeData.types(), mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        }));\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._renderer = null;\n        this._rendered = true;\n        this._prevText = '';\n        this._ready = new PromiseDelegate();\n        this.addClass(MARKDOWN_CELL_CLASS);\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        // Stop codemirror handling paste\n        this.editor.setOption('handlePaste', false);\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(() => {\n            if (this._rendered) {\n                this.update();\n            }\n        }, this);\n        void this._updateRenderedInput().then(() => {\n            this._ready.resolve(void 0);\n        });\n        this.renderInput(this._renderer);\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered();\n        // Refreshing an editor can be really expensive, so we don't call it from\n        // _handleRendered, since _handledRendered is also called on every update\n        // request.\n        if (!this._rendered) {\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        this.inputArea.renderInput(widget);\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        this.inputArea.showEditor();\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            void this._updateRenderedInput();\n            this.renderInput(this._renderer);\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        const model = this.model;\n        const text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            if (!this._renderer) {\n                this._renderer = this._rendermime.createRenderer('text/markdown');\n                this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n            }\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n}\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservbleMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map"],"sourceRoot":""}