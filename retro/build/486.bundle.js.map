{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/retro-application-extension/lib/index.js"],"names":["TREE_PATTERN","RegExp","id","requires","IDocumentManager","autoStart","activate","app","docManager","baseUrl","PageConfig","docOpen","open","path","widgetName","kernel","options","ref","call","route","PathExt","window","IRouter","router","commands","command","addCommand","execute","args","_a","matches","request","match","file","decodeURIComponent","ext","restored","then","undefined","register","pattern"],"mappings":"0MAQA,MAQMA,EAAe,IAAIC,OAAO,qCAqEhC,EADgB,CA9DG,CACfC,GAAI,sDACJC,SAAU,CAAC,EAAAC,kBACXC,WAAW,EACXC,SAAU,CAACC,EAAKC,KACZ,MAAMC,EAAU,EAAAC,WAAA,aAEVC,EAAUH,EAAWI,KAC3BJ,EAAWI,KAAO,CAACC,EAAMC,EAAa,UAAWC,EAAQC,KAErD,GAAY,YADAA,aAAyC,EAASA,EAAQC,KAGlE,YADAN,EAAQO,KAAKV,EAAYK,EAAMC,EAAYC,EAAQC,GAGvD,MACMG,EAAgB,WADV,EAAAC,QAAA,QAAgBP,GACK,YAAc,OAC/CQ,OAAOT,KAAK,GAAGH,UAAgBU,UAAcN,QAS1C,CACXX,GAAI,kDACJG,WAAW,EACXF,SAAU,CAAC,EAAAmB,QAAS,EAAAlB,kBACpBE,SAAU,CAACC,EAAKgB,EAAQf,KACpB,MAAM,SAAEgB,GAAajB,EACfkB,EAAU,cAChBD,EAASE,WAAWD,EAAS,CACzBE,QAAUC,IACN,IAAIC,EACJ,MAEMC,EAAwD,QAA7CD,EAFFD,EAEcG,QAAQC,MAAMhC,UAAkC,IAAP6B,EAAgBA,EAAK,IACpF,CAAE,CAAEhB,GAAQiB,EACnB,IAAKjB,EACD,OAEJ,MAAMoB,EAAOC,mBAAmBrB,GAC1BsB,EAAM,EAAAf,QAAA,QAAgBa,GAC5B1B,EAAI6B,SAASC,MAAK,KAEF,WAARF,EACA3B,EAAWI,KAAKqB,EA7Df,gBA6DuCK,EAAW,CAC/CrB,IAAK,WAITT,EAAWI,KAAKqB,EA9DjB,cA8DuCK,EAAW,CAC7CrB,IAAK,iBAMzBM,EAAOgB,SAAS,CAAEd,UAASe,QAASxC","file":"486.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { IRouter } from '@jupyterlab/application';\nimport { PageConfig, PathExt } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\n/**\n * The default notebook factory.\n */\nconst NOTEBOOK_FACTORY = 'Notebook';\n/**\n * The editor factory.\n */\nconst EDITOR_FACTORY = 'Editor';\n/**\n * A regular expression to match path to notebooks and documents\n */\nconst TREE_PATTERN = new RegExp('/(notebooks|edit)\\\\/?\\\\?path=(.*)');\n/**\n * A plugin to open document in a new browser tab.\n *\n * TODO: remove and use a custom doc manager?\n */\nconst docmanager = {\n    id: '@jupyterlite/retro-application-extension:docmanager',\n    requires: [IDocumentManager],\n    autoStart: true,\n    activate: (app, docManager) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        // patch the `docManager.open` option to prevent the default behavior\n        const docOpen = docManager.open;\n        docManager.open = (path, widgetName = 'default', kernel, options) => {\n            const ref = options === null || options === void 0 ? void 0 : options.ref;\n            if (ref === '_noref') {\n                docOpen.call(docManager, path, widgetName, kernel, options);\n                return;\n            }\n            const ext = PathExt.extname(path);\n            const route = ext === '.ipynb' ? 'notebooks' : 'edit';\n            window.open(`${baseUrl}retro/${route}?path=${path}`);\n            return undefined;\n        };\n    }\n};\n/**\n * A custom openeer plugin to pass the path to documents as\n * query string parameters.\n */\nconst opener = {\n    id: '@jupyterlite/retro-application-extension:opener',\n    autoStart: true,\n    requires: [IRouter, IDocumentManager],\n    activate: (app, router, docManager) => {\n        const { commands } = app;\n        const command = 'router:tree';\n        commands.addCommand(command, {\n            execute: (args) => {\n                var _a;\n                const parsed = args;\n                // use request to do the matching\n                const matches = (_a = parsed.request.match(TREE_PATTERN)) !== null && _a !== void 0 ? _a : [];\n                const [, , path] = matches;\n                if (!path) {\n                    return;\n                }\n                const file = decodeURIComponent(path);\n                const ext = PathExt.extname(file);\n                app.restored.then(() => {\n                    // TODO: get factory from file type instead?\n                    if (ext === '.ipynb') {\n                        docManager.open(file, NOTEBOOK_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                    else {\n                        docManager.open(file, EDITOR_FACTORY, undefined, {\n                            ref: '_noref'\n                        });\n                    }\n                });\n            }\n        });\n        router.register({ command, pattern: TREE_PATTERN });\n    }\n};\nconst plugins = [docmanager, opener];\nexport default plugins;\n"],"sourceRoot":""}