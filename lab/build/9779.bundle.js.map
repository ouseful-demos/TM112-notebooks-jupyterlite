{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/history.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/foreign.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/panel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/console/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablelist.js"],"names":["Private","ForeignHandler","options","this","_enabled","_isDisposed","sessionContext","iopubMessage","connect","onIOPubMessage","_parent","parent","value","isDisposed","Signal","sender","msg","_a","kernel","session","parent_header","clientId","msgType","header","msg_type","parentMsgId","msg_id","cell","inputMsg","_newCell","model","executionCount","content","execution_count","text","code","trusted","update","getCell","output","Object","assign","output_type","outputs","add","wait","clear","createCodeCell","addClass","addCell","ConsoleHistory","_cursor","_hasSession","_history","_placeholder","_setByHistory","_editor","_filtered","_handleKernel","kernelChanged","prev","edgeRequested","disconnect","onEdgeRequest","changed","onTextChange","length","placeholder","setFilter","Math","max","Promise","resolve","min","item","push","reset","last","current","status","i","history","editor","location","source","back","then","columnPos","indexOf","setCursorPosition","line","column","forward","pos","getPositionAt","requestHistory","initialRequest","v","onHistory","filterStr","slice","raw","hist_access_type","n","CONSOLE_CELL_CLASS","PROMPT_CLASS","CodeConsole","Widget","super","_banner","_executed","_mimetype","_msgIds","Map","_msgIdCells","_promptCellCreated","_dragData","_drag","_focusedCell","node","dataset","tabIndex","layout","PanelLayout","_cells","_content","Panel","_input","contentFactory","defaultContentFactory","modelFactory","defaultModelFactory","rendermime","_mimeTypeService","mimeTypeService","addWidget","_onKernelChanged","statusChanged","_onKernelStatusChanged","widgets","msgId","set","disposed","_onCellDisposed","createRawCell","banner","RawCell","initializeState","readOnly","cells","get","dispose","factory","_createCodeCellOptions","mimeType","force","timeout","_b","promptCell","Error","newPromptCell","_execute","shouldExecute","_shouldExecute","focus","newIndentedLine","metadata","key","keys","replaceSelection","call","each","isCodeCellModel","toJSON","event","button","shiftKey","target","cellFilter","classList","contains","cellIndex","CellDragUtils","document","elementFromPoint","clientX","clientY","pressX","pressY","index","addEventListener","preventDefault","data","_startDrag","cellModel","selected","dragImage","Drag","mimeData","MimeData","proposedAction","supportedActions","setData","textContent","removeEventListener","start","type","_evtKeyDown","_evtMouseDown","_evtMouseMove","_evtMouseUp","input","removeClass","addKeydownHandler","_onEditorKeydown","emit","scrollToBottom","keyCode","hasFocus","stopPropagation","contentChanged","CodeCell","payload","setNextInput","filter","setPrompt","Date","info","lang","language_info","getMimeTypeByLanguage","args","removeValue","delete","reject","timer","setTimeout","requestIsComplete","isComplete","clearTimeout","catch","addBanner","_handleInfo","ContentFactory","Cell","ModelFactory","codeCellContentFactory","CodeCellModel","RawCellModel","scrollTop","scrollHeight","clientHeight","ConsolePanel","MainAreaWidget","_connected","path","basePath","name","manager","translator","nullTranslator","trans","load","count","UUID","_sessionContext","SessionContext","sessionManager","sessions","specsManager","kernelspecs","__","kernelPreference","setBusy","resolver","RenderMimeRegistry","contents","clone","console","createConsole","initialize","async","sessionContextDialogs","_updateTitlePanel","executed","_onExecuted","propertyChanged","title","icon","consoleIcon","closable","id","prompt","onCloseRequest","updateTitle","IContentFactory","Token","panel","connected","caption","PathExt","kernelDisplayName","Time","toISOString","label","IConsoleTracker","ObservableList","_array","_changed","values","_itemCmp","itemCmp","ArrayIterator","oldValue","undefined","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","remove","copy","fromIndex","toIndex","toArray","startIndex","endIndex","first","second"],"mappings":"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","file":"9779.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A console history manager object.\n */\nexport class ConsoleHistory {\n    /**\n     * Construct a new console history object.\n     */\n    constructor(options) {\n        this._cursor = 0;\n        this._hasSession = false;\n        this._history = [];\n        this._placeholder = '';\n        this._setByHistory = false;\n        this._isDisposed = false;\n        this._editor = null;\n        this._filtered = [];\n        this.sessionContext = options.sessionContext;\n        void this._handleKernel();\n        this.sessionContext.kernelChanged.connect(this._handleKernel, this);\n    }\n    /**\n     * The current editor used by the history manager.\n     */\n    get editor() {\n        return this._editor;\n    }\n    set editor(value) {\n        if (this._editor === value) {\n            return;\n        }\n        const prev = this._editor;\n        if (prev) {\n            prev.edgeRequested.disconnect(this.onEdgeRequest, this);\n            prev.model.value.changed.disconnect(this.onTextChange, this);\n        }\n        this._editor = value;\n        if (value) {\n            value.edgeRequested.connect(this.onEdgeRequest, this);\n            value.model.value.changed.connect(this.onTextChange, this);\n        }\n    }\n    /**\n     * The placeholder text that a history session began with.\n     */\n    get placeholder() {\n        return this._placeholder;\n    }\n    /**\n     * Get whether the console history manager is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the console history manager.\n     */\n    dispose() {\n        this._isDisposed = true;\n        this._history.length = 0;\n        Signal.clearData(this);\n    }\n    /**\n     * Get the previous item in the console history.\n     *\n     * @param placeholder - The placeholder string that gets temporarily added\n     * to the history only for the duration of one history session. If multiple\n     * placeholders are sent within a session, only the first one is accepted.\n     *\n     * @returns A Promise for console command text or `undefined` if unavailable.\n     */\n    back(placeholder) {\n        if (!this._hasSession) {\n            this._hasSession = true;\n            this._placeholder = placeholder;\n            // Filter the history with the placeholder string.\n            this.setFilter(placeholder);\n            this._cursor = this._filtered.length - 1;\n        }\n        --this._cursor;\n        this._cursor = Math.max(0, this._cursor);\n        const content = this._filtered[this._cursor];\n        return Promise.resolve(content);\n    }\n    /**\n     * Get the next item in the console history.\n     *\n     * @param placeholder - The placeholder string that gets temporarily added\n     * to the history only for the duration of one history session. If multiple\n     * placeholders are sent within a session, only the first one is accepted.\n     *\n     * @returns A Promise for console command text or `undefined` if unavailable.\n     */\n    forward(placeholder) {\n        if (!this._hasSession) {\n            this._hasSession = true;\n            this._placeholder = placeholder;\n            // Filter the history with the placeholder string.\n            this.setFilter(placeholder);\n            this._cursor = this._filtered.length;\n        }\n        ++this._cursor;\n        this._cursor = Math.min(this._filtered.length - 1, this._cursor);\n        const content = this._filtered[this._cursor];\n        return Promise.resolve(content);\n    }\n    /**\n     * Add a new item to the bottom of history.\n     *\n     * @param item The item being added to the bottom of history.\n     *\n     * #### Notes\n     * If the item being added is undefined or empty, it is ignored. If the item\n     * being added is the same as the last item in history, it is ignored as well\n     * so that the console's history will consist of no contiguous repetitions.\n     */\n    push(item) {\n        if (item && item !== this._history[this._history.length - 1]) {\n            this._history.push(item);\n        }\n        this.reset();\n    }\n    /**\n     * Reset the history navigation state, i.e., start a new history session.\n     */\n    reset() {\n        this._cursor = this._history.length;\n        this._hasSession = false;\n        this._placeholder = '';\n    }\n    /**\n     * Populate the history collection on history reply from a kernel.\n     *\n     * @param value The kernel message history reply.\n     *\n     * #### Notes\n     * History entries have the shape:\n     * [session: number, line: number, input: string]\n     * Contiguous duplicates are stripped out of the API response.\n     */\n    onHistory(value) {\n        this._history.length = 0;\n        let last = '';\n        let current = '';\n        if (value.content.status === 'ok') {\n            for (let i = 0; i < value.content.history.length; i++) {\n                current = value.content.history[i][2];\n                if (current !== last) {\n                    this._history.push((last = current));\n                }\n            }\n        }\n        // Reset the history navigation cursor back to the bottom.\n        this._cursor = this._history.length;\n    }\n    /**\n     * Handle a text change signal from the editor.\n     */\n    onTextChange() {\n        if (this._setByHistory) {\n            this._setByHistory = false;\n            return;\n        }\n        this.reset();\n    }\n    /**\n     * Handle an edge requested signal.\n     */\n    onEdgeRequest(editor, location) {\n        const model = editor.model;\n        const source = model.value.text;\n        if (location === 'top' || location === 'topLine') {\n            void this.back(source).then(value => {\n                if (this.isDisposed || !value) {\n                    return;\n                }\n                if (model.value.text === value) {\n                    return;\n                }\n                this._setByHistory = true;\n                model.value.text = value;\n                let columnPos = 0;\n                columnPos = value.indexOf('\\n');\n                if (columnPos < 0) {\n                    columnPos = value.length;\n                }\n                editor.setCursorPosition({ line: 0, column: columnPos });\n            });\n        }\n        else {\n            void this.forward(source).then(value => {\n                if (this.isDisposed) {\n                    return;\n                }\n                const text = value || this.placeholder;\n                if (model.value.text === text) {\n                    return;\n                }\n                this._setByHistory = true;\n                model.value.text = text;\n                const pos = editor.getPositionAt(text.length);\n                if (pos) {\n                    editor.setCursorPosition(pos);\n                }\n            });\n        }\n    }\n    /**\n     * Handle the current kernel changing.\n     */\n    async _handleKernel() {\n        var _a;\n        const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            this._history.length = 0;\n            return;\n        }\n        return kernel.requestHistory(Private.initialRequest).then(v => {\n            this.onHistory(v);\n        });\n    }\n    /**\n     * Set the filter data.\n     *\n     * @param filterStr - The string to use when filtering the data.\n     */\n    setFilter(filterStr = '') {\n        // Apply the new filter and remove contiguous duplicates.\n        this._filtered.length = 0;\n        let last = '';\n        let current = '';\n        for (let i = 0; i < this._history.length; i++) {\n            current = this._history[i];\n            if (current !== last &&\n                filterStr === current.slice(0, filterStr.length)) {\n                this._filtered.push((last = current));\n            }\n        }\n        this._filtered.push(filterStr);\n    }\n}\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    Private.initialRequest = {\n        output: false,\n        raw: true,\n        hist_access_type: 'tail',\n        n: 500\n    };\n})(Private || (Private = {}));\n//# sourceMappingURL=history.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\nconst FOREIGN_CELL_CLASS = 'jp-CodeConsole-foreignCell';\n/**\n * A handler for capturing API messages from other sessions that should be\n * rendered in a given parent.\n */\nexport class ForeignHandler {\n    /**\n     * Construct a new foreign message handler.\n     */\n    constructor(options) {\n        this._enabled = false;\n        this._isDisposed = false;\n        this.sessionContext = options.sessionContext;\n        this.sessionContext.iopubMessage.connect(this.onIOPubMessage, this);\n        this._parent = options.parent;\n    }\n    /**\n     * Set whether the handler is able to inject foreign cells into a console.\n     */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        this._enabled = value;\n    }\n    /**\n     * The foreign handler's parent receiver.\n     */\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Test whether the handler is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose the resources held by the handler.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n    }\n    /**\n     * Handler IOPub messages.\n     *\n     * @returns `true` if the message resulted in a new cell injection or a\n     * previously injected cell being updated and `false` for all other messages.\n     */\n    onIOPubMessage(sender, msg) {\n        var _a;\n        // Only process messages if foreign cell injection is enabled.\n        if (!this._enabled) {\n            return false;\n        }\n        const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            return false;\n        }\n        // Check whether this message came from an external session.\n        const parent = this._parent;\n        const session = msg.parent_header.session;\n        if (session === kernel.clientId) {\n            return false;\n        }\n        const msgType = msg.header.msg_type;\n        const parentHeader = msg.parent_header;\n        const parentMsgId = parentHeader.msg_id;\n        let cell;\n        switch (msgType) {\n            case 'execute_input': {\n                const inputMsg = msg;\n                cell = this._newCell(parentMsgId);\n                const model = cell.model;\n                model.executionCount = inputMsg.content.execution_count;\n                model.value.text = inputMsg.content.code;\n                model.trusted = true;\n                parent.update();\n                return true;\n            }\n            case 'execute_result':\n            case 'display_data':\n            case 'stream':\n            case 'error': {\n                cell = this._parent.getCell(parentMsgId);\n                if (!cell) {\n                    return false;\n                }\n                const output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                cell.model.outputs.add(output);\n                parent.update();\n                return true;\n            }\n            case 'clear_output': {\n                const wait = msg.content.wait;\n                cell = this._parent.getCell(parentMsgId);\n                if (cell) {\n                    cell.model.outputs.clear(wait);\n                }\n                return true;\n            }\n            default:\n                return false;\n        }\n    }\n    /**\n     * Create a new code cell for an input originated from a foreign session.\n     */\n    _newCell(parentMsgId) {\n        const cell = this.parent.createCodeCell();\n        cell.addClass(FOREIGN_CELL_CLASS);\n        this._parent.addCell(cell, parentMsgId);\n        return cell;\n    }\n}\n//# sourceMappingURL=foreign.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Cell, CellDragUtils, CodeCell, CodeCellModel, isCodeCellModel, RawCell, RawCellModel } from '@jupyterlab/cells';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { each } from '@lumino/algorithm';\nimport { MimeData } from '@lumino/coreutils';\nimport { Drag } from '@lumino/dragdrop';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { ConsoleHistory } from './history';\n/**\n * The data attribute added to a widget that has an active kernel.\n */\nconst KERNEL_USER = 'jpKernelUser';\n/**\n * The data attribute added to a widget can run code.\n */\nconst CODE_RUNNER = 'jpCodeRunner';\n/**\n * The class name added to console widgets.\n */\nconst CONSOLE_CLASS = 'jp-CodeConsole';\n/**\n * The class added to console cells\n */\nconst CONSOLE_CELL_CLASS = 'jp-Console-cell';\n/**\n * The class name added to the console banner.\n */\nconst BANNER_CLASS = 'jp-CodeConsole-banner';\n/**\n * The class name of the active prompt cell.\n */\nconst PROMPT_CLASS = 'jp-CodeConsole-promptCell';\n/**\n * The class name of the panel that holds cell content.\n */\nconst CONTENT_CLASS = 'jp-CodeConsole-content';\n/**\n * The class name of the panel that holds prompts.\n */\nconst INPUT_CLASS = 'jp-CodeConsole-input';\n/**\n * The timeout in ms for execution requests to the kernel.\n */\nconst EXECUTION_TIMEOUT = 250;\n/**\n * The mimetype used for Jupyter cell data.\n */\nconst JUPYTER_CELL_MIME = 'application/vnd.jupyter.cells';\n/**\n * A widget containing a Jupyter console.\n *\n * #### Notes\n * The CodeConsole class is intended to be used within a ConsolePanel\n * instance. Under most circumstances, it is not instantiated by user code.\n */\nexport class CodeConsole extends Widget {\n    /**\n     * Construct a console widget.\n     */\n    constructor(options) {\n        super();\n        this._banner = null;\n        this._executed = new Signal(this);\n        this._mimetype = 'text/x-ipython';\n        this._msgIds = new Map();\n        this._msgIdCells = new Map();\n        this._promptCellCreated = new Signal(this);\n        this._dragData = null;\n        this._drag = null;\n        this._focusedCell = null;\n        this.addClass(CONSOLE_CLASS);\n        this.node.dataset[KERNEL_USER] = 'true';\n        this.node.dataset[CODE_RUNNER] = 'true';\n        this.node.tabIndex = -1; // Allow the widget to take focus.\n        // Create the panels that hold the content and input.\n        const layout = (this.layout = new PanelLayout());\n        this._cells = new ObservableList();\n        this._content = new Panel();\n        this._input = new Panel();\n        this.contentFactory =\n            options.contentFactory || CodeConsole.defaultContentFactory;\n        this.modelFactory = options.modelFactory || CodeConsole.defaultModelFactory;\n        this.rendermime = options.rendermime;\n        this.sessionContext = options.sessionContext;\n        this._mimeTypeService = options.mimeTypeService;\n        // Add top-level CSS classes.\n        this._content.addClass(CONTENT_CLASS);\n        this._input.addClass(INPUT_CLASS);\n        // Insert the content and input panes into the widget.\n        layout.addWidget(this._content);\n        layout.addWidget(this._input);\n        this._history = new ConsoleHistory({\n            sessionContext: this.sessionContext\n        });\n        void this._onKernelChanged();\n        this.sessionContext.kernelChanged.connect(this._onKernelChanged, this);\n        this.sessionContext.statusChanged.connect(this._onKernelStatusChanged, this);\n    }\n    /**\n     * A signal emitted when the console finished executing its prompt cell.\n     */\n    get executed() {\n        return this._executed;\n    }\n    /**\n     * A signal emitted when a new prompt cell is created.\n     */\n    get promptCellCreated() {\n        return this._promptCellCreated;\n    }\n    /**\n     * The list of content cells in the console.\n     *\n     * #### Notes\n     * This list does not include the current banner or the prompt for a console.\n     * It may include previous banners as raw cells.\n     */\n    get cells() {\n        return this._cells;\n    }\n    /*\n     * The console input prompt cell.\n     */\n    get promptCell() {\n        const inputLayout = this._input.layout;\n        return inputLayout.widgets[0] || null;\n    }\n    /**\n     * Add a new cell to the content panel.\n     *\n     * @param cell - The code cell widget being added to the content panel.\n     *\n     * @param msgId - The optional execution message id for the cell.\n     *\n     * #### Notes\n     * This method is meant for use by outside classes that want to add cells to a\n     * console. It is distinct from the `inject` method in that it requires\n     * rendered code cell widgets and does not execute them (though it can store\n     * the execution message id).\n     */\n    addCell(cell, msgId) {\n        cell.addClass(CONSOLE_CELL_CLASS);\n        this._content.addWidget(cell);\n        this._cells.push(cell);\n        if (msgId) {\n            this._msgIds.set(msgId, cell);\n            this._msgIdCells.set(cell, msgId);\n        }\n        cell.disposed.connect(this._onCellDisposed, this);\n        this.update();\n    }\n    /**\n     * Add a banner cell.\n     */\n    addBanner() {\n        if (this._banner) {\n            // An old banner just becomes a normal cell now.\n            const cell = this._banner;\n            this._cells.push(this._banner);\n            cell.disposed.connect(this._onCellDisposed, this);\n        }\n        // Create the banner.\n        const model = this.modelFactory.createRawCell({});\n        model.value.text = '...';\n        const banner = (this._banner = new RawCell({\n            model,\n            contentFactory: this.contentFactory\n        })).initializeState();\n        banner.addClass(BANNER_CLASS);\n        banner.readOnly = true;\n        this._content.addWidget(banner);\n    }\n    /**\n     * Clear the code cells.\n     */\n    clear() {\n        // Dispose all the content cells\n        const cells = this._cells;\n        while (cells.length > 0) {\n            cells.get(0).dispose();\n        }\n    }\n    /**\n     * Create a new cell with the built-in factory.\n     */\n    createCodeCell() {\n        const factory = this.contentFactory;\n        const options = this._createCodeCellOptions();\n        const cell = factory.createCodeCell(options);\n        cell.readOnly = true;\n        cell.model.mimeType = this._mimetype;\n        return cell;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._cells.clear();\n        this._msgIdCells = null;\n        this._msgIds = null;\n        this._history.dispose();\n        super.dispose();\n    }\n    /**\n     * Execute the current prompt.\n     *\n     * @param force - Whether to force execution without checking code\n     * completeness.\n     *\n     * @param timeout - The length of time, in milliseconds, that the execution\n     * should wait for the API to determine whether code being submitted is\n     * incomplete before attempting submission anyway. The default value is `250`.\n     */\n    async execute(force = false, timeout = EXECUTION_TIMEOUT) {\n        var _a, _b;\n        if (((_b = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.status) === 'dead') {\n            return;\n        }\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            throw new Error('Cannot execute without a prompt cell');\n        }\n        promptCell.model.trusted = true;\n        if (force) {\n            // Create a new prompt cell before kernel execution to allow typeahead.\n            this.newPromptCell();\n            await this._execute(promptCell);\n            return;\n        }\n        // Check whether we should execute.\n        const shouldExecute = await this._shouldExecute(timeout);\n        if (this.isDisposed) {\n            return;\n        }\n        if (shouldExecute) {\n            // Create a new prompt cell before kernel execution to allow typeahead.\n            this.newPromptCell();\n            this.promptCell.editor.focus();\n            await this._execute(promptCell);\n        }\n        else {\n            // add a newline if we shouldn't execute\n            promptCell.editor.newIndentedLine();\n        }\n    }\n    /**\n     * Get a cell given a message id.\n     *\n     * @param msgId - The message id.\n     */\n    getCell(msgId) {\n        return this._msgIds.get(msgId);\n    }\n    /**\n     * Inject arbitrary code for the console to execute immediately.\n     *\n     * @param code - The code contents of the cell being injected.\n     *\n     * @returns A promise that indicates when the injected cell's execution ends.\n     */\n    inject(code, metadata = {}) {\n        const cell = this.createCodeCell();\n        cell.model.value.text = code;\n        for (const key of Object.keys(metadata)) {\n            cell.model.metadata.set(key, metadata[key]);\n        }\n        this.addCell(cell);\n        return this._execute(cell);\n    }\n    /**\n     * Insert a line break in the prompt cell.\n     */\n    insertLinebreak() {\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            return;\n        }\n        promptCell.editor.newIndentedLine();\n    }\n    /**\n     * Replaces the selected text in the prompt cell.\n     *\n     * @param text - The text to replace the selection.\n     */\n    replaceSelection(text) {\n        var _a, _b;\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            return;\n        }\n        (_b = (_a = promptCell.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n    }\n    /**\n     * Serialize the output.\n     *\n     * #### Notes\n     * This only serializes the code cells and the prompt cell if it exists, and\n     * skips any old banner cells.\n     */\n    serialize() {\n        const cells = [];\n        each(this._cells, cell => {\n            const model = cell.model;\n            if (isCodeCellModel(model)) {\n                cells.push(model.toJSON());\n            }\n        });\n        if (this.promptCell) {\n            cells.push(this.promptCell.model.toJSON());\n        }\n        return cells;\n    }\n    /**\n     * Handle `mousedown` events for the widget.\n     */\n    _evtMouseDown(event) {\n        const { button, shiftKey } = event;\n        // We only handle main or secondary button actions.\n        if (!(button === 0 || button === 2) ||\n            // Shift right-click gives the browser default behavior.\n            (shiftKey && button === 2)) {\n            return;\n        }\n        let target = event.target;\n        const cellFilter = (node) => node.classList.contains(CONSOLE_CELL_CLASS);\n        let cellIndex = CellDragUtils.findCell(target, this._cells, cellFilter);\n        if (cellIndex === -1) {\n            // `event.target` sometimes gives an orphaned node in\n            // Firefox 57, which can have `null` anywhere in its parent line. If we fail\n            // to find a cell using `event.target`, try again using a target\n            // reconstructed from the position of the click event.\n            target = document.elementFromPoint(event.clientX, event.clientY);\n            cellIndex = CellDragUtils.findCell(target, this._cells, cellFilter);\n        }\n        if (cellIndex === -1) {\n            return;\n        }\n        const cell = this._cells.get(cellIndex);\n        const targetArea = CellDragUtils.detectTargetArea(cell, event.target);\n        if (targetArea === 'prompt') {\n            this._dragData = {\n                pressX: event.clientX,\n                pressY: event.clientY,\n                index: cellIndex\n            };\n            this._focusedCell = cell;\n            document.addEventListener('mouseup', this, true);\n            document.addEventListener('mousemove', this, true);\n            event.preventDefault();\n        }\n    }\n    /**\n     * Handle `mousemove` event of widget\n     */\n    _evtMouseMove(event) {\n        const data = this._dragData;\n        if (data &&\n            CellDragUtils.shouldStartDrag(data.pressX, data.pressY, event.clientX, event.clientY)) {\n            void this._startDrag(data.index, event.clientX, event.clientY);\n        }\n    }\n    /**\n     * Start a drag event\n     */\n    _startDrag(index, clientX, clientY) {\n        const cellModel = this._focusedCell.model;\n        const selected = [cellModel.toJSON()];\n        const dragImage = CellDragUtils.createCellDragImage(this._focusedCell, selected);\n        this._drag = new Drag({\n            mimeData: new MimeData(),\n            dragImage,\n            proposedAction: 'copy',\n            supportedActions: 'copy',\n            source: this\n        });\n        this._drag.mimeData.setData(JUPYTER_CELL_MIME, selected);\n        const textContent = cellModel.value.text;\n        this._drag.mimeData.setData('text/plain', textContent);\n        this._focusedCell = null;\n        document.removeEventListener('mousemove', this, true);\n        document.removeEventListener('mouseup', this, true);\n        return this._drag.start(clientX, clientY).then(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this._drag = null;\n            this._dragData = null;\n        });\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event -The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeyDown(event);\n                break;\n            case 'mousedown':\n                this._evtMouseDown(event);\n                break;\n            case 'mousemove':\n                this._evtMouseMove(event);\n                break;\n            case 'mouseup':\n                this._evtMouseUp(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after_attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.node;\n        node.addEventListener('keydown', this, true);\n        node.addEventListener('click', this);\n        node.addEventListener('mousedown', this);\n        // Create a prompt if necessary.\n        if (!this.promptCell) {\n            this.newPromptCell();\n        }\n        else {\n            this.promptCell.editor.focus();\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('keydown', this, true);\n        node.removeEventListener('click', this);\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        const editor = this.promptCell && this.promptCell.editor;\n        if (editor) {\n            editor.focus();\n        }\n        this.update();\n    }\n    /**\n     * Make a new prompt cell.\n     */\n    newPromptCell() {\n        let promptCell = this.promptCell;\n        const input = this._input;\n        // Make the last prompt read-only, clear its signals, and move to content.\n        if (promptCell) {\n            promptCell.readOnly = true;\n            promptCell.removeClass(PROMPT_CLASS);\n            Signal.clearData(promptCell.editor);\n            const child = input.widgets[0];\n            child.parent = null;\n            this.addCell(promptCell);\n        }\n        // Create the new prompt cell.\n        const factory = this.contentFactory;\n        const options = this._createCodeCellOptions();\n        promptCell = factory.createCodeCell(options);\n        promptCell.model.mimeType = this._mimetype;\n        promptCell.addClass(PROMPT_CLASS);\n        // Add the prompt cell to the DOM, making `this.promptCell` valid again.\n        this._input.addWidget(promptCell);\n        // Suppress the default \"Enter\" key handling.\n        const editor = promptCell.editor;\n        editor.addKeydownHandler(this._onEditorKeydown);\n        this._history.editor = editor;\n        this._promptCellCreated.emit(promptCell);\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        Private.scrollToBottom(this._content.node);\n    }\n    /**\n     * Handle the `'keydown'` event for the widget.\n     */\n    _evtKeyDown(event) {\n        const editor = this.promptCell && this.promptCell.editor;\n        if (!editor) {\n            return;\n        }\n        if (event.keyCode === 13 && !editor.hasFocus()) {\n            event.preventDefault();\n            editor.focus();\n        }\n        else if (event.keyCode === 27 && editor.hasFocus()) {\n            // Set to command mode\n            event.preventDefault();\n            event.stopPropagation();\n            this.node.focus();\n        }\n    }\n    /**\n     * Handle the `'mouseup'` event for the widget.\n     */\n    _evtMouseUp(event) {\n        if (this.promptCell &&\n            this.promptCell.node.contains(event.target)) {\n            this.promptCell.editor.focus();\n        }\n    }\n    /**\n     * Execute the code in the current prompt cell.\n     */\n    _execute(cell) {\n        const source = cell.model.value.text;\n        this._history.push(source);\n        // If the source of the console is just \"clear\", clear the console as we\n        // do in IPython or QtConsole.\n        if (source === 'clear' || source === '%clear') {\n            this.clear();\n            return Promise.resolve(void 0);\n        }\n        cell.model.contentChanged.connect(this.update, this);\n        const onSuccess = (value) => {\n            if (this.isDisposed) {\n                return;\n            }\n            if (value && value.content.status === 'ok') {\n                const content = value.content;\n                // Use deprecated payloads for backwards compatibility.\n                if (content.payload && content.payload.length) {\n                    const setNextInput = content.payload.filter(i => {\n                        return i.source === 'set_next_input';\n                    })[0];\n                    if (setNextInput) {\n                        const text = setNextInput.text;\n                        // Ignore the `replace` value and always set the next cell.\n                        cell.model.value.text = text;\n                    }\n                }\n            }\n            else if (value && value.content.status === 'error') {\n                each(this._cells, (cell) => {\n                    if (cell.model.executionCount === null) {\n                        cell.setPrompt('');\n                    }\n                });\n            }\n            cell.model.contentChanged.disconnect(this.update, this);\n            this.update();\n            this._executed.emit(new Date());\n        };\n        const onFailure = () => {\n            if (this.isDisposed) {\n                return;\n            }\n            cell.model.contentChanged.disconnect(this.update, this);\n            this.update();\n        };\n        return CodeCell.execute(cell, this.sessionContext).then(onSuccess, onFailure);\n    }\n    /**\n     * Update the console based on the kernel info.\n     */\n    _handleInfo(info) {\n        if (info.status !== 'ok') {\n            this._banner.model.value.text = 'Error in getting kernel banner';\n            return;\n        }\n        this._banner.model.value.text = info.banner;\n        const lang = info.language_info;\n        this._mimetype = this._mimeTypeService.getMimeTypeByLanguage(lang);\n        if (this.promptCell) {\n            this.promptCell.model.mimeType = this._mimetype;\n        }\n    }\n    /**\n     * Create the options used to initialize a code cell widget.\n     */\n    _createCodeCellOptions() {\n        const contentFactory = this.contentFactory;\n        const modelFactory = this.modelFactory;\n        const model = modelFactory.createCodeCell({});\n        const rendermime = this.rendermime;\n        return { model, rendermime, contentFactory };\n    }\n    /**\n     * Handle cell disposed signals.\n     */\n    _onCellDisposed(sender, args) {\n        if (!this.isDisposed) {\n            this._cells.removeValue(sender);\n            const msgId = this._msgIdCells.get(sender);\n            if (msgId) {\n                this._msgIdCells.delete(sender);\n                this._msgIds.delete(msgId);\n            }\n        }\n    }\n    /**\n     * Test whether we should execute the prompt cell.\n     */\n    _shouldExecute(timeout) {\n        const promptCell = this.promptCell;\n        if (!promptCell) {\n            return Promise.resolve(false);\n        }\n        const model = promptCell.model;\n        const code = model.value.text;\n        return new Promise((resolve, reject) => {\n            var _a;\n            const timer = setTimeout(() => {\n                resolve(true);\n            }, timeout);\n            const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (!kernel) {\n                resolve(false);\n                return;\n            }\n            kernel\n                .requestIsComplete({ code })\n                .then(isComplete => {\n                clearTimeout(timer);\n                if (this.isDisposed) {\n                    resolve(false);\n                }\n                if (isComplete.content.status !== 'incomplete') {\n                    resolve(true);\n                    return;\n                }\n                resolve(false);\n            })\n                .catch(() => {\n                resolve(true);\n            });\n        });\n    }\n    /**\n     * Handle a keydown event on an editor.\n     */\n    _onEditorKeydown(editor, event) {\n        // Suppress \"Enter\" events.\n        return event.keyCode === 13;\n    }\n    /**\n     * Handle a change to the kernel.\n     */\n    async _onKernelChanged() {\n        var _a;\n        this.clear();\n        if (this._banner) {\n            this._banner.dispose();\n            this._banner = null;\n        }\n        this.addBanner();\n        if ((_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) {\n            this._handleInfo(await this.sessionContext.session.kernel.info);\n        }\n    }\n    /**\n     * Handle a change to the kernel status.\n     */\n    async _onKernelStatusChanged() {\n        var _a;\n        const kernel = (_a = this.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if ((kernel === null || kernel === void 0 ? void 0 : kernel.status) === 'restarting') {\n            this.addBanner();\n            this._handleInfo(await (kernel === null || kernel === void 0 ? void 0 : kernel.info));\n        }\n    }\n}\n/**\n * A namespace for CodeConsole statics.\n */\n(function (CodeConsole) {\n    /**\n     * Default implementation of `IContentFactory`.\n     */\n    class ContentFactory extends Cell.ContentFactory {\n        /**\n         * Create a new code cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createCodeCell(options) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new CodeCell(options).initializeState();\n        }\n        /**\n         * Create a new raw cell widget.\n         *\n         * #### Notes\n         * If no cell content factory is passed in with the options, the one on the\n         * notebook content factory is used.\n         */\n        createRawCell(options) {\n            if (!options.contentFactory) {\n                options.contentFactory = this;\n            }\n            return new RawCell(options).initializeState();\n        }\n    }\n    CodeConsole.ContentFactory = ContentFactory;\n    /**\n     * A default content factory for the code console.\n     */\n    CodeConsole.defaultContentFactory = new ContentFactory();\n    /**\n     * The default implementation of an `IModelFactory`.\n     */\n    class ModelFactory {\n        /**\n         * Create a new cell model factory.\n         */\n        constructor(options = {}) {\n            this.codeCellContentFactory =\n                options.codeCellContentFactory || CodeCellModel.defaultContentFactory;\n        }\n        /**\n         * Create a new code cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new code cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         *   If the contentFactory is not provided, the instance\n         *   `codeCellContentFactory` will be used.\n         */\n        createCodeCell(options) {\n            if (!options.contentFactory) {\n                options.contentFactory = this.codeCellContentFactory;\n            }\n            return new CodeCellModel(options);\n        }\n        /**\n         * Create a new raw cell.\n         *\n         * @param source - The data to use for the original source data.\n         *\n         * @returns A new raw cell. If a source cell is provided, the\n         *   new cell will be initialized with the data from the source.\n         */\n        createRawCell(options) {\n            return new RawCellModel(options);\n        }\n    }\n    CodeConsole.ModelFactory = ModelFactory;\n    /**\n     * The default `ModelFactory` instance.\n     */\n    CodeConsole.defaultModelFactory = new ModelFactory({});\n})(CodeConsole || (CodeConsole = {}));\n/**\n * A namespace for console widget private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Jump to the bottom of a node.\n     *\n     * @param node - The scrollable element.\n     */\n    function scrollToBottom(node) {\n        node.scrollTop = node.scrollHeight - node.clientHeight;\n    }\n    Private.scrollToBottom = scrollToBottom;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { SessionContext, sessionContextDialogs, MainAreaWidget } from '@jupyterlab/apputils';\nimport { PathExt, Time } from '@jupyterlab/coreutils';\nimport { RenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { consoleIcon } from '@jupyterlab/ui-components';\nimport { Token, UUID } from '@lumino/coreutils';\nimport { Panel } from '@lumino/widgets';\nimport { CodeConsole } from './widget';\nimport { nullTranslator } from '@jupyterlab/translation';\n/**\n * The class name added to console panels.\n */\nconst PANEL_CLASS = 'jp-ConsolePanel';\n/**\n * A panel which contains a console and the ability to add other children.\n */\nexport class ConsolePanel extends MainAreaWidget {\n    /**\n     * Construct a console panel.\n     */\n    constructor(options) {\n        super({ content: new Panel() });\n        this._executed = null;\n        this._connected = null;\n        this.addClass(PANEL_CLASS);\n        let { rendermime, mimeTypeService, path, basePath, name, manager, modelFactory, sessionContext, translator } = options;\n        this.translator = translator || nullTranslator;\n        const trans = this.translator.load('jupyterlab');\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || ConsolePanel.defaultContentFactory);\n        const count = Private.count++;\n        if (!path) {\n            path = `${basePath || ''}/console-${count}-${UUID.uuid4()}`;\n        }\n        sessionContext = this._sessionContext =\n            sessionContext ||\n                new SessionContext({\n                    sessionManager: manager.sessions,\n                    specsManager: manager.kernelspecs,\n                    path,\n                    name: name || trans.__('Console %1', count),\n                    type: 'console',\n                    kernelPreference: options.kernelPreference,\n                    setBusy: options.setBusy\n                });\n        const resolver = new RenderMimeRegistry.UrlResolver({\n            session: sessionContext,\n            contents: manager.contents\n        });\n        rendermime = rendermime.clone({ resolver });\n        this.console = contentFactory.createConsole({\n            rendermime,\n            sessionContext: sessionContext,\n            mimeTypeService,\n            contentFactory,\n            modelFactory\n        });\n        this.content.addWidget(this.console);\n        void sessionContext.initialize().then(async (value) => {\n            if (value) {\n                await sessionContextDialogs.selectKernel(sessionContext);\n            }\n            this._connected = new Date();\n            this._updateTitlePanel();\n        });\n        this.console.executed.connect(this._onExecuted, this);\n        this._updateTitlePanel();\n        sessionContext.kernelChanged.connect(this._updateTitlePanel, this);\n        sessionContext.propertyChanged.connect(this._updateTitlePanel, this);\n        this.title.icon = consoleIcon;\n        this.title.closable = true;\n        this.id = `console-${count}`;\n    }\n    /**\n     * The session used by the panel.\n     */\n    get sessionContext() {\n        return this._sessionContext;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        this.sessionContext.dispose();\n        this.console.dispose();\n        super.dispose();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        const prompt = this.console.promptCell;\n        if (prompt) {\n            prompt.editor.focus();\n        }\n    }\n    /**\n     * Handle `'close-request'` messages.\n     */\n    onCloseRequest(msg) {\n        super.onCloseRequest(msg);\n        this.dispose();\n    }\n    /**\n     * Handle a console execution.\n     */\n    _onExecuted(sender, args) {\n        this._executed = args;\n        this._updateTitlePanel();\n    }\n    /**\n     * Update the console panel title.\n     */\n    _updateTitlePanel() {\n        Private.updateTitle(this, this._connected, this._executed, this.translator);\n    }\n}\n/**\n * A namespace for ConsolePanel statics.\n */\n(function (ConsolePanel) {\n    /**\n     * Default implementation of `IContentFactory`.\n     */\n    class ContentFactory extends CodeConsole.ContentFactory {\n        /**\n         * Create a new console panel.\n         */\n        createConsole(options) {\n            return new CodeConsole(options);\n        }\n    }\n    ConsolePanel.ContentFactory = ContentFactory;\n    /**\n     * A default code console content factory.\n     */\n    ConsolePanel.defaultContentFactory = new ContentFactory();\n    /* tslint:disable */\n    /**\n     * The console renderer token.\n     */\n    ConsolePanel.IContentFactory = new Token('@jupyterlab/console:IContentFactory');\n    /* tslint:enable */\n})(ConsolePanel || (ConsolePanel = {}));\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The counter for new consoles.\n     */\n    Private.count = 1;\n    /**\n     * Update the title of a console panel.\n     */\n    function updateTitle(panel, connected, executed, translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        const sessionContext = panel.console.sessionContext.session;\n        if (sessionContext) {\n            // FIXME:\n            let caption = trans.__('Name: %1\\n', sessionContext.name) +\n                trans.__('Directory: %1\\n', PathExt.dirname(sessionContext.path)) +\n                trans.__('Kernel: %1', panel.console.sessionContext.kernelDisplayName);\n            if (connected) {\n                caption += trans.__('\\nConnected: %1', Time.format(connected.toISOString()));\n            }\n            if (executed) {\n                caption += trans.__('\\nLast Execution: %1');\n            }\n            panel.title.label = sessionContext.name;\n            panel.title.caption = caption;\n        }\n        else {\n            panel.title.label = trans.__('Console');\n            panel.title.caption = '';\n        }\n    }\n    Private.updateTitle = updateTitle;\n})(Private || (Private = {}));\n//# sourceMappingURL=panel.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The console tracker token.\n */\nexport const IConsoleTracker = new Token('@jupyterlab/console:IConsoleTracker');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values !== void 0) {\n            each(options.values, value => {\n                this._array.push(value);\n            });\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        return new ArrayIterator(this._array);\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        ArrayExt.insert(this._array, index, value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable or array-like set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        each(values, value => {\n            this._array.push(value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        each(values, value => {\n            ArrayExt.insert(this._array, index++, value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map"],"sourceRoot":""}