{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/outputarea/lib/widget.js"],"names":["Private","ObservableList","options","this","_array","_isDisposed","_changed","Signal","values","each","value","push","_itemCmp","itemCmp","length","clear","ArrayIterator","index","oldValue","undefined","Error","emit","type","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","item","remove","copy","slice","fromIndex","toIndex","toArray","startIndex","endIndex","i","first","second","OutputAreaModel","clearNext","_trusted","_stateChanged","trusted","contentFactory","defaultContentFactory","list","_add","changed","connect","_onListChanged","get","toJSON","dispose","_createItem","set","isDisposed","JSONExt","normalize","output","wait","_lastStream","map","name","_lastName","shouldCombine","lastModel","text","removeOverwrittenChars","createOutputModel","_onGenericChange","sender","args","ContentFactory","OutputModel","Array","isArray","join","txt","replace","search","base","match","insert","fixCarriageReturn","tmp","fixBackspace","OUTPUT_AREA_ITEM_CLASS","OUTPUT_AREA_OUTPUT_CLASS","OUTPUT_AREA_PROMPT_CLASS","OutputArea","Widget","super","outputLengthChanged","_onIOPub","msg","model","msgType","header","msg_type","displayId","content","transient","targets","Object","assign","output_type","add","_displayIdMap","_onExecuteReply","status","payload","pages","filter","source","data","JSON","parse","stringify","metadata","_minHeightTimeout","Map","addClass","rendermime","layout","PanelLayout","trimmedOutputModels","maxNumberOutputs","headTailNumberOutputs","Math","round","headEndIndex","_insertOutput","onModelChanged","stateChanged","onStateChanged","widgets","_future","_clear","onIOPub","onReply","onStdin","KernelMessage","onInputRequest","widget","parent","_moveDisplayIdIndices","_preventHeightChangeJitter","_setOutput","count","forEach","indices","rangeEnd","splice","rect","node","getBoundingClientRect","style","minHeight","height","window","clearTimeout","setTimeout","future","factory","stdinPrompt","prompt","password","panel","Panel","createOutputPrompt","addWidget","input","createStdin","then","renderer","mimeType","preferredMimeType","renderModel","currentPreferredMimetype","isIsolated","IsolatedRenderer","separatorModel","onClick","_showTrimmedOutputs","separator","createOutputItem","addEventListener","insertWidget","_createOutput","removeWidgetAt","toggleClass","executionCount","createRenderedMimetype","createRenderer","catch","error","pre","document","createElement","textContent","message","appendChild","className","setAttribute","SimplifiedOutputArea","execute","async","code","sessionContext","_a","stopOnError","tags","indexOf","stop_on_error","kernel","session","requestExecute","done","mimeMd","OutputPrompt","Stdin","_executionCount","createInputWidgetNode","_promise","PromiseDelegate","_input","getElementsByTagName","focus","_value","promise","event","keyCode","sendInputReply","resolve","update","removeEventListener","promptNode","wrapped","_wrapped","iframe","frameBorder","scrolling","contentDocument","open","write","innerHTML","close","body","scrollHeight","heightChangeObserver","observe","AttachedProperty","create","owner"],"mappings":"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","file":"9522.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values !== void 0) {\n            each(options.values, value => {\n                this._array.push(value);\n            });\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        return new ArrayIterator(this._array);\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        ArrayExt.insert(this._array, index, value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable or array-like set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        each(values, value => {\n            this._array.push(value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        each(values, value => {\n            ArrayExt.insert(this._array, index++, value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each, map, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableList } from '@jupyterlab/observables';\nimport { OutputModel } from '@jupyterlab/rendermime';\nimport { JSONExt } from '@lumino/coreutils';\n/**\n * The default implementation of the IOutputAreaModel.\n */\nexport class OutputAreaModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        /**\n         * A flag that is set when we want to clear the output area\n         * *after* the next addition to it.\n         */\n        this.clearNext = false;\n        this._trusted = false;\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._trusted = !!options.trusted;\n        this.contentFactory =\n            options.contentFactory || OutputAreaModel.defaultContentFactory;\n        this.list = new ObservableList();\n        if (options.values) {\n            each(options.values, value => {\n                this._add(value);\n            });\n        }\n        this.list.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this.list ? this.list.length : 0;\n    }\n    /**\n     * Get whether the model is trusted.\n     */\n    get trusted() {\n        return this._trusted;\n    }\n    /**\n     * Set whether the model is trusted.\n     *\n     * #### Notes\n     * Changing the value will cause all of the models to re-set.\n     */\n    set trusted(value) {\n        if (value === this._trusted) {\n            return;\n        }\n        const trusted = (this._trusted = value);\n        for (let i = 0; i < this.list.length; i++) {\n            let item = this.list.get(i);\n            const value = item.toJSON();\n            item.dispose();\n            item = this._createItem({ value, trusted });\n            this.list.set(i, item);\n        }\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this.list.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Get an item at the specified index.\n     */\n    get(index) {\n        return this.list.get(index);\n    }\n    /**\n     * Set the value at the specified index.\n     */\n    set(index, value) {\n        value = JSONExt.deepCopy(value);\n        // Normalize stream data.\n        Private.normalize(value);\n        const item = this._createItem({ value, trusted: this._trusted });\n        this.list.set(index, item);\n    }\n    /**\n     * Add an output, which may be combined with previous output.\n     *\n     * @returns The total number of outputs.\n     *\n     * #### Notes\n     * The output bundle is copied.\n     * Contiguous stream outputs of the same `name` are combined.\n     */\n    add(output) {\n        // If we received a delayed clear message, then clear now.\n        if (this.clearNext) {\n            this.clear();\n            this.clearNext = false;\n        }\n        return this._add(output);\n    }\n    /**\n     * Clear all of the output.\n     *\n     * @param wait Delay clearing the output until the next message is added.\n     */\n    clear(wait = false) {\n        this._lastStream = '';\n        if (wait) {\n            this.clearNext = true;\n            return;\n        }\n        each(this.list, (item) => {\n            item.dispose();\n        });\n        this.list.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        each(values, value => {\n            this._add(value);\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        return toArray(map(this.list, (output) => output.toJSON()));\n    }\n    /**\n     * Add a copy of the item to the list.\n     */\n    _add(value) {\n        const trusted = this._trusted;\n        value = JSONExt.deepCopy(value);\n        // Normalize the value.\n        Private.normalize(value);\n        // Consolidate outputs if they are stream outputs of the same kind.\n        if (nbformat.isStream(value) &&\n            this._lastStream &&\n            value.name === this._lastName &&\n            this.shouldCombine({\n                value,\n                lastModel: this.list.get(this.length - 1)\n            })) {\n            // In order to get a list change event, we add the previous\n            // text to the current item and replace the previous item.\n            // This also replaces the metadata of the last item.\n            this._lastStream += value.text;\n            this._lastStream = Private.removeOverwrittenChars(this._lastStream);\n            value.text = this._lastStream;\n            const item = this._createItem({ value, trusted });\n            const index = this.length - 1;\n            const prev = this.list.get(index);\n            prev.dispose();\n            this.list.set(index, item);\n            return index;\n        }\n        if (nbformat.isStream(value)) {\n            value.text = Private.removeOverwrittenChars(value.text);\n        }\n        // Create the new item.\n        const item = this._createItem({ value, trusted });\n        // Update the stream information.\n        if (nbformat.isStream(value)) {\n            this._lastStream = value.text;\n            this._lastName = value.name;\n        }\n        else {\n            this._lastStream = '';\n        }\n        // Add the item to our list and return the new length.\n        return this.list.push(item);\n    }\n    /**\n     * Whether a new value should be consolidated with the previous output.\n     *\n     * This will only be called if the minimal criteria of both being stream\n     * messages of the same type.\n     */\n    shouldCombine(options) {\n        return true;\n    }\n    /**\n     * Create an output item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createOutputModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onListChanged(sender, args) {\n        this._changed.emit(args);\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for OutputAreaModel class statics.\n */\n(function (OutputAreaModel) {\n    /**\n     * The default implementation of a `IModelOutputFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output model.\n         */\n        createOutputModel(options) {\n            return new OutputModel(options);\n        }\n    }\n    OutputAreaModel.ContentFactory = ContentFactory;\n    /**\n     * The default output model factory.\n     */\n    OutputAreaModel.defaultContentFactory = new ContentFactory();\n})(OutputAreaModel || (OutputAreaModel = {}));\n/**\n * A namespace for module-private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Normalize an output.\n     */\n    function normalize(value) {\n        if (nbformat.isStream(value)) {\n            if (Array.isArray(value.text)) {\n                value.text = value.text.join('\\n');\n            }\n        }\n    }\n    Private.normalize = normalize;\n    /**\n     * Remove characters that are overridden by backspace characters.\n     */\n    function fixBackspace(txt) {\n        let tmp = txt;\n        do {\n            txt = tmp;\n            // Cancel out anything-but-newline followed by backspace\n            tmp = txt.replace(/[^\\n]\\x08/gm, ''); // eslint-disable-line no-control-regex\n        } while (tmp.length < txt.length);\n        return txt;\n    }\n    /**\n     * Remove chunks that should be overridden by the effect of\n     * carriage return characters.\n     */\n    function fixCarriageReturn(txt) {\n        txt = txt.replace(/\\r+\\n/gm, '\\n'); // \\r followed by \\n --> newline\n        while (txt.search(/\\r[^$]/g) > -1) {\n            const base = txt.match(/^(.*)\\r+/m)[1];\n            let insert = txt.match(/\\r+(.*)$/m)[1];\n            insert = insert + base.slice(insert.length, base.length);\n            txt = txt.replace(/\\r+.*$/m, '\\r').replace(/^.*\\r/m, insert);\n        }\n        return txt;\n    }\n    /*\n     * Remove characters overridden by backspaces and carriage returns\n     */\n    function removeOverwrittenChars(text) {\n        return fixCarriageReturn(fixBackspace(text));\n    }\n    Private.removeOverwrittenChars = removeOverwrittenChars;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { PromiseDelegate } from '@lumino/coreutils';\nimport { AttachedProperty } from '@lumino/properties';\nimport { Signal } from '@lumino/signaling';\nimport { Panel, PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The class name added to an output area widget.\n */\nconst OUTPUT_AREA_CLASS = 'jp-OutputArea';\n/**\n * The class name added to the direction children of OutputArea\n */\nconst OUTPUT_AREA_ITEM_CLASS = 'jp-OutputArea-child';\n/**\n * The class name added to actual outputs\n */\nconst OUTPUT_AREA_OUTPUT_CLASS = 'jp-OutputArea-output';\n/**\n * The class name added to prompt children of OutputArea.\n */\nconst OUTPUT_AREA_PROMPT_CLASS = 'jp-OutputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-OutputPrompt';\n/**\n * The class name added to an execution result.\n */\nconst EXECUTE_CLASS = 'jp-OutputArea-executeResult';\n/**\n * The class name added stdin items of OutputArea\n */\nconst OUTPUT_AREA_STDIN_ITEM_CLASS = 'jp-OutputArea-stdin-item';\n/**\n * The class name added to stdin widgets.\n */\nconst STDIN_CLASS = 'jp-Stdin';\n/**\n * The class name added to stdin data prompt nodes.\n */\nconst STDIN_PROMPT_CLASS = 'jp-Stdin-prompt';\n/**\n * The class name added to stdin data input nodes.\n */\nconst STDIN_INPUT_CLASS = 'jp-Stdin-input';\n/** ****************************************************************************\n * OutputArea\n ******************************************************************************/\n/**\n * An output area widget.\n *\n * #### Notes\n * The widget model must be set separately and can be changed\n * at any time.  Consumers of the widget must account for a\n * `null` model, and may want to listen to the `modelChanged`\n * signal.\n */\nexport class OutputArea extends Widget {\n    /**\n     * Construct an output area widget.\n     */\n    constructor(options) {\n        super();\n        /**\n         * A public signal used to indicate the number of outputs has changed.\n         *\n         * #### Notes\n         * This is useful for parents who want to apply styling based on the number\n         * of outputs. Emits the current number of outputs.\n         */\n        this.outputLengthChanged = new Signal(this);\n        /**\n         * Handle an iopub message.\n         */\n        this._onIOPub = (msg) => {\n            const model = this.model;\n            const msgType = msg.header.msg_type;\n            let output;\n            const transient = (msg.content.transient || {});\n            const displayId = transient['display_id'];\n            let targets;\n            switch (msgType) {\n                case 'execute_result':\n                case 'display_data':\n                case 'stream':\n                case 'error':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: msgType });\n                    model.add(output);\n                    break;\n                case 'clear_output': {\n                    const wait = msg.content.wait;\n                    model.clear(wait);\n                    break;\n                }\n                case 'update_display_data':\n                    output = Object.assign(Object.assign({}, msg.content), { output_type: 'display_data' });\n                    targets = this._displayIdMap.get(displayId);\n                    if (targets) {\n                        for (const index of targets) {\n                            model.set(index, output);\n                        }\n                    }\n                    break;\n                default:\n                    break;\n            }\n            if (displayId && msgType === 'display_data') {\n                targets = this._displayIdMap.get(displayId) || [];\n                targets.push(model.length - 1);\n                this._displayIdMap.set(displayId, targets);\n            }\n        };\n        /**\n         * Handle an execute reply message.\n         */\n        this._onExecuteReply = (msg) => {\n            // API responses that contain a pager are special cased and their type\n            // is overridden from 'execute_reply' to 'display_data' in order to\n            // render output.\n            const model = this.model;\n            const content = msg.content;\n            if (content.status !== 'ok') {\n                return;\n            }\n            const payload = content && content.payload;\n            if (!payload || !payload.length) {\n                return;\n            }\n            const pages = payload.filter((i) => i.source === 'page');\n            if (!pages.length) {\n                return;\n            }\n            const page = JSON.parse(JSON.stringify(pages[0]));\n            const output = {\n                output_type: 'display_data',\n                data: page.data,\n                metadata: {}\n            };\n            model.add(output);\n        };\n        this._minHeightTimeout = null;\n        this._displayIdMap = new Map();\n        const model = (this.model = options.model);\n        this.addClass(OUTPUT_AREA_CLASS);\n        this.rendermime = options.rendermime;\n        this.contentFactory =\n            options.contentFactory || OutputArea.defaultContentFactory;\n        this.layout = new PanelLayout();\n        this.trimmedOutputModels = new Array();\n        this.maxNumberOutputs = options.maxNumberOutputs || 0;\n        this.headTailNumberOutputs = Math.round(this.maxNumberOutputs / 2);\n        this.headEndIndex = this.headTailNumberOutputs;\n        for (let i = 0; i < model.length; i++) {\n            const output = model.get(i);\n            this._insertOutput(i, output);\n        }\n        model.changed.connect(this.onModelChanged, this);\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * A read-only sequence of the chidren widgets in the output area.\n     */\n    get widgets() {\n        return this.layout.widgets;\n    }\n    /**\n     * The kernel future associated with the output area.\n     */\n    get future() {\n        return this._future;\n    }\n    set future(value) {\n        // Bail if the model is disposed.\n        if (this.model.isDisposed) {\n            throw Error('Model is disposed');\n        }\n        if (this._future === value) {\n            return;\n        }\n        if (this._future) {\n            this._future.dispose();\n        }\n        this._future = value;\n        this.model.clear();\n        // Make sure there were no input widgets.\n        if (this.widgets.length) {\n            this._clear();\n            this.outputLengthChanged.emit(this.model.length);\n        }\n        // Handle published messages.\n        value.onIOPub = this._onIOPub;\n        // Handle the execute reply.\n        value.onReply = this._onExecuteReply;\n        // Handle stdin.\n        value.onStdin = msg => {\n            if (KernelMessage.isInputRequestMsg(msg)) {\n                this.onInputRequest(msg, value);\n            }\n        };\n    }\n    /**\n     * Dispose of the resources used by the output area.\n     */\n    dispose() {\n        if (this._future) {\n            this._future.dispose();\n            this._future = null;\n        }\n        this._displayIdMap.clear();\n        super.dispose();\n    }\n    /**\n     * Follow changes on the model state.\n     */\n    onModelChanged(sender, args) {\n        switch (args.type) {\n            case 'add':\n                this._insertOutput(args.newIndex, args.newValues[0]);\n                this.outputLengthChanged.emit(this.model.length);\n                break;\n            case 'remove':\n                if (this.widgets.length) {\n                    // all items removed from model\n                    if (this.model.length === 0) {\n                        this._clear();\n                    }\n                    else {\n                        // range of items removed from model\n                        // remove widgets corresponding to removed model items\n                        const startIndex = args.oldIndex;\n                        for (let i = 0; i < args.oldValues.length && startIndex < this.widgets.length; ++i) {\n                            const widget = this.widgets[startIndex];\n                            widget.parent = null;\n                            widget.dispose();\n                        }\n                        // apply item offset to target model item indices in _displayIdMap\n                        this._moveDisplayIdIndices(startIndex, args.oldValues.length);\n                        // prevent jitter caused by immediate height change\n                        this._preventHeightChangeJitter();\n                    }\n                    this.outputLengthChanged.emit(this.model.length);\n                }\n                break;\n            case 'set':\n                this._setOutput(args.newIndex, args.newValues[0]);\n                this.outputLengthChanged.emit(this.model.length);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Update indices in _displayIdMap in response to element remove from model items\n     * *\n     * @param startIndex - The index of first element removed\n     *\n     * @param count - The number of elements removed from model items\n     *\n     */\n    _moveDisplayIdIndices(startIndex, count) {\n        this._displayIdMap.forEach((indices) => {\n            const rangeEnd = startIndex + count;\n            const numIndices = indices.length;\n            // reverse loop in order to prevent removing element affecting the index\n            for (let i = numIndices - 1; i >= 0; --i) {\n                const index = indices[i];\n                // remove model item indices in removed range\n                if (index >= startIndex && index < rangeEnd) {\n                    indices.splice(i, 1);\n                }\n                else if (index >= rangeEnd) {\n                    // move model item indices that were larger than range end\n                    indices[i] -= count;\n                }\n            }\n        });\n    }\n    /**\n     * Follow changes on the output model state.\n     */\n    onStateChanged(sender) {\n        this.trimmedOutputModels = new Array();\n        for (let i = 0; i < this.model.length; i++) {\n            this._setOutput(i, this.model.get(i));\n        }\n        this.outputLengthChanged.emit(this.model.length);\n    }\n    /**\n     * Clear the widget inputs and outputs.\n     */\n    _clear() {\n        // Bail if there is no work to do.\n        if (!this.widgets.length) {\n            return;\n        }\n        // Remove all of our widgets.\n        const length = this.widgets.length;\n        for (let i = 0; i < length; i++) {\n            const widget = this.widgets[0];\n            widget.parent = null;\n            widget.dispose();\n        }\n        // Clear the display id map.\n        this._displayIdMap.clear();\n        // prevent jitter caused by immediate height change\n        this._preventHeightChangeJitter();\n    }\n    _preventHeightChangeJitter() {\n        // When an output area is cleared and then quickly replaced with new\n        // content (as happens with @interact in widgets, for example), the\n        // quickly changing height can make the page jitter.\n        // We introduce a small delay in the minimum height\n        // to prevent this jitter.\n        const rect = this.node.getBoundingClientRect();\n        this.node.style.minHeight = `${rect.height}px`;\n        if (this._minHeightTimeout) {\n            window.clearTimeout(this._minHeightTimeout);\n        }\n        this._minHeightTimeout = window.setTimeout(() => {\n            if (this.isDisposed) {\n                return;\n            }\n            this.node.style.minHeight = '';\n        }, 50);\n    }\n    /**\n     * Handle an input request from a kernel.\n     */\n    onInputRequest(msg, future) {\n        // Add an output widget to the end.\n        const factory = this.contentFactory;\n        const stdinPrompt = msg.content.prompt;\n        const password = msg.content.password;\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        panel.addClass(OUTPUT_AREA_STDIN_ITEM_CLASS);\n        const prompt = factory.createOutputPrompt();\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        const input = factory.createStdin({\n            prompt: stdinPrompt,\n            password,\n            future\n        });\n        input.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(input);\n        const layout = this.layout;\n        layout.addWidget(panel);\n        /**\n         * Wait for the stdin to complete, add it to the model (so it persists)\n         * and remove the stdin widget.\n         */\n        void input.value.then(value => {\n            // Use stdin as the stream so it does not get combined with stdout.\n            this.model.add({\n                output_type: 'stream',\n                name: 'stdin',\n                text: value + '\\n'\n            });\n            panel.dispose();\n        });\n    }\n    /**\n     * Update an output in the layout in place.\n     */\n    _setOutput(index, model) {\n        const layout = this.layout;\n        const panel = layout.widgets[index];\n        const renderer = (panel.widgets\n            ? panel.widgets[1]\n            : panel);\n        // Check whether it is safe to reuse renderer:\n        // - Preferred mime type has not changed\n        // - Isolation has not changed\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (renderer.renderModel &&\n            Private.currentPreferredMimetype.get(renderer) === mimeType &&\n            OutputArea.isIsolated(mimeType, model.metadata) ===\n                renderer instanceof Private.IsolatedRenderer) {\n            void renderer.renderModel(model);\n        }\n        else {\n            layout.widgets[index].dispose();\n            this._insertOutput(index, model);\n        }\n    }\n    /**\n     * Render and insert a single output into the layout.\n     *\n     * @param index - The index of the output to be inserted.\n     * @param model - The model of the output to be inserted.\n     */\n    _insertOutput(index, model) {\n        if (index === 0) {\n            this.trimmedOutputModels = new Array();\n        }\n        if (index === this.maxNumberOutputs && this.maxNumberOutputs !== 0) {\n            // TODO Improve style of the display message.\n            const separatorModel = this.model.contentFactory.createOutputModel({\n                value: {\n                    output_type: 'display_data',\n                    data: {\n                        'text/html': `\n              <a style=\"margin: 10px; text-decoration: none;\">\n                <pre>Output of this cell has been trimmed on the initial display.</pre>\n                <pre>Displaying the first ${this.maxNumberOutputs} top and last bottom outputs.</pre>\n                <pre>Click on this message to get the complete output.</pre>\n              </a>\n              `\n                    }\n                }\n            });\n            const onClick = () => this._showTrimmedOutputs(this.headTailNumberOutputs);\n            const separator = this.createOutputItem(separatorModel);\n            separator.node.addEventListener('click', onClick);\n            const layout = this.layout;\n            layout.insertWidget(this.headEndIndex, separator);\n        }\n        const output = this._createOutput(model);\n        const layout = this.layout;\n        if (index < this.maxNumberOutputs || this.maxNumberOutputs === 0) {\n            layout.insertWidget(index, output);\n        }\n        else if (index >= this.maxNumberOutputs) {\n            layout.removeWidgetAt(this.headTailNumberOutputs + 1);\n            layout.insertWidget(index, output);\n        }\n        if (index >= this.headTailNumberOutputs && this.maxNumberOutputs !== 0) {\n            this.trimmedOutputModels.push(model);\n        }\n    }\n    _createOutput(model) {\n        let output = this.createOutputItem(model);\n        if (output) {\n            output.toggleClass(EXECUTE_CLASS, model.executionCount !== null);\n        }\n        else {\n            output = new Widget();\n        }\n        return output;\n    }\n    /**\n     * Remove the information message related to the trimmed output\n     * and show all previously trimmed outputs.\n     */\n    _showTrimmedOutputs(headTailNumberOutputs) {\n        const layout = this.layout;\n        layout.removeWidgetAt(headTailNumberOutputs);\n        for (let i = 0; i < this.trimmedOutputModels.length - this.headTailNumberOutputs; i++) {\n            const output = this._createOutput(this.trimmedOutputModels[i]);\n            layout.insertWidget(headTailNumberOutputs + i, output);\n        }\n    }\n    /**\n     * Create an output item with a prompt and actual output\n     *\n     * @returns a rendered widget, or null if we cannot render\n     * #### Notes\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (!output) {\n            return null;\n        }\n        const panel = new Panel();\n        panel.addClass(OUTPUT_AREA_ITEM_CLASS);\n        const prompt = this.contentFactory.createOutputPrompt();\n        prompt.executionCount = model.executionCount;\n        prompt.addClass(OUTPUT_AREA_PROMPT_CLASS);\n        panel.addWidget(prompt);\n        output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        panel.addWidget(output);\n        return panel;\n    }\n    /**\n     * Render a mimetype\n     */\n    createRenderedMimetype(model) {\n        const mimeType = this.rendermime.preferredMimeType(model.data, model.trusted ? 'any' : 'ensure');\n        if (!mimeType) {\n            return null;\n        }\n        let output = this.rendermime.createRenderer(mimeType);\n        const isolated = OutputArea.isIsolated(mimeType, model.metadata);\n        if (isolated === true) {\n            output = new Private.IsolatedRenderer(output);\n        }\n        Private.currentPreferredMimetype.set(output, mimeType);\n        output.renderModel(model).catch(error => {\n            // Manually append error message to output\n            const pre = document.createElement('pre');\n            pre.textContent = `Javascript Error: ${error.message}`;\n            output.node.appendChild(pre);\n            // Remove mime-type-specific CSS classes\n            output.node.className = 'lm-Widget jp-RenderedText';\n            output.node.setAttribute('data-mime-type', 'application/vnd.jupyter.stderr');\n        });\n        return output;\n    }\n}\nexport class SimplifiedOutputArea extends OutputArea {\n    /**\n     * Handle an input request from a kernel by doing nothing.\n     */\n    onInputRequest(msg, future) {\n        return;\n    }\n    /**\n     * Create an output item without a prompt, just the output widgets\n     */\n    createOutputItem(model) {\n        const output = this.createRenderedMimetype(model);\n        if (output) {\n            output.addClass(OUTPUT_AREA_OUTPUT_CLASS);\n        }\n        return output;\n    }\n}\n/**\n * A namespace for OutputArea statics.\n */\n(function (OutputArea) {\n    /**\n     * Execute code on an output area.\n     */\n    async function execute(code, output, sessionContext, metadata) {\n        var _a;\n        // Override the default for `stop_on_error`.\n        let stopOnError = true;\n        if (metadata &&\n            Array.isArray(metadata.tags) &&\n            metadata.tags.indexOf('raises-exception') !== -1) {\n            stopOnError = false;\n        }\n        const content = {\n            code,\n            stop_on_error: stopOnError\n        };\n        const kernel = (_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n        if (!kernel) {\n            throw new Error('Session has no kernel.');\n        }\n        const future = kernel.requestExecute(content, false, metadata);\n        output.future = future;\n        return future.done;\n    }\n    OutputArea.execute = execute;\n    function isIsolated(mimeType, metadata) {\n        const mimeMd = metadata[mimeType];\n        // mime-specific higher priority\n        if (mimeMd && mimeMd['isolated'] !== undefined) {\n            return !!mimeMd['isolated'];\n        }\n        else {\n            // fallback on global\n            return !!metadata['isolated'];\n        }\n    }\n    OutputArea.isIsolated = isIsolated;\n    /**\n     * The default implementation of `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    OutputArea.ContentFactory = ContentFactory;\n    /**\n     * The default `ContentFactory` instance.\n     */\n    OutputArea.defaultContentFactory = new ContentFactory();\n})(OutputArea || (OutputArea = {}));\n/**\n * The default output prompt implementation\n */\nexport class OutputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(OUTPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = '';\n        }\n        else {\n            this.node.textContent = `[${value}]:`;\n        }\n    }\n}\n/**\n * The default stdin widget.\n */\nexport class Stdin extends Widget {\n    /**\n     * Construct a new input widget.\n     */\n    constructor(options) {\n        super({\n            node: Private.createInputWidgetNode(options.prompt, options.password)\n        });\n        this._promise = new PromiseDelegate();\n        this.addClass(STDIN_CLASS);\n        this._input = this.node.getElementsByTagName('input')[0];\n        this._input.focus();\n        this._future = options.future;\n        this._value = options.prompt + ' ';\n    }\n    /**\n     * The value of the widget.\n     */\n    get value() {\n        return this._promise.promise.then(() => this._value);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the dock panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        const input = this._input;\n        if (event.type === 'keydown') {\n            if (event.keyCode === 13) {\n                // Enter\n                this._future.sendInputReply({\n                    status: 'ok',\n                    value: input.value\n                });\n                if (input.type === 'password') {\n                    this._value += Array(input.value.length + 1).join('·');\n                }\n                else {\n                    this._value += input.value;\n                }\n                this._promise.resolve(void 0);\n            }\n        }\n    }\n    /**\n     * Handle `after-attach` messages sent to the widget.\n     */\n    onAfterAttach(msg) {\n        this._input.addEventListener('keydown', this);\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages sent to the widget.\n     */\n    onUpdateRequest(msg) {\n        this._input.focus();\n    }\n    /**\n     * Handle `before-detach` messages sent to the widget.\n     */\n    onBeforeDetach(msg) {\n        this._input.removeEventListener('keydown', this);\n    }\n}\n/** ****************************************************************************\n * Private namespace\n ******************************************************************************/\n/**\n * A namespace for private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create the node for an InputWidget.\n     */\n    function createInputWidgetNode(prompt, password) {\n        const node = document.createElement('div');\n        const promptNode = document.createElement('pre');\n        promptNode.className = STDIN_PROMPT_CLASS;\n        promptNode.textContent = prompt;\n        const input = document.createElement('input');\n        input.className = STDIN_INPUT_CLASS;\n        if (password) {\n            input.type = 'password';\n        }\n        node.appendChild(promptNode);\n        promptNode.appendChild(input);\n        return node;\n    }\n    Private.createInputWidgetNode = createInputWidgetNode;\n    /**\n     * A renderer for IFrame data.\n     */\n    class IsolatedRenderer extends Widget {\n        /**\n         * Create an isolated renderer.\n         */\n        constructor(wrapped) {\n            super({ node: document.createElement('iframe') });\n            this.addClass('jp-mod-isolated');\n            this._wrapped = wrapped;\n            // Once the iframe is loaded, the subarea is dynamically inserted\n            const iframe = this.node;\n            iframe.frameBorder = '0';\n            iframe.scrolling = 'auto';\n            iframe.addEventListener('load', () => {\n                // Workaround needed by Firefox, to properly render svg inside\n                // iframes, see https://stackoverflow.com/questions/10177190/\n                // svg-dynamically-added-to-iframe-does-not-render-correctly\n                iframe.contentDocument.open();\n                // Insert the subarea into the iframe\n                // We must directly write the html. At this point, subarea doesn't\n                // contain any user content.\n                iframe.contentDocument.write(this._wrapped.node.innerHTML);\n                iframe.contentDocument.close();\n                const body = iframe.contentDocument.body;\n                // Adjust the iframe height automatically\n                iframe.style.height = `${body.scrollHeight}px`;\n                iframe.heightChangeObserver = new ResizeObserver(() => {\n                    iframe.style.height = `${body.scrollHeight}px`;\n                });\n                iframe.heightChangeObserver.observe(body);\n            });\n        }\n        /**\n         * Render a mime model.\n         *\n         * @param model - The mime model to render.\n         *\n         * @returns A promise which resolves when rendering is complete.\n         *\n         * #### Notes\n         * This method may be called multiple times during the lifetime\n         * of the widget to update it if and when new data is available.\n         */\n        renderModel(model) {\n            return this._wrapped.renderModel(model);\n        }\n    }\n    Private.IsolatedRenderer = IsolatedRenderer;\n    Private.currentPreferredMimetype = new AttachedProperty({\n        name: 'preferredMimetype',\n        create: owner => ''\n    });\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map"],"sourceRoot":""}