{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/theme-extension/lib/index.js"],"names":["CommandIDs","changeTheme","themeScrollbars","themes","id","autoStart","provides","IThemeManager","requires","ISettingRegistry","optional","ISplashScreen","activate","app","settings","splash","host","shell","commands","key","url","PageConfig","manager","ThemeManager","undefined","themeChanged","connect","sender","args","currentTheme","newValue","document","body","dataset","jpThemeLight","String","isLight","jpThemeName","jpThemeScrollbars","loadCSSOverrides","notifyCommandChanged","addCommand","label","theme","displayName","getDisplayName","isToggled","execute","setTheme","isToggledThemeScrollbars","toggleThemeScrollbars"],"mappings":"yKAOIA,E,6CACJ,SAAWA,GACPA,EAAWC,YAAc,wBACzBD,EAAWE,gBAAkB,4BAFjC,CAGGF,IAAeA,EAAa,KAI/B,MAAMG,EAAS,CACXC,GAAI,yCACJC,WAAW,EACXC,SAAU,EAAAC,cACVC,SAAU,CAAC,EAAAC,kBACXC,SAAU,CAAC,EAAAC,eACXC,SAAU,CAACC,EAAKC,EAAUC,KACtB,MAAMC,EAAOH,EAAII,MACXC,EAAWL,EAAIK,SACfC,EAAMhB,EAAOC,GACbgB,EAAM,EAAAC,WAAA,UAAqB,aAC3BC,EAAU,IAAI,EAAAC,aAAa,CAC7BJ,MACAH,OACAF,WACAC,OAAQA,QAAuCA,OAASS,EACxDJ,QAmCJ,OAhCAE,EAAQG,aAAaC,SAAQ,CAACC,EAAQC,KAClC,MAAMC,EAAeD,EAAKE,SAC1BC,SAASC,KAAKC,QAAQC,aAAeC,OAAOb,EAAQc,QAAQP,IAC5DE,SAASC,KAAKC,QAAQI,YAAcR,EAChCE,SAASC,KAAKC,QAAQK,oBACtBH,OAAOb,EAAQpB,gBAAgB2B,MAC/BE,SAASC,KAAKC,QAAQK,kBAAoBH,OAAOb,EAAQpB,gBAAgB2B,KAG7EP,EAAQiB,mBACRrB,EAASsB,qBAAqBxC,EAAWC,gBAE7CiB,EAASuB,WAAWzC,EAAWC,YAAa,CACxCyC,MAAOd,IACH,MAAMe,EAAQf,EAAY,MACpBgB,EAActB,EAAQuB,eAAeF,GAC3C,OAAOf,EAAgB,UAAI,cAAcgB,IAAgBA,GAE7DE,UAAWlB,QAnBXC,IAmBmBD,EAAY,MAC/BmB,QAASnB,IACL,MAAMe,EAAQf,EAAY,MAC1B,GAAIe,IAAUrB,EAAQqB,MAGtB,OAAOrB,EAAQ0B,SAASL,MAGhCzB,EAASuB,WAAWzC,EAAWE,gBAAiB,CAC5CwC,MAAO,mBACPI,UAAW,IAAMxB,EAAQ2B,2BACzBF,QAAS,IAAMzB,EAAQ4B,0BAEpB5B,IAIf,EADgB,CAACnB","file":"2854.bundle.js","sourcesContent":["import { ISplashScreen, IThemeManager } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ThemeManager } from '@jupyterlite/theme';\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.changeTheme = 'apputils:change-theme';\n    CommandIDs.themeScrollbars = 'apputils:theme-scrollbars';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The themes plugin.\n */\nconst themes = {\n    id: '@jupyterlite/apputils-extension:themes',\n    autoStart: true,\n    provides: IThemeManager,\n    requires: [ISettingRegistry],\n    optional: [ISplashScreen],\n    activate: (app, settings, splash) => {\n        const host = app.shell;\n        const commands = app.commands;\n        const key = themes.id;\n        const url = PageConfig.getOption('themesUrl');\n        const manager = new ThemeManager({\n            key,\n            host,\n            settings,\n            splash: splash !== null && splash !== void 0 ? splash : undefined,\n            url\n        });\n        let currentTheme;\n        manager.themeChanged.connect((sender, args) => {\n            const currentTheme = args.newValue;\n            document.body.dataset.jpThemeLight = String(manager.isLight(currentTheme));\n            document.body.dataset.jpThemeName = currentTheme;\n            if (document.body.dataset.jpThemeScrollbars !==\n                String(manager.themeScrollbars(currentTheme))) {\n                document.body.dataset.jpThemeScrollbars = String(manager.themeScrollbars(currentTheme));\n            }\n            // Set any CSS overrides\n            manager.loadCSSOverrides();\n            commands.notifyCommandChanged(CommandIDs.changeTheme);\n        });\n        commands.addCommand(CommandIDs.changeTheme, {\n            label: args => {\n                const theme = args['theme'];\n                const displayName = manager.getDisplayName(theme);\n                return args['isPalette'] ? `Use Theme: ${displayName}` : displayName;\n            },\n            isToggled: args => args['theme'] === currentTheme,\n            execute: args => {\n                const theme = args['theme'];\n                if (theme === manager.theme) {\n                    return;\n                }\n                return manager.setTheme(theme);\n            }\n        });\n        commands.addCommand(CommandIDs.themeScrollbars, {\n            label: 'Theme Scrollbars',\n            isToggled: () => manager.isToggledThemeScrollbars(),\n            execute: () => manager.toggleThemeScrollbars()\n        });\n        return manager;\n    }\n};\nconst plugins = [themes];\nexport default plugins;\n"],"sourceRoot":""}