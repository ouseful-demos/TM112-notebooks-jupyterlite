{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/mutex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/broadcastchannel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/sync.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/lib0/url.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-websocket/src/y-websocket.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/y-protocols/auth.js"],"names":["createMutex","token","f","g","undefined","channels","Map","BC","BroadcastChannel","room","this","onmessage","storage","e","key","data","buffer","newValue","buf","getChannel","map","subs","Set","bc","forEach","sub","publish","c","postMessage","writeSyncStep1","encoder","doc","sv","writeSyncStep2","encodedStateVector","readSyncStep2","decoder","transactionOrigin","decoding","error","console","readUpdate","messageHandlers","provider","emitSynced","messageType","syncMessageType","readSyncStep1","Error","synced","awareness","Array","from","getStates","keys","y","permissionDeniedHandler","reason","warn","url","readMessage","messageHandler","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","event","wsLastMessageReceived","time","Uint8Array","send","onclose","filter","client","clientID","emit","status","wsUnsuccessfulReconnects","setTimeout","math","onopen","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","mux","bcChannel","WebsocketProvider","serverUrl","roomname","connect","params","WebSocketPolyfill","WebSocket","resyncInterval","super","length","slice","encodedParams","object","val","encodeURIComponent","join","mutex","_synced","_resyncInterval","setInterval","_bcSubscriber","_updateHandler","update","origin","on","_awarenessUpdateHandler","added","updated","removed","changedClients","concat","window","addEventListener","_checkInterval","close","messageReconnectTimeout","state","clearInterval","disconnect","off","destroy","add","encoderSync","encoderState","encoderAwarenessQuery","delete","disconnectBc","connectBc"],"mappings":"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","file":"8263.bundle.js","sourcesContent":["/**\n * Mutual exclude for JavaScript.\n *\n * @module mutex\n */\n\n/**\n * @callback mutex\n * @param {function():void} cb Only executed when this mutex is not in the current stack\n * @param {function():void} [elseCb] Executed when this mutex is in the current stack\n */\n\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n *\n * @return {mutex} A mutual exclude function\n * @public\n */\nexport const createMutex = () => {\n  let token = true\n  return (f, g) => {\n    if (token) {\n      token = false\n      try {\n        f()\n      } finally {\n        token = true\n      }\n    } else if (g !== undefined) {\n      g()\n    }\n  }\n}\n","/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js'\nimport * as buffer from './buffer.js'\nimport * as storage from './storage.js'\n\n/**\n * @typedef {Object} Channel\n * @property {Set<Function>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map()\n\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor (room) {\n    this.room = room\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null\n    storage.onChange(e => e.key === room && this.onmessage !== null && this.onmessage({ data: buffer.fromBase64(e.newValue || '') }))\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage (buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)))\n  }\n}\n\n// Use BroadcastChannel or Polyfill\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room =>\n  map.setIfUndefined(channels, room, () => {\n    const subs = new Set()\n    const bc = new BC(room)\n    /**\n     * @param {{data:ArrayBuffer}} e\n     */\n    bc.onmessage = e => subs.forEach(sub => sub(e.data))\n    return {\n      bc, subs\n    }\n  })\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const subscribe = (room, f) => getChannel(room).subs.add(f)\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any):any} f\n */\nexport const unsubscribe = (room, f) => getChannel(room).subs.delete(f)\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n */\nexport const publish = (room, data) => {\n  const c = getChannel(room)\n  c.bc.postMessage(data)\n  c.subs.forEach(sub => sub(data))\n}\n","/**\n * @module sync-protocol\n */\n\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as Y from 'yjs'\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server shoul only reply to requests, and not initiate them.\n * Therefore it is necesarry that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nexport const messageYjsSyncStep1 = 0\nexport const messageYjsSyncStep2 = 1\nexport const messageYjsUpdate = 2\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nexport const writeSyncStep1 = (encoder, doc) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep1)\n  const sv = Y.encodeStateVector(doc)\n  encoding.writeVarUint8Array(encoder, sv)\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nexport const writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  encoding.writeVarUint(encoder, messageYjsSyncStep2)\n  encoding.writeVarUint8Array(encoder, Y.encodeStateAsUpdate(doc, encodedStateVector))\n}\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nexport const readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, decoding.readVarUint8Array(decoder))\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    Y.applyUpdate(doc, decoding.readVarUint8Array(decoder), transactionOrigin)\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error)\n  }\n}\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nexport const writeUpdate = (encoder, update) => {\n  encoding.writeVarUint(encoder, messageYjsUpdate)\n  encoding.writeVarUint8Array(encoder, update)\n}\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readUpdate = readSyncStep2\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Will not be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nexport const readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = decoding.readVarUint(decoder)\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc)\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin)\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin)\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n}\n","/**\n * Utility module to work with urls.\n *\n * @module url\n */\n\nimport * as object from './object.js'\n\n/**\n * Parse query parameters from an url.\n *\n * @param {string} url\n * @return {Object<string,string>}\n */\nexport const decodeQueryParams = url => {\n  /**\n   * @type {Object<string,string>}\n   */\n  const query = {}\n  const urlQuerySplit = url.split('?')\n  const pairs = urlQuerySplit[urlQuerySplit.length - 1].split('&')\n  for (var i = 0; i < pairs.length; i++) {\n    const item = pairs[i]\n    if (item.length > 0) {\n      const pair = item.split('=')\n      query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '')\n    }\n  }\n  return query\n}\n\n/**\n * @param {Object<string,string>} params\n * @return {string}\n */\nexport const encodeQueryParams = params =>\n  object.map(params, (val, key) => `${encodeURIComponent(key)}=${encodeURIComponent(val)}`).join('&')\n","/*\nUnlike stated in the LICENSE file, it is not necessary to include the copyright notice and permission notice when you copy code from this file.\n*/\n\n/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport * as mutex from 'lib0/mutex'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nconst messageSync = 0\nconst messageQueryAwareness = 3\nconst messageAwareness = 1\nconst messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider)\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())))\n}\n\nmessageHandlers[messageAwareness] = (encoder, decoder, provider, emitSynced, messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider)\n}\n\nmessageHandlers[messageAuth] = (encoder, decoder, provider, emitSynced, messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, permissionDeniedHandler)\n}\n\nconst reconnectTimeoutBase = 1200\nconst maxReconnectTimeout = 2500\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onclose = () => {\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider)\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // log10(wsUnsuccessfulReconnects).\n      // The idea is to increase reconnect timeout slowly and have no reconnect\n      // timeout at the beginning (log(1) = 0)\n      setTimeout(setupWS, math.min(math.log10(provider.wsUnsuccessfulReconnects + 1) * reconnectTimeoutBase, maxReconnectTimeout), provider)\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]))\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    provider.mux(() => {\n      bc.publish(provider.bcChannel, buf)\n    })\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   */\n  constructor (serverUrl, roomname, doc, { connect = true, awareness = new awarenessProtocol.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1 } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    this.mux = mutex.createMutex()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     */\n    this._bcSubscriber = data => {\n      this.mux(() => {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder))\n        }\n      })\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients))\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('beforeunload', () => {\n        awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload')\n      })\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    this.mux(() => {\n      // write sync step 1\n      const encoderSync = encoding.createEncoder()\n      encoding.writeVarUint(encoderSync, messageSync)\n      syncProtocol.writeSyncStep1(encoderSync, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync))\n      // broadcast local state\n      const encoderState = encoding.createEncoder()\n      encoding.writeVarUint(encoderState, messageSync)\n      syncProtocol.writeSyncStep2(encoderState, this.doc)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderState))\n      // write queryAwareness\n      const encoderAwarenessQuery = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery))\n      // broadcast local awareness state\n      const encoderAwarenessState = encoding.createEncoder()\n      encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n      encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]))\n      bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState))\n    })\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()))\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n","\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\n\nexport const messagePermissionDenied = 0\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */\nexport const writePermissionDenied = (encoder, reason) => {\n  encoding.writeVarUint(encoder, messagePermissionDenied)\n  encoding.writeVarString(encoder, reason)\n}\n\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */\n\n/**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */\nexport const readAuthMessage = (decoder, y, permissionDeniedHandler) => {\n  switch (decoding.readVarUint(decoder)) {\n    case messagePermissionDenied: permissionDeniedHandler(y, decoding.readVarString(decoder))\n  }\n}\n"],"sourceRoot":""}