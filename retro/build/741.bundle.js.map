{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablejson.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/observables/lib/observablemap.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/attachmentmodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/factories.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/latex.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/mimemodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/outputmodel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/registry.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/renderers.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@jupyterlab/rendermime/lib/widgets.js"],"names":["ObservableJSON","options","super","itemCmp","JSONExt","values","out","Object","create","keys","this","key","value","get","undefined","ChangeMessage","Message","type","args","Private","ObservableMap","_map","Map","_changed","Signal","_isDisposed","_itemCmp","set","size","oldVal","Error","emit","oldValue","newValue","has","keyList","forEach","v","k","push","valList","delete","i","length","isDisposed","clear","first","second","AttachmentModel","trusted","_raw","data","getData","_data","_rawData","extract","dispose","_updateObservable","attachment","observable","oldKeys","newKeys","indexOf","bundle","map","mimeType","convertBundle","item","getBundleOptions","htmlRendererFactory","safe","mimeTypes","defaultRank","createRenderer","imageRendererFactory","latexRendererFactory","markdownRendererFactory","svgRendererFactory","textRendererFactory","javaScriptRendererFactory","standardRendererFactories","MATHSPLIT","removeMath","text","math","deTilde","start","end","last","braces","test","replace","wholematch","character","blocks","split","m","block","charAt","processMath","match","slice","substr","join","replaceMath","n","group","substring","j","preProcess","navigator","appName","MimeModel","_metadata","metadata","_callback","callback","noOp","OutputModel","_rawMetadata","output_type","executionCount","execution_count","output","getMetadata","name","traceback","ename","evalue","JSON","parse","stringify","RenderMimeRegistry","_id","_ranks","_types","_factories","translator","nullTranslator","resolver","linkHandler","latexTypesetter","sanitizer","defaultSanitizer","initialFactories","factory","addFactory","sortedTypes","mt","clone","assign","rank","id","UrlResolver","path","_path","session","_session","_contents","contents","_a","url","isLocal","cwd","encodeURI","PathExt","urlPath","getDownloadUrl","decodeURIComponent","decodeURI","URLExt","driveName","sort","a","b","p1","p2","sessionConnection","s","sessionChanged","renderHTML","host","source","shouldTypeset","trans","load","promise","originalSource","textContent","Promise","resolve","sanitize","innerHTML","getElementsByTagName","evalInnerHTMLScriptTags","container","document","createElement","warning","__","runButton","onclick","event","firstChild","removeChild","appendChild","insertBefore","handleDefaults","handleUrls","then","typeset","renderImage","width","height","needsBackground","unconfined","img","src","classList","add","renderLatex","async","renderMarkdown","others","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","__rest","parts","html","renderMarked","headerAnchors","renderSVG","search","Image","encodeURIComponent","renderText","content","ansiSpan","allowedTags","pre","controlCodes","webLinkRegex","RegExp","lastChars","endsWithGtLt","toAppend","len","autolink","handleAttr","node","getAttribute","resolveUrl","protocol","Date","getTime","setAttribute","err","handleAnchor","anchor","href","hash","target","handleLink","catch","scripts","toArray","script","parentNode","attrs","attributes","replaceChild","markedInitialized","gfm","langPrefix","CodeMirrorEditor","highlight","code","lang","cb","Mode","spec","el","console","error","mime","reject","anchors","HTMLAnchorElement","rel","imgs","alt","promises","nodes","querySelectorAll","links","all","headerNames","headerType","headers","header","ANSI_COLORS","pushColoredChunk","chunk","fg","bg","bold","underline","inverse","classes","styles","getExtendedColors","numbers","r","g","shift","some","c","RangeError","idx","Math","floor","str","ansiRe","exec","items","parseInt","index","lastIndex","IRenderMimeRegistry","Token","ILatexTypesetter","RenderedCommon","Widget","dataset","model","toggleClass","render","fragment","setFragment","RenderedHTMLCommon","addClass","querySelector","warn","scrollIntoView","RenderedHTML","String","isAttached","msg","RenderedLatex","RenderedImage","RenderedMarkdown","RenderedSVG","RenderedText","RenderedJavaScript"],"mappings":"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","file":"741.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { Message } from '@lumino/messaging';\nimport { ObservableMap } from './observablemap';\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap {\n    /**\n     * Construct a new observable JSON object.\n     */\n    constructor(options = {}) {\n        super({\n            itemCmp: JSONExt.deepEqual,\n            values: options.values\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const out = Object.create(null);\n        const keys = this.keys();\n        for (const key of keys) {\n            const value = this.get(key);\n            if (value !== undefined) {\n                out[key] = JSONExt.deepCopy(value);\n            }\n        }\n        return out;\n    }\n}\n/**\n * The namespace for ObservableJSON static data.\n */\n(function (ObservableJSON) {\n    /**\n     * An observable JSON change message.\n     */\n    class ChangeMessage extends Message {\n        /**\n         * Create a new metadata changed message.\n         */\n        constructor(type, args) {\n            super(type);\n            this.args = args;\n        }\n    }\n    ObservableJSON.ChangeMessage = ChangeMessage;\n})(ObservableJSON || (ObservableJSON = {}));\n//# sourceMappingURL=observablejson.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservbleMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ObservableJSON } from '@jupyterlab/observables';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of a notebook attachment model.\n */\nexport class AttachmentModel {\n    /**\n     * Construct a new attachment model.\n     */\n    constructor(options) {\n        // All attachments are untrusted\n        this.trusted = false;\n        this._changed = new Signal(this);\n        this._raw = {};\n        const data = Private.getData(options.value);\n        this._data = new ObservableJSON({ values: data });\n        this._rawData = data;\n        // Make a copy of the data.\n        const value = options.value;\n        for (const key in value) {\n            // Ignore data and metadata that were stripped.\n            switch (key) {\n                case 'data':\n                    break;\n                default:\n                    this._raw[key] = Private.extract(value, key);\n            }\n        }\n    }\n    /**\n     * A signal emitted when the attachment model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources used by the attachment model.\n     */\n    dispose() {\n        this._data.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._rawData;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return {};\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        if (options.data) {\n            this._updateObservable(this._data, options.data);\n            this._rawData = options.data;\n        }\n        this._changed.emit(void 0);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const attachment = {};\n        for (const key in this._raw) {\n            attachment[key] = Private.extract(this._raw, key);\n        }\n        return attachment;\n    }\n    /**\n     * Update an observable JSON object using a readonly JSON object.\n     */\n    _updateObservable(observable, data) {\n        const oldKeys = observable.keys();\n        const newKeys = Object.keys(data);\n        // Handle removed keys.\n        for (const key of oldKeys) {\n            if (newKeys.indexOf(key) === -1) {\n                observable.delete(key);\n            }\n        }\n        // Handle changed data.\n        for (const key of newKeys) {\n            const oldValue = observable.get(key);\n            const newValue = data[key];\n            if (oldValue !== newValue) {\n                observable.set(key, newValue);\n            }\n        }\n    }\n}\n/**\n * The namespace for AttachmentModel statics.\n */\n(function (AttachmentModel) {\n    /**\n     * Get the data for an attachment.\n     *\n     * @params bundle - A kernel attachment MIME bundle.\n     *\n     * @returns - The data for the payload.\n     */\n    function getData(bundle) {\n        return Private.getData(bundle);\n    }\n    AttachmentModel.getData = getData;\n})(AttachmentModel || (AttachmentModel = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the data from a notebook attachment.\n     */\n    function getData(bundle) {\n        return convertBundle(bundle);\n    }\n    Private.getData = getData;\n    /**\n     * Get the bundle options given attachment model options.\n     */\n    function getBundleOptions(options) {\n        const data = getData(options.value);\n        return { data };\n    }\n    Private.getBundleOptions = getBundleOptions;\n    /**\n     * Extract a value from a JSONObject.\n     */\n    function extract(value, key) {\n        const item = value[key];\n        if (item === undefined || JSONExt.isPrimitive(item)) {\n            return item;\n        }\n        return JSONExt.deepCopy(item);\n    }\n    Private.extract = extract;\n    /**\n     * Convert a mime bundle to mime data.\n     */\n    function convertBundle(bundle) {\n        const map = Object.create(null);\n        for (const mimeType in bundle) {\n            map[mimeType] = extract(bundle, mimeType);\n        }\n        return map;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=attachmentmodel.js.map","import * as widgets from './widgets';\n/**\n * A mime renderer factory for raw html.\n */\nexport const htmlRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/html'],\n    defaultRank: 50,\n    createRenderer: options => new widgets.RenderedHTML(options)\n};\n/**\n * A mime renderer factory for images.\n */\nexport const imageRendererFactory = {\n    safe: true,\n    mimeTypes: ['image/bmp', 'image/png', 'image/jpeg', 'image/gif'],\n    defaultRank: 90,\n    createRenderer: options => new widgets.RenderedImage(options)\n};\n/**\n * A mime renderer factory for LaTeX.\n */\nexport const latexRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/latex'],\n    defaultRank: 70,\n    createRenderer: options => new widgets.RenderedLatex(options)\n};\n/**\n * A mime renderer factory for Markdown.\n */\nexport const markdownRendererFactory = {\n    safe: true,\n    mimeTypes: ['text/markdown'],\n    defaultRank: 60,\n    createRenderer: options => new widgets.RenderedMarkdown(options)\n};\n/**\n * A mime renderer factory for svg.\n */\nexport const svgRendererFactory = {\n    safe: false,\n    mimeTypes: ['image/svg+xml'],\n    defaultRank: 80,\n    createRenderer: options => new widgets.RenderedSVG(options)\n};\n/**\n * A mime renderer factory for plain and jupyter console text data.\n */\nexport const textRendererFactory = {\n    safe: true,\n    mimeTypes: [\n        'text/plain',\n        'application/vnd.jupyter.stdout',\n        'application/vnd.jupyter.stderr'\n    ],\n    defaultRank: 120,\n    createRenderer: options => new widgets.RenderedText(options)\n};\n/**\n * A placeholder factory for rendered JavaScript.\n */\nexport const javaScriptRendererFactory = {\n    safe: false,\n    mimeTypes: ['text/javascript', 'application/javascript'],\n    defaultRank: 110,\n    createRenderer: options => new widgets.RenderedJavaScript(options)\n};\n/**\n * The standard factories provided by the rendermime package.\n */\nexport const standardRendererFactories = [\n    htmlRendererFactory,\n    markdownRendererFactory,\n    latexRendererFactory,\n    svgRendererFactory,\n    imageRendererFactory,\n    javaScriptRendererFactory,\n    textRendererFactory\n];\n//# sourceMappingURL=factories.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n// Some magic for deferring mathematical expressions to MathJax\n// by hiding them from the Markdown parser.\n// Some of the code here is adapted with permission from Davide Cervone\n// under the terms of the Apache2 license governing the MathJax project.\n// Other minor modifications are also due to StackExchange and are used with\n// permission.\nconst inline = '$'; // the inline math delimiter\n// MATHSPLIT contains the pattern for math delimiters and special symbols\n// needed for searching for math in the text input.\nconst MATHSPLIT = /(\\$\\$?|\\\\(?:begin|end)\\{[a-z]*\\*?\\}|\\\\[{}$]|[{}]|(?:\\n\\s*)+|@@\\d+@@|\\\\\\\\(?:\\(|\\)|\\[|\\]))/i;\n/**\n *  Break up the text into its component parts and search\n *    through them for math delimiters, braces, linebreaks, etc.\n *  Math delimiters must match and braces must balance.\n *  Don't allow math to pass through a double linebreak\n *    (which will be a paragraph).\n */\nexport function removeMath(text) {\n    const math = []; // stores math strings for later\n    let start = null;\n    let end = null;\n    let last = null;\n    let braces = 0;\n    let deTilde;\n    // Except for extreme edge cases, this should catch precisely those pieces of the markdown\n    // source that will later be turned into code spans. While MathJax will not TeXify code spans,\n    // we still have to consider them at this point; the following issue has happened several times:\n    //\n    //     `$foo` and `$bar` are variables.  -->  <code>$foo ` and `$bar</code> are variables.\n    const hasCodeSpans = /`/.test(text);\n    if (hasCodeSpans) {\n        text = text\n            .replace(/~/g, '~T')\n            .replace(/(^|[^\\\\])(`+)([^\\n]*?[^`\\n])\\2(?!`)/gm, wholematch => wholematch.replace(/\\$/g, '~D'));\n        deTilde = (text) => {\n            return text.replace(/~([TD])/g, (wholematch, character) => character === 'T' ? '~' : inline);\n        };\n    }\n    else {\n        deTilde = (text) => {\n            return text;\n        };\n    }\n    let blocks = text.replace(/\\r\\n?/g, '\\n').split(MATHSPLIT);\n    for (let i = 1, m = blocks.length; i < m; i += 2) {\n        const block = blocks[i];\n        if (block.charAt(0) === '@') {\n            //\n            //  Things that look like our math markers will get\n            //  stored and then retrieved along with the math.\n            //\n            blocks[i] = '@@' + math.length + '@@';\n            math.push(block);\n        }\n        else if (start !== null) {\n            //\n            //  If we are in math, look for the end delimiter,\n            //    but don't go past double line breaks, and\n            //    and balance braces within the math.\n            //\n            if (block === end) {\n                if (braces) {\n                    last = i;\n                }\n                else {\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                    start = null;\n                    end = null;\n                    last = null;\n                }\n            }\n            else if (block.match(/\\n.*\\n/)) {\n                if (last !== null) {\n                    i = last;\n                    blocks = processMath(start, i, deTilde, math, blocks);\n                }\n                start = null;\n                end = null;\n                last = null;\n                braces = 0;\n            }\n            else if (block === '{') {\n                braces++;\n            }\n            else if (block === '}' && braces) {\n                braces--;\n            }\n        }\n        else {\n            //\n            //  Look for math start delimiters and when\n            //    found, set up the end delimiter.\n            //\n            if (block === inline || block === '$$') {\n                start = i;\n                end = block;\n                braces = 0;\n            }\n            else if (block === '\\\\\\\\(' || block === '\\\\\\\\[') {\n                start = i;\n                end = block.slice(-1) === '(' ? '\\\\\\\\)' : '\\\\\\\\]';\n                braces = 0;\n            }\n            else if (block.substr(1, 5) === 'begin') {\n                start = i;\n                end = '\\\\end' + block.substr(6);\n                braces = 0;\n            }\n        }\n    }\n    if (start !== null && last !== null) {\n        blocks = processMath(start, last, deTilde, math, blocks);\n        start = null;\n        end = null;\n        last = null;\n    }\n    return { text: deTilde(blocks.join('')), math };\n}\n/**\n * Put back the math strings that were saved,\n * and clear the math array (no need to keep it around).\n */\nexport function replaceMath(text, math) {\n    /**\n     * Replace a math placeholder with its corresponding group.\n     * The math delimiters \"\\\\(\", \"\\\\[\", \"\\\\)\" and \"\\\\]\" are replaced\n     * removing one backslash in order to be interpreted correctly by MathJax.\n     */\n    const process = (match, n) => {\n        let group = math[n];\n        if (group.substr(0, 3) === '\\\\\\\\(' &&\n            group.substr(group.length - 3) === '\\\\\\\\)') {\n            group = '\\\\(' + group.substring(3, group.length - 3) + '\\\\)';\n        }\n        else if (group.substr(0, 3) === '\\\\\\\\[' &&\n            group.substr(group.length - 3) === '\\\\\\\\]') {\n            group = '\\\\[' + group.substring(3, group.length - 3) + '\\\\]';\n        }\n        return group;\n    };\n    // Replace all the math group placeholders in the text\n    // with the saved strings.\n    return text.replace(/@@(\\d+)@@/g, process);\n}\n/**\n * Process math blocks.\n *\n * The math is in blocks i through j, so\n *   collect it into one block and clear the others.\n *  Replace &, <, and > by named entities.\n *  For IE, put <br> at the ends of comments since IE removes \\n.\n *  Clear the current math positions and store the index of the\n *   math, then push the math string onto the storage array.\n *  The preProcess function is called on all blocks if it has been passed in\n */\nfunction processMath(i, j, preProcess, math, blocks) {\n    let block = blocks\n        .slice(i, j + 1)\n        .join('')\n        .replace(/&/g, '&amp;') // use HTML entity for &\n        .replace(/</g, '&lt;') // use HTML entity for <\n        .replace(/>/g, '&gt;'); // use HTML entity for >\n    if (navigator && navigator.appName === 'Microsoft Internet Explorer') {\n        block = block.replace(/(%[^\\n]*)\\n/g, '$1<br/>\\n');\n    }\n    while (j > i) {\n        blocks[j] = '';\n        j--;\n    }\n    blocks[i] = '@@' + math.length + '@@'; // replace the current block text with a unique tag to find later\n    if (preProcess) {\n        block = preProcess(block);\n    }\n    math.push(block);\n    return blocks;\n}\n//# sourceMappingURL=latex.js.map","/**\n * The default mime model implementation.\n */\nexport class MimeModel {\n    /**\n     * Construct a new mime model.\n     */\n    constructor(options = {}) {\n        this.trusted = !!options.trusted;\n        this._data = options.data || {};\n        this._metadata = options.metadata || {};\n        this._callback = options.callback || Private.noOp;\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._data;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return this._metadata;\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        this._data = options.data || this._data;\n        this._metadata = options.metadata || this._metadata;\n        this._callback(options);\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * A no-op callback function.\n     */\n    function noOp() {\n        /* no-op */\n    }\n    Private.noOp = noOp;\n})(Private || (Private = {}));\n//# sourceMappingURL=mimemodel.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { ObservableJSON } from '@jupyterlab/observables';\n/**\n * The default implementation of a notebook output model.\n */\nexport class OutputModel {\n    /**\n     * Construct a new output model.\n     */\n    constructor(options) {\n        this._changed = new Signal(this);\n        this._raw = {};\n        const { data, metadata, trusted } = Private.getBundleOptions(options);\n        this._data = new ObservableJSON({ values: data });\n        this._rawData = data;\n        this._metadata = new ObservableJSON({ values: metadata });\n        this._rawMetadata = metadata;\n        this.trusted = trusted;\n        // Make a copy of the data.\n        const value = options.value;\n        for (const key in value) {\n            // Ignore data and metadata that were stripped.\n            switch (key) {\n                case 'data':\n                case 'metadata':\n                    break;\n                default:\n                    this._raw[key] = Private.extract(value, key);\n            }\n        }\n        this.type = value.output_type;\n        if (nbformat.isExecuteResult(value)) {\n            this.executionCount = value.execution_count;\n        }\n        else {\n            this.executionCount = null;\n        }\n    }\n    /**\n     * A signal emitted when the output model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Dispose of the resources used by the output model.\n     */\n    dispose() {\n        this._data.dispose();\n        this._metadata.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * The data associated with the model.\n     */\n    get data() {\n        return this._rawData;\n    }\n    /**\n     * The metadata associated with the model.\n     */\n    get metadata() {\n        return this._rawMetadata;\n    }\n    /**\n     * Set the data associated with the model.\n     *\n     * #### Notes\n     * Depending on the implementation of the mime model,\n     * this call may or may not have deferred effects,\n     */\n    setData(options) {\n        if (options.data) {\n            this._updateObservable(this._data, options.data);\n            this._rawData = options.data;\n        }\n        if (options.metadata) {\n            this._updateObservable(this._metadata, options.metadata);\n            this._rawMetadata = options.metadata;\n        }\n        this._changed.emit(void 0);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const output = {};\n        for (const key in this._raw) {\n            output[key] = Private.extract(this._raw, key);\n        }\n        switch (this.type) {\n            case 'display_data':\n            case 'execute_result':\n            case 'update_display_data':\n                output['data'] = this.data;\n                output['metadata'] = this.metadata;\n                break;\n            default:\n                break;\n        }\n        // Remove transient data.\n        delete output['transient'];\n        return output;\n    }\n    /**\n     * Update an observable JSON object using a readonly JSON object.\n     */\n    _updateObservable(observable, data) {\n        const oldKeys = observable.keys();\n        const newKeys = Object.keys(data);\n        // Handle removed keys.\n        for (const key of oldKeys) {\n            if (newKeys.indexOf(key) === -1) {\n                observable.delete(key);\n            }\n        }\n        // Handle changed data.\n        for (const key of newKeys) {\n            const oldValue = observable.get(key);\n            const newValue = data[key];\n            if (oldValue !== newValue) {\n                observable.set(key, newValue);\n            }\n        }\n    }\n}\n/**\n * The namespace for OutputModel statics.\n */\n(function (OutputModel) {\n    /**\n     * Get the data for an output.\n     *\n     * @params output - A kernel output message payload.\n     *\n     * @returns - The data for the payload.\n     */\n    function getData(output) {\n        return Private.getData(output);\n    }\n    OutputModel.getData = getData;\n    /**\n     * Get the metadata from an output message.\n     *\n     * @params output - A kernel output message payload.\n     *\n     * @returns - The metadata for the payload.\n     */\n    function getMetadata(output) {\n        return Private.getMetadata(output);\n    }\n    OutputModel.getMetadata = getMetadata;\n})(OutputModel || (OutputModel = {}));\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the data from a notebook output.\n     */\n    function getData(output) {\n        let bundle = {};\n        if (nbformat.isExecuteResult(output) ||\n            nbformat.isDisplayData(output) ||\n            nbformat.isDisplayUpdate(output)) {\n            bundle = output.data;\n        }\n        else if (nbformat.isStream(output)) {\n            if (output.name === 'stderr') {\n                bundle['application/vnd.jupyter.stderr'] = output.text;\n            }\n            else {\n                bundle['application/vnd.jupyter.stdout'] = output.text;\n            }\n        }\n        else if (nbformat.isError(output)) {\n            bundle['application/vnd.jupyter.error'] = output;\n            const traceback = output.traceback.join('\\n');\n            bundle['application/vnd.jupyter.stderr'] =\n                traceback || `${output.ename}: ${output.evalue}`;\n        }\n        return convertBundle(bundle);\n    }\n    Private.getData = getData;\n    /**\n     * Get the metadata from an output message.\n     */\n    function getMetadata(output) {\n        const value = Object.create(null);\n        if (nbformat.isExecuteResult(output) || nbformat.isDisplayData(output)) {\n            for (const key in output.metadata) {\n                value[key] = extract(output.metadata, key);\n            }\n        }\n        return value;\n    }\n    Private.getMetadata = getMetadata;\n    /**\n     * Get the bundle options given output model options.\n     */\n    function getBundleOptions(options) {\n        const data = getData(options.value);\n        const metadata = getMetadata(options.value);\n        const trusted = !!options.trusted;\n        return { data, metadata, trusted };\n    }\n    Private.getBundleOptions = getBundleOptions;\n    /**\n     * Extract a value from a JSONObject.\n     */\n    function extract(value, key) {\n        const item = value[key];\n        if (item === undefined || JSONExt.isPrimitive(item)) {\n            return item;\n        }\n        return JSON.parse(JSON.stringify(item));\n    }\n    Private.extract = extract;\n    /**\n     * Convert a mime bundle to mime data.\n     */\n    function convertBundle(bundle) {\n        const map = Object.create(null);\n        for (const mimeType in bundle) {\n            map[mimeType] = extract(bundle, mimeType);\n        }\n        return map;\n    }\n})(Private || (Private = {}));\n//# sourceMappingURL=outputmodel.js.map","import { PathExt, URLExt } from '@jupyterlab/coreutils';\nimport { defaultSanitizer } from '@jupyterlab/apputils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { MimeModel } from './mimemodel';\n/**\n * An object which manages mime renderer factories.\n *\n * This object is used to render mime models using registered mime\n * renderers, selecting the preferred mime renderer to render the\n * model into a widget.\n *\n * #### Notes\n * This class is not intended to be subclassed.\n */\nexport class RenderMimeRegistry {\n    /**\n     * Construct a new rendermime.\n     *\n     * @param options - The options for initializing the instance.\n     */\n    constructor(options = {}) {\n        this._id = 0;\n        this._ranks = {};\n        this._types = null;\n        this._factories = {};\n        // Parse the options.\n        this.translator = options.translator || nullTranslator;\n        this.resolver = options.resolver || null;\n        this.linkHandler = options.linkHandler || null;\n        this.latexTypesetter = options.latexTypesetter || null;\n        this.sanitizer = options.sanitizer || defaultSanitizer;\n        // Add the initial factories.\n        if (options.initialFactories) {\n            for (const factory of options.initialFactories) {\n                this.addFactory(factory);\n            }\n        }\n    }\n    /**\n     * The ordered list of mimeTypes.\n     */\n    get mimeTypes() {\n        return this._types || (this._types = Private.sortedTypes(this._ranks));\n    }\n    /**\n     * Find the preferred mime type for a mime bundle.\n     *\n     * @param bundle - The bundle of mime data.\n     *\n     * @param safe - How to consider safe/unsafe factories. If 'ensure',\n     *   it will only consider safe factories. If 'any', any factory will be\n     *   considered. If 'prefer', unsafe factories will be considered, but\n     *   only after the safe options have been exhausted.\n     *\n     * @returns The preferred mime type from the available factories,\n     *   or `undefined` if the mime type cannot be rendered.\n     */\n    preferredMimeType(bundle, safe = 'ensure') {\n        // Try to find a safe factory first, if preferred.\n        if (safe === 'ensure' || safe === 'prefer') {\n            for (const mt of this.mimeTypes) {\n                if (mt in bundle && this._factories[mt].safe) {\n                    return mt;\n                }\n            }\n        }\n        if (safe !== 'ensure') {\n            // Otherwise, search for the best factory among all factories.\n            for (const mt of this.mimeTypes) {\n                if (mt in bundle) {\n                    return mt;\n                }\n            }\n        }\n        // Otherwise, no matching mime type exists.\n        return undefined;\n    }\n    /**\n     * Create a renderer for a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns A new renderer for the given mime type.\n     *\n     * @throws An error if no factory exists for the mime type.\n     */\n    createRenderer(mimeType) {\n        // Throw an error if no factory exists for the mime type.\n        if (!(mimeType in this._factories)) {\n            throw new Error(`No factory for mime type: '${mimeType}'`);\n        }\n        // Invoke the best factory for the given mime type.\n        return this._factories[mimeType].createRenderer({\n            mimeType,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            latexTypesetter: this.latexTypesetter,\n            translator: this.translator\n        });\n    }\n    /**\n     * Create a new mime model.  This is a convenience method.\n     *\n     * @options - The options used to create the model.\n     *\n     * @returns A new mime model.\n     */\n    createModel(options = {}) {\n        return new MimeModel(options);\n    }\n    /**\n     * Create a clone of this rendermime instance.\n     *\n     * @param options - The options for configuring the clone.\n     *\n     * @returns A new independent clone of the rendermime.\n     */\n    clone(options = {}) {\n        // Create the clone.\n        const clone = new RenderMimeRegistry({\n            resolver: options.resolver || this.resolver || undefined,\n            sanitizer: options.sanitizer || this.sanitizer || undefined,\n            linkHandler: options.linkHandler || this.linkHandler || undefined,\n            latexTypesetter: options.latexTypesetter || this.latexTypesetter || undefined,\n            translator: this.translator\n        });\n        // Clone the internal state.\n        clone._factories = Object.assign({}, this._factories);\n        clone._ranks = Object.assign({}, this._ranks);\n        clone._id = this._id;\n        // Return the cloned object.\n        return clone;\n    }\n    /**\n     * Get the renderer factory registered for a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns The factory for the mime type, or `undefined`.\n     */\n    getFactory(mimeType) {\n        return this._factories[mimeType];\n    }\n    /**\n     * Add a renderer factory to the rendermime.\n     *\n     * @param factory - The renderer factory of interest.\n     *\n     * @param rank - The rank of the renderer. A lower rank indicates\n     *   a higher priority for rendering. If not given, the rank will\n     *   defer to the `defaultRank` of the factory.  If no `defaultRank`\n     *   is given, it will default to 100.\n     *\n     * #### Notes\n     * The renderer will replace an existing renderer for the given\n     * mimeType.\n     */\n    addFactory(factory, rank) {\n        if (rank === undefined) {\n            rank = factory.defaultRank;\n            if (rank === undefined) {\n                rank = 100;\n            }\n        }\n        for (const mt of factory.mimeTypes) {\n            this._factories[mt] = factory;\n            this._ranks[mt] = { rank, id: this._id++ };\n        }\n        this._types = null;\n    }\n    /**\n     * Remove a mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     */\n    removeMimeType(mimeType) {\n        delete this._factories[mimeType];\n        delete this._ranks[mimeType];\n        this._types = null;\n    }\n    /**\n     * Get the rank for a given mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @returns The rank of the mime type or undefined.\n     */\n    getRank(mimeType) {\n        const rank = this._ranks[mimeType];\n        return rank && rank.rank;\n    }\n    /**\n     * Set the rank of a given mime type.\n     *\n     * @param mimeType - The mime type of interest.\n     *\n     * @param rank - The new rank to assign.\n     *\n     * #### Notes\n     * This is a no-op if the mime type is not registered.\n     */\n    setRank(mimeType, rank) {\n        if (!this._ranks[mimeType]) {\n            return;\n        }\n        const id = this._id++;\n        this._ranks[mimeType] = { rank, id };\n        this._types = null;\n    }\n}\n/**\n * The namespace for `RenderMimeRegistry` class statics.\n */\n(function (RenderMimeRegistry) {\n    /**\n     * A default resolver that uses a given reference path and a contents manager.\n     */\n    class UrlResolver {\n        /**\n         * Create a new url resolver.\n         */\n        constructor(options) {\n            if (options.path) {\n                this._path = options.path;\n            }\n            else if (options.session) {\n                this._session = options.session;\n            }\n            else {\n                throw new Error(\"Either 'path' or 'session' must be given as a constructor option\");\n            }\n            this._contents = options.contents;\n        }\n        /**\n         * The path of the object, from which local urls can be derived.\n         */\n        get path() {\n            var _a;\n            return (_a = this._path) !== null && _a !== void 0 ? _a : this._session.path;\n        }\n        set path(value) {\n            this._path = value;\n        }\n        /**\n         * Resolve a relative url to an absolute url path.\n         */\n        async resolveUrl(url) {\n            if (this.isLocal(url)) {\n                const cwd = encodeURI(PathExt.dirname(this.path));\n                url = PathExt.resolve(cwd, url);\n            }\n            return url;\n        }\n        /**\n         * Get the download url of a given absolute url path.\n         *\n         * #### Notes\n         * The returned URL may include a query parameter.\n         */\n        async getDownloadUrl(urlPath) {\n            if (this.isLocal(urlPath)) {\n                // decode url->path before passing to contents api\n                return this._contents.getDownloadUrl(decodeURIComponent(urlPath));\n            }\n            return urlPath;\n        }\n        /**\n         * Whether the URL should be handled by the resolver\n         * or not.\n         *\n         * #### Notes\n         * This is similar to the `isLocal` check in `URLExt`,\n         * but it also checks whether the path points to any\n         * of the `IDrive`s that may be registered with the contents\n         * manager.\n         */\n        isLocal(url) {\n            const path = decodeURI(url);\n            return URLExt.isLocal(url) || !!this._contents.driveName(path);\n        }\n    }\n    RenderMimeRegistry.UrlResolver = UrlResolver;\n})(RenderMimeRegistry || (RenderMimeRegistry = {}));\n/**\n * The namespace for the module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Get the mime types in the map, ordered by rank.\n     */\n    function sortedTypes(map) {\n        return Object.keys(map).sort((a, b) => {\n            const p1 = map[a];\n            const p2 = map[b];\n            if (p1.rank !== p2.rank) {\n                return p1.rank - p2.rank;\n            }\n            return p1.id - p2.id;\n        });\n    }\n    Private.sortedTypes = sortedTypes;\n    function sessionConnection(s) {\n        return s.sessionChanged\n            ? s.session\n            : s;\n    }\n    Private.sessionConnection = sessionConnection;\n})(Private || (Private = {}));\n//# sourceMappingURL=registry.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport marked from 'marked';\nimport { Mode, CodeMirrorEditor } from '@jupyterlab/codemirror';\nimport { URLExt } from '@jupyterlab/coreutils';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { toArray } from '@lumino/algorithm';\nimport escape from 'lodash.escape';\nimport { removeMath, replaceMath } from './latex';\n/**\n * Render HTML into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderHTML(options) {\n    // Unpack the options.\n    let { host, source, trusted, sanitizer, resolver, linkHandler, shouldTypeset, latexTypesetter, translator } = options;\n    translator = translator || nullTranslator;\n    const trans = translator === null || translator === void 0 ? void 0 : translator.load('jupyterlab');\n    let originalSource = source;\n    // Bail early if the source is empty.\n    if (!source) {\n        host.textContent = '';\n        return Promise.resolve(undefined);\n    }\n    // Sanitize the source if it is not trusted. This removes all\n    // `<script>` tags as well as other potentially harmful HTML.\n    if (!trusted) {\n        originalSource = `${source}`;\n        source = sanitizer.sanitize(source);\n    }\n    // Set the inner HTML of the host.\n    host.innerHTML = source;\n    if (host.getElementsByTagName('script').length > 0) {\n        // If output it trusted, eval any script tags contained in the HTML.\n        // This is not done automatically by the browser when script tags are\n        // created by setting `innerHTML`.\n        if (trusted) {\n            Private.evalInnerHTMLScriptTags(host);\n        }\n        else {\n            const container = document.createElement('div');\n            const warning = document.createElement('pre');\n            warning.textContent = trans.__('This HTML output contains inline scripts. Are you sure that you want to run arbitrary Javascript within your JupyterLab session?');\n            const runButton = document.createElement('button');\n            runButton.textContent = trans.__('Run');\n            runButton.onclick = event => {\n                host.innerHTML = originalSource;\n                Private.evalInnerHTMLScriptTags(host);\n                if (host.firstChild) {\n                    host.removeChild(host.firstChild);\n                }\n            };\n            container.appendChild(warning);\n            container.appendChild(runButton);\n            host.insertBefore(container, host.firstChild);\n        }\n    }\n    // Handle default behavior of nodes.\n    Private.handleDefaults(host, resolver);\n    // Patch the urls if a resolver is available.\n    let promise;\n    if (resolver) {\n        promise = Private.handleUrls(host, resolver, linkHandler);\n    }\n    else {\n        promise = Promise.resolve(undefined);\n    }\n    // Return the final rendered promise.\n    return promise.then(() => {\n        if (shouldTypeset && latexTypesetter) {\n            latexTypesetter.typeset(host);\n        }\n    });\n}\n/**\n * Render an image into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderImage(options) {\n    // Unpack the options.\n    const { host, mimeType, source, width, height, needsBackground, unconfined } = options;\n    // Clear the content in the host.\n    host.textContent = '';\n    // Create the image element.\n    const img = document.createElement('img');\n    // Set the source of the image.\n    img.src = `data:${mimeType};base64,${source}`;\n    // Set the size of the image if provided.\n    if (typeof height === 'number') {\n        img.height = height;\n    }\n    if (typeof width === 'number') {\n        img.width = width;\n    }\n    if (needsBackground === 'light') {\n        img.classList.add('jp-needs-light-background');\n    }\n    else if (needsBackground === 'dark') {\n        img.classList.add('jp-needs-dark-background');\n    }\n    if (unconfined === true) {\n        img.classList.add('jp-mod-unconfined');\n    }\n    // Add the image to the host.\n    host.appendChild(img);\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Render LaTeX into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderLatex(options) {\n    // Unpack the options.\n    const { host, source, shouldTypeset, latexTypesetter } = options;\n    // Set the source on the node.\n    host.textContent = source;\n    // Typeset the node if needed.\n    if (shouldTypeset && latexTypesetter) {\n        latexTypesetter.typeset(host);\n    }\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * Render Markdown into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport async function renderMarkdown(options) {\n    // Unpack the options.\n    const { host, source } = options, others = __rest(options, [\"host\", \"source\"]);\n    // Clear the content if there is no source.\n    if (!source) {\n        host.textContent = '';\n        return;\n    }\n    // Separate math from normal markdown text.\n    const parts = removeMath(source);\n    // Convert the markdown to HTML.\n    let html = await Private.renderMarked(parts['text']);\n    // Replace math.\n    html = replaceMath(html, parts['math']);\n    // Render HTML.\n    await renderHTML(Object.assign({ host, source: html }, others));\n    // Apply ids to the header nodes.\n    Private.headerAnchors(host);\n}\n/**\n * Render SVG into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderSVG(options) {\n    // Unpack the options.\n    let { host, source, trusted, unconfined } = options;\n    // Clear the content if there is no source.\n    if (!source) {\n        host.textContent = '';\n        return Promise.resolve(undefined);\n    }\n    // Display a message if the source is not trusted.\n    if (!trusted) {\n        host.textContent =\n            'Cannot display an untrusted SVG. Maybe you need to run the cell?';\n        return Promise.resolve(undefined);\n    }\n    // Add missing SVG namespace (if actually missing)\n    const patt = '<svg[^>]+xmlns=[^>]+svg';\n    if (source.search(patt) < 0) {\n        source = source.replace('<svg', '<svg xmlns=\"http://www.w3.org/2000/svg\"');\n    }\n    // Render in img so that user can save it easily\n    const img = new Image();\n    img.src = `data:image/svg+xml,${encodeURIComponent(source)}`;\n    host.appendChild(img);\n    if (unconfined === true) {\n        host.classList.add('jp-mod-unconfined');\n    }\n    return Promise.resolve();\n}\n/**\n * Replace URLs with links.\n *\n * @param content - The plain text content.\n *\n * @returns The content where all URLs have been replaced with corresponding links.\n */\nfunction autolink(content) {\n    // Taken from Visual Studio Code:\n    // https://github.com/microsoft/vscode/blob/9f709d170b06e991502153f281ec3c012add2e42/src/vs/workbench/contrib/debug/browser/linkDetector.ts#L17-L18\n    const controlCodes = '\\\\u0000-\\\\u0020\\\\u007f-\\\\u009f';\n    const webLinkRegex = new RegExp('(?:[a-zA-Z][a-zA-Z0-9+.-]{2,}:\\\\/\\\\/|data:|www\\\\.)[^\\\\s' +\n        controlCodes +\n        '\"]{2,}[^\\\\s' +\n        controlCodes +\n        '\"\\'(){}\\\\[\\\\],:;.!?]', 'ug');\n    return content.replace(webLinkRegex, url => {\n        // Special case when the URL ends with \">\" or \"<\"\n        const lastChars = url.slice(-3);\n        const endsWithGtLt = ['&gt', '&lt'].indexOf(lastChars) !== -1;\n        const toAppend = endsWithGtLt ? lastChars : '';\n        const len = endsWithGtLt ? url.length - 3 : url.length;\n        return (`<a href=\"${url.slice(0, len)}\" rel=\"noopener\" target=\"_blank\">` +\n            `${url.slice(0, len)}</a>${toAppend}`);\n    });\n}\n/**\n * Render text into a host node.\n *\n * @params options - The options for rendering.\n *\n * @returns A promise which resolves when rendering is complete.\n */\nexport function renderText(options) {\n    // Unpack the options.\n    const { host, sanitizer, source } = options;\n    // Create the HTML content.\n    const content = sanitizer.sanitize(Private.ansiSpan(source), {\n        allowedTags: ['span']\n    });\n    // Set the sanitized content for the host node.\n    const pre = document.createElement('pre');\n    pre.innerHTML = autolink(content);\n    host.appendChild(pre);\n    // Return the rendered promise.\n    return Promise.resolve(undefined);\n}\n/**\n * The namespace for module implementation details.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Eval the script tags contained in a host populated by `innerHTML`.\n     *\n     * When script tags are created via `innerHTML`, the browser does not\n     * evaluate them when they are added to the page. This function works\n     * around that by creating new equivalent script nodes manually, and\n     * replacing the originals.\n     */\n    function evalInnerHTMLScriptTags(host) {\n        // Create a snapshot of the current script nodes.\n        const scripts = toArray(host.getElementsByTagName('script'));\n        // Loop over each script node.\n        for (const script of scripts) {\n            // Skip any scripts which no longer have a parent.\n            if (!script.parentNode) {\n                continue;\n            }\n            // Create a new script node which will be clone.\n            const clone = document.createElement('script');\n            // Copy the attributes into the clone.\n            const attrs = script.attributes;\n            for (let i = 0, n = attrs.length; i < n; ++i) {\n                const { name, value } = attrs[i];\n                clone.setAttribute(name, value);\n            }\n            // Copy the text content into the clone.\n            clone.textContent = script.textContent;\n            // Replace the old script in the parent.\n            script.parentNode.replaceChild(clone, script);\n        }\n    }\n    Private.evalInnerHTMLScriptTags = evalInnerHTMLScriptTags;\n    /**\n     * Render markdown for the specified content.\n     *\n     * @param content - The string of markdown to render.\n     *\n     * @return A promise which resolves with the rendered content.\n     */\n    function renderMarked(content) {\n        initializeMarked();\n        return new Promise((resolve, reject) => {\n            marked(content, (err, content) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(content);\n                }\n            });\n        });\n    }\n    Private.renderMarked = renderMarked;\n    /**\n     * Handle the default behavior of nodes.\n     */\n    function handleDefaults(node, resolver) {\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            const el = anchors[i];\n            // skip when processing a elements inside svg\n            // which are of type SVGAnimatedString\n            if (!(el instanceof HTMLAnchorElement)) {\n                continue;\n            }\n            const path = el.href;\n            const isLocal = resolver && resolver.isLocal\n                ? resolver.isLocal(path)\n                : URLExt.isLocal(path);\n            // set target attribute if not already present\n            if (!el.target) {\n                el.target = isLocal ? '_self' : '_blank';\n            }\n            // set rel as 'noopener' for non-local anchors\n            if (!isLocal) {\n                el.rel = 'noopener';\n            }\n        }\n        // Handle image elements.\n        const imgs = node.getElementsByTagName('img');\n        for (let i = 0; i < imgs.length; i++) {\n            if (!imgs[i].alt) {\n                imgs[i].alt = 'Image';\n            }\n        }\n    }\n    Private.handleDefaults = handleDefaults;\n    /**\n     * Resolve the relative urls in element `src` and `href` attributes.\n     *\n     * @param node - The head html element.\n     *\n     * @param resolver - A url resolver.\n     *\n     * @param linkHandler - An optional link handler for nodes.\n     *\n     * @returns a promise fulfilled when the relative urls have been resolved.\n     */\n    function handleUrls(node, resolver, linkHandler) {\n        // Set up an array to collect promises.\n        const promises = [];\n        // Handle HTML Elements with src attributes.\n        const nodes = node.querySelectorAll('*[src]');\n        for (let i = 0; i < nodes.length; i++) {\n            promises.push(handleAttr(nodes[i], 'src', resolver));\n        }\n        // Handle anchor elements.\n        const anchors = node.getElementsByTagName('a');\n        for (let i = 0; i < anchors.length; i++) {\n            promises.push(handleAnchor(anchors[i], resolver, linkHandler));\n        }\n        // Handle link elements.\n        const links = node.getElementsByTagName('link');\n        for (let i = 0; i < links.length; i++) {\n            promises.push(handleAttr(links[i], 'href', resolver));\n        }\n        // Wait on all promises.\n        return Promise.all(promises).then(() => undefined);\n    }\n    Private.handleUrls = handleUrls;\n    /**\n     * Apply ids to headers.\n     */\n    function headerAnchors(node) {\n        var _a;\n        const headerNames = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        for (const headerType of headerNames) {\n            const headers = node.getElementsByTagName(headerType);\n            for (let i = 0; i < headers.length; i++) {\n                const header = headers[i];\n                header.id = ((_a = header.textContent) !== null && _a !== void 0 ? _a : '').replace(/ /g, '-');\n                const anchor = document.createElement('a');\n                anchor.target = '_self';\n                anchor.textContent = '¶';\n                anchor.href = '#' + header.id;\n                anchor.classList.add('jp-InternalAnchorLink');\n                header.appendChild(anchor);\n            }\n        }\n    }\n    Private.headerAnchors = headerAnchors;\n    /**\n     * Handle a node with a `src` or `href` attribute.\n     */\n    async function handleAttr(node, name, resolver) {\n        const source = node.getAttribute(name) || '';\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(source)\n            : URLExt.isLocal(source);\n        if (!source || !isLocal) {\n            return;\n        }\n        try {\n            const urlPath = await resolver.resolveUrl(source);\n            let url = await resolver.getDownloadUrl(urlPath);\n            if (URLExt.parse(url).protocol !== 'data:') {\n                // Bust caching for local src attrs.\n                // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += (/\\?/.test(url) ? '&' : '?') + new Date().getTime();\n            }\n            node.setAttribute(name, url);\n        }\n        catch (err) {\n            // If there was an error getting the url,\n            // just make it an empty link and report the error.\n            node.setAttribute(name, '');\n            throw err;\n        }\n    }\n    /**\n     * Handle an anchor node.\n     */\n    function handleAnchor(anchor, resolver, linkHandler) {\n        // Get the link path without the location prepended.\n        // (e.g. \"./foo.md#Header 1\" vs \"http://localhost:8888/foo.md#Header 1\")\n        let href = anchor.getAttribute('href') || '';\n        const isLocal = resolver.isLocal\n            ? resolver.isLocal(href)\n            : URLExt.isLocal(href);\n        // Bail if it is not a file-like url.\n        if (!href || !isLocal) {\n            return Promise.resolve(undefined);\n        }\n        // Remove the hash until we can handle it.\n        const hash = anchor.hash;\n        if (hash) {\n            // Handle internal link in the file.\n            if (hash === href) {\n                anchor.target = '_self';\n                return Promise.resolve(undefined);\n            }\n            // For external links, remove the hash until we have hash handling.\n            href = href.replace(hash, '');\n        }\n        // Get the appropriate file path.\n        return resolver\n            .resolveUrl(href)\n            .then(urlPath => {\n            // decode encoded url from url to api path\n            const path = decodeURIComponent(urlPath);\n            // Handle the click override.\n            if (linkHandler) {\n                linkHandler.handleLink(anchor, path, hash);\n            }\n            // Get the appropriate file download path.\n            return resolver.getDownloadUrl(urlPath);\n        })\n            .then(url => {\n            // Set the visible anchor.\n            anchor.href = url + hash;\n        })\n            .catch(err => {\n            // If there was an error getting the url,\n            // just make it an empty link.\n            anchor.href = '';\n        });\n    }\n    let markedInitialized = false;\n    /**\n     * Support GitHub flavored Markdown, leave sanitizing to external library.\n     */\n    function initializeMarked() {\n        if (markedInitialized) {\n            return;\n        }\n        markedInitialized = true;\n        marked.setOptions({\n            gfm: true,\n            sanitize: false,\n            // breaks: true; We can't use GFM breaks as it causes problems with tables\n            langPrefix: `cm-s-${CodeMirrorEditor.defaultConfig.theme} language-`,\n            highlight: (code, lang, callback) => {\n                const cb = (err, code) => {\n                    if (callback) {\n                        callback(err, code);\n                    }\n                    return code;\n                };\n                if (!lang) {\n                    // no language, no highlight\n                    return cb(null, code);\n                }\n                Mode.ensure(lang)\n                    .then(spec => {\n                    const el = document.createElement('div');\n                    if (!spec) {\n                        console.error(`No CodeMirror mode: ${lang}`);\n                        return cb(null, code);\n                    }\n                    try {\n                        Mode.run(code, spec.mime, el);\n                        return cb(null, el.innerHTML);\n                    }\n                    catch (err) {\n                        console.error(`Failed to highlight ${lang} code`, err);\n                        return cb(err, code);\n                    }\n                })\n                    .catch(err => {\n                    console.error(`No CodeMirror mode: ${lang}`);\n                    console.error(`Require CodeMirror mode error: ${err}`);\n                    return cb(null, code);\n                });\n                return code;\n            }\n        });\n    }\n    const ANSI_COLORS = [\n        'ansi-black',\n        'ansi-red',\n        'ansi-green',\n        'ansi-yellow',\n        'ansi-blue',\n        'ansi-magenta',\n        'ansi-cyan',\n        'ansi-white',\n        'ansi-black-intense',\n        'ansi-red-intense',\n        'ansi-green-intense',\n        'ansi-yellow-intense',\n        'ansi-blue-intense',\n        'ansi-magenta-intense',\n        'ansi-cyan-intense',\n        'ansi-white-intense'\n    ];\n    /**\n     * Create HTML tags for a string with given foreground, background etc. and\n     * add them to the `out` array.\n     */\n    function pushColoredChunk(chunk, fg, bg, bold, underline, inverse, out) {\n        if (chunk) {\n            const classes = [];\n            const styles = [];\n            if (bold && typeof fg === 'number' && 0 <= fg && fg < 8) {\n                fg += 8; // Bold text uses \"intense\" colors\n            }\n            if (inverse) {\n                [fg, bg] = [bg, fg];\n            }\n            if (typeof fg === 'number') {\n                classes.push(ANSI_COLORS[fg] + '-fg');\n            }\n            else if (fg.length) {\n                styles.push(`color: rgb(${fg})`);\n            }\n            else if (inverse) {\n                classes.push('ansi-default-inverse-fg');\n            }\n            if (typeof bg === 'number') {\n                classes.push(ANSI_COLORS[bg] + '-bg');\n            }\n            else if (bg.length) {\n                styles.push(`background-color: rgb(${bg})`);\n            }\n            else if (inverse) {\n                classes.push('ansi-default-inverse-bg');\n            }\n            if (bold) {\n                classes.push('ansi-bold');\n            }\n            if (underline) {\n                classes.push('ansi-underline');\n            }\n            if (classes.length || styles.length) {\n                out.push('<span');\n                if (classes.length) {\n                    out.push(` class=\"${classes.join(' ')}\"`);\n                }\n                if (styles.length) {\n                    out.push(` style=\"${styles.join('; ')}\"`);\n                }\n                out.push('>');\n                out.push(chunk);\n                out.push('</span>');\n            }\n            else {\n                out.push(chunk);\n            }\n        }\n    }\n    /**\n     * Convert ANSI extended colors to R/G/B triple.\n     */\n    function getExtendedColors(numbers) {\n        let r;\n        let g;\n        let b;\n        const n = numbers.shift();\n        if (n === 2 && numbers.length >= 3) {\n            // 24-bit RGB\n            r = numbers.shift();\n            g = numbers.shift();\n            b = numbers.shift();\n            if ([r, g, b].some(c => c < 0 || 255 < c)) {\n                throw new RangeError('Invalid range for RGB colors');\n            }\n        }\n        else if (n === 5 && numbers.length >= 1) {\n            // 256 colors\n            const idx = numbers.shift();\n            if (idx < 0) {\n                throw new RangeError('Color index must be >= 0');\n            }\n            else if (idx < 16) {\n                // 16 default terminal colors\n                return idx;\n            }\n            else if (idx < 232) {\n                // 6x6x6 color cube, see https://stackoverflow.com/a/27165165/500098\n                r = Math.floor((idx - 16) / 36);\n                r = r > 0 ? 55 + r * 40 : 0;\n                g = Math.floor(((idx - 16) % 36) / 6);\n                g = g > 0 ? 55 + g * 40 : 0;\n                b = (idx - 16) % 6;\n                b = b > 0 ? 55 + b * 40 : 0;\n            }\n            else if (idx < 256) {\n                // grayscale, see https://stackoverflow.com/a/27165165/500098\n                r = g = b = (idx - 232) * 10 + 8;\n            }\n            else {\n                throw new RangeError('Color index must be < 256');\n            }\n        }\n        else {\n            throw new RangeError('Invalid extended color specification');\n        }\n        return [r, g, b];\n    }\n    /**\n     * Transform ANSI color escape codes into HTML <span> tags with CSS\n     * classes such as \"ansi-green-intense-fg\".\n     * The actual colors used are set in the CSS file.\n     * This also removes non-color escape sequences.\n     * This is supposed to have the same behavior as nbconvert.filters.ansi2html()\n     */\n    function ansiSpan(str) {\n        const ansiRe = /\\x1b\\[(.*?)([@-~])/g; // eslint-disable-line no-control-regex\n        let fg = [];\n        let bg = [];\n        let bold = false;\n        let underline = false;\n        let inverse = false;\n        let match;\n        const out = [];\n        const numbers = [];\n        let start = 0;\n        str = escape(str);\n        str += '\\x1b[m'; // Ensure markup for trailing text\n        // tslint:disable-next-line\n        while ((match = ansiRe.exec(str))) {\n            if (match[2] === 'm') {\n                const items = match[1].split(';');\n                for (let i = 0; i < items.length; i++) {\n                    const item = items[i];\n                    if (item === '') {\n                        numbers.push(0);\n                    }\n                    else if (item.search(/^\\d+$/) !== -1) {\n                        numbers.push(parseInt(item, 10));\n                    }\n                    else {\n                        // Ignored: Invalid color specification\n                        numbers.length = 0;\n                        break;\n                    }\n                }\n            }\n            else {\n                // Ignored: Not a color code\n            }\n            const chunk = str.substring(start, match.index);\n            pushColoredChunk(chunk, fg, bg, bold, underline, inverse, out);\n            start = ansiRe.lastIndex;\n            while (numbers.length) {\n                const n = numbers.shift();\n                switch (n) {\n                    case 0:\n                        fg = bg = [];\n                        bold = false;\n                        underline = false;\n                        inverse = false;\n                        break;\n                    case 1:\n                    case 5:\n                        bold = true;\n                        break;\n                    case 4:\n                        underline = true;\n                        break;\n                    case 7:\n                        inverse = true;\n                        break;\n                    case 21:\n                    case 22:\n                        bold = false;\n                        break;\n                    case 24:\n                        underline = false;\n                        break;\n                    case 27:\n                        inverse = false;\n                        break;\n                    case 30:\n                    case 31:\n                    case 32:\n                    case 33:\n                    case 34:\n                    case 35:\n                    case 36:\n                    case 37:\n                        fg = n - 30;\n                        break;\n                    case 38:\n                        try {\n                            fg = getExtendedColors(numbers);\n                        }\n                        catch (e) {\n                            numbers.length = 0;\n                        }\n                        break;\n                    case 39:\n                        fg = [];\n                        break;\n                    case 40:\n                    case 41:\n                    case 42:\n                    case 43:\n                    case 44:\n                    case 45:\n                    case 46:\n                    case 47:\n                        bg = n - 40;\n                        break;\n                    case 48:\n                        try {\n                            bg = getExtendedColors(numbers);\n                        }\n                        catch (e) {\n                            numbers.length = 0;\n                        }\n                        break;\n                    case 49:\n                        bg = [];\n                        break;\n                    case 90:\n                    case 91:\n                    case 92:\n                    case 93:\n                    case 94:\n                    case 95:\n                    case 96:\n                    case 97:\n                        fg = n - 90 + 8;\n                        break;\n                    case 100:\n                    case 101:\n                    case 102:\n                    case 103:\n                    case 104:\n                    case 105:\n                    case 106:\n                    case 107:\n                        bg = n - 100 + 8;\n                        break;\n                    default:\n                    // Unknown codes are ignored\n                }\n            }\n        }\n        return out.join('');\n    }\n    Private.ansiSpan = ansiSpan;\n})(Private || (Private = {}));\n//# sourceMappingURL=renderers.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * The rendermime token.\n */\nexport const IRenderMimeRegistry = new Token('@jupyterlab/rendermime:IRenderMimeRegistry');\n/* tslint:enable */\n/* tslint:disable */\n/**\n * The latex typesetter token.\n */\nexport const ILatexTypesetter = new Token('@jupyterlab/rendermime:ILatexTypesetter');\n/* tslint:enable */\n//# sourceMappingURL=tokens.js.map","import { nullTranslator } from '@jupyterlab/translation';\nimport { Widget } from '@lumino/widgets';\nimport * as renderers from './renderers';\n/**\n * A common base class for mime renderers.\n */\nexport class RenderedCommon extends Widget {\n    /**\n     * Construct a new rendered common widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super();\n        this.mimeType = options.mimeType;\n        this.sanitizer = options.sanitizer;\n        this.resolver = options.resolver;\n        this.linkHandler = options.linkHandler;\n        this.translator = options.translator || nullTranslator;\n        this.latexTypesetter = options.latexTypesetter;\n        this.node.dataset['mimeType'] = this.mimeType;\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     *\n     * #### Notes\n     * If the DOM node for this widget already has content, it is emptied\n     * before rendering. Subclasses that do not want this behavior\n     * (if, for instance, they are using DOM diffing), should override\n     * this method and not call `super.renderModel()`.\n     */\n    async renderModel(model) {\n        // TODO compare model against old model for early bail?\n        // Empty any existing content in the node from previous renders\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        // Toggle the trusted class on the widget.\n        this.toggleClass('jp-mod-trusted', model.trusted);\n        // Render the actual content.\n        await this.render(model);\n        // Handle the fragment identifier if given.\n        const { fragment } = model.metadata;\n        if (fragment) {\n            this.setFragment(fragment);\n        }\n    }\n    /**\n     * Set the URI fragment identifier.\n     *\n     * @param fragment - The URI fragment identifier.\n     */\n    setFragment(fragment) {\n        /* no-op */\n    }\n}\n/**\n * A common base class for HTML mime renderers.\n */\nexport class RenderedHTMLCommon extends RenderedCommon {\n    /**\n     * Construct a new rendered HTML common widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedHTMLCommon');\n    }\n    setFragment(fragment) {\n        let el;\n        try {\n            el = this.node.querySelector(fragment);\n        }\n        catch (error) {\n            console.warn('Unable to set URI fragment identifier.', error);\n        }\n        if (el) {\n            el.scrollIntoView();\n        }\n    }\n}\n/**\n * A mime renderer for displaying HTML and math.\n */\nexport class RenderedHTML extends RenderedHTMLCommon {\n    /**\n     * Construct a new rendered HTML widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedHTML');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderHTML({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter,\n            translator: this.translator\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A mime renderer for displaying LaTeX output.\n */\nexport class RenderedLatex extends RenderedCommon {\n    /**\n     * Construct a new rendered LaTeX widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedLatex');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderLatex({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A mime renderer for displaying images.\n */\nexport class RenderedImage extends RenderedCommon {\n    /**\n     * Construct a new rendered image widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedImage');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const metadata = model.metadata[this.mimeType];\n        return renderers.renderImage({\n            host: this.node,\n            mimeType: this.mimeType,\n            source: String(model.data[this.mimeType]),\n            width: metadata && metadata.width,\n            height: metadata && metadata.height,\n            needsBackground: model.metadata['needs_background'],\n            unconfined: metadata && metadata.unconfined\n        });\n    }\n}\n/**\n * A mime renderer for displaying Markdown with embedded latex.\n */\nexport class RenderedMarkdown extends RenderedHTMLCommon {\n    /**\n     * Construct a new rendered markdown widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedMarkdown');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderMarkdown({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            resolver: this.resolver,\n            sanitizer: this.sanitizer,\n            linkHandler: this.linkHandler,\n            shouldTypeset: this.isAttached,\n            latexTypesetter: this.latexTypesetter,\n            translator: this.translator\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A widget for displaying SVG content.\n */\nexport class RenderedSVG extends RenderedCommon {\n    /**\n     * Construct a new rendered SVG widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedSVG');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const metadata = model.metadata[this.mimeType];\n        return renderers.renderSVG({\n            host: this.node,\n            source: String(model.data[this.mimeType]),\n            trusted: model.trusted,\n            unconfined: metadata && metadata.unconfined,\n            translator: this.translator\n        });\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        if (this.latexTypesetter) {\n            this.latexTypesetter.typeset(this.node);\n        }\n    }\n}\n/**\n * A widget for displaying plain text and console text.\n */\nexport class RenderedText extends RenderedCommon {\n    /**\n     * Construct a new rendered text widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedText');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        return renderers.renderText({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: String(model.data[this.mimeType]),\n            translator: this.translator\n        });\n    }\n}\n/**\n * A widget for displaying JavaScript output.\n */\nexport class RenderedJavaScript extends RenderedCommon {\n    /**\n     * Construct a new rendered text widget.\n     *\n     * @param options - The options for initializing the widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass('jp-RenderedJavaScript');\n    }\n    /**\n     * Render a mime model.\n     *\n     * @param model - The mime model to render.\n     *\n     * @returns A promise which resolves when rendering is complete.\n     */\n    render(model) {\n        const trans = this.translator.load('jupyterlab');\n        return renderers.renderText({\n            host: this.node,\n            sanitizer: this.sanitizer,\n            source: trans.__('JavaScript output is disabled in JupyterLab'),\n            translator: this.translator\n        });\n    }\n}\n//# sourceMappingURL=widgets.js.map"],"sourceRoot":""}