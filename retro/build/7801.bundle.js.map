{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/javascript-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/kernel/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/p5-kernel/lib/kernel.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../packages/p5-kernel-extension/lib/index.js"],"names":["JavaScriptKernel","options","super","this","_evalFunc","Function","_ready","PromiseDelegate","_iframe","document","createElement","style","visibility","position","top","onload","async","_initIFrame","resolve","window","addEventListener","e","msg","data","event","content","stream","body","appendChild","isDisposed","remove","dispose","promise","implementation","implementation_version","language_info","codemirror_mode","name","file_extension","mimetype","nbconvert_exporter","pygments_lexer","version","protocol_version","status","banner","help_links","text","url","code","result","_eval","execution_count","executionCount","metadata","_a","_b","vars","contentWindow","cursor_pos","word","slice","match","matches","filter","v","startsWith","cursor_start","length","cursor_end","Error","BaseKernel","_history","_executionCount","_isDisposed","_disposed","Signal","_parentHeader","undefined","id","sendMessage","_id","_name","_sendMessage","Promise","emit","_busy","header","msg_type","_kernelInfo","_executeRequest","_complete","_historyRequest","_idle","message","KernelMessage","channel","msgType","session","parentHeader","parent","execution_state","kernelInfoRequest","_executeInput","executeRequest","push","Object","keys","_executeResult","_executeReply","user_expressions","payload","stack","error","ename","evalue","traceback","_error","historyMsg","history","completeMsg","completeRequest","IKernels","Token","IKernelSpecs","MIME_TYPE","P5Kernel","_bootstrap","_inputs","_p5Ready","p5Url","ready","then","res","_magics","input","map","c","join","script","re","width","height","autoStart","requires","activate","app","kernelspecs","PageConfig","URLExt","location","origin","register","spec","display_name","language","argv","env","interrupt_mode","resources","create"],"mappings":"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","file":"7801.bundle.js","sourcesContent":["import { BaseKernel } from '@jupyterlite/kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class JavaScriptKernel extends BaseKernel {\n    /**\n     * Instantiate a new JavaScriptKernel\n     *\n     * @param options The instantiation options for a new JavaScriptKernel\n     */\n    constructor(options) {\n        super(options);\n        this._evalFunc = new Function('window', 'code', 'return window.eval(code);');\n        this._ready = new PromiseDelegate();\n        // create the main IFrame\n        this._iframe = document.createElement('iframe');\n        this._iframe.style.visibility = 'hidden';\n        this._iframe.style.position = 'absolute';\n        // position outside of the page\n        this._iframe.style.top = '-100000px';\n        this._iframe.onload = async () => {\n            await this._initIFrame();\n            this._ready.resolve();\n            window.addEventListener('message', (e) => {\n                const msg = e.data;\n                if (msg.event === 'stream') {\n                    const content = msg;\n                    this.stream(content);\n                }\n            });\n        };\n        document.body.appendChild(this._iframe);\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._iframe.remove();\n        super.dispose();\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'JavaScript',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'javascript',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A JavaScript kernel running in the browser',\n            help_links: [\n                {\n                    text: 'JavaScript Kernel',\n                    url: 'https://github.com/jtpio/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        const result = this._eval(code);\n        // TODO: move executeResult and executeError here\n        return {\n            execution_count: this.executionCount,\n            data: {\n                'text/plain': result\n            },\n            metadata: {}\n        };\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async completeRequest(content) {\n        var _a, _b;\n        // naive completion on window names only\n        // TODO: improve and move logic to the iframe\n        const vars = this._evalFunc(this._iframe.contentWindow, 'Object.keys(window)');\n        const { code, cursor_pos } = content;\n        const words = (_a = code.slice(0, cursor_pos).match(/(\\w+)$/)) !== null && _a !== void 0 ? _a : [];\n        const word = (_b = words[0]) !== null && _b !== void 0 ? _b : '';\n        const matches = vars.filter(v => v.startsWith(word));\n        return {\n            matches,\n            cursor_start: cursor_pos - word.length,\n            cursor_end: cursor_pos,\n            metadata: {},\n            status: 'ok'\n        };\n    }\n    /**\n     * Handle an `inspect_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async inspectRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle an `is_complete_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async isCompleteRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Handle a `comm_info_request` message.\n     *\n     * @param content - The content of the request.\n     *\n     * @returns A promise that resolves with the response message.\n     */\n    async commInfoRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Send an `input_request` message.\n     *\n     * @param content - The content of the request.\n     */\n    async inputRequest(content) {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Execute code in the kernel IFrame.\n     *\n     * @param code The code to execute.\n     */\n    _eval(code) {\n        return this._evalFunc(this._iframe.contentWindow, code);\n    }\n    /**\n     * Create a new IFrame\n     *\n     * @param iframe The IFrame to initialize.\n     */\n    async _initIFrame() {\n        if (!this._iframe.contentWindow) {\n            return;\n        }\n        this._evalFunc(this._iframe.contentWindow, `\n        console._log = console.log;\n        console._error = console.error;\n\n        window._bubbleUp = function(msg) {\n          window.parent.postMessage(msg);\n        }\n\n        console.log = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stdout\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.info = console.log;\n\n        console.error = function() {\n          const args = Array.prototype.slice.call(arguments);\n          window._bubbleUp({\n            \"event\": \"stream\",\n            \"name\": \"stderr\",\n            \"text\": args.join(' ') + '\\\\n'\n          });\n        };\n        console.warn = console.error;\n\n        window.onerror = function(message, source, lineno, colno, error) {\n          console.error(message);\n        }\n      `);\n    }\n}\n","import { KernelMessage } from '@jupyterlab/services';\nimport { Signal } from '@lumino/signaling';\n/**\n * A base kernel class handling basic kernel messaging.\n */\nexport class BaseKernel {\n    /**\n     * Construct a new BaseKernel.\n     *\n     * @param options The instantiation options for a BaseKernel.\n     */\n    constructor(options) {\n        this._history = [];\n        this._executionCount = 0;\n        this._isDisposed = false;\n        this._disposed = new Signal(this);\n        this._parentHeader = undefined;\n        const { id, name, sendMessage } = options;\n        this._id = id;\n        this._name = name;\n        this._sendMessage = sendMessage;\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return Promise.resolve();\n    }\n    /**\n     * Return whether the kernel is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * A signal emitted when the kernel is disposed.\n     */\n    get disposed() {\n        return this._disposed;\n    }\n    /**\n     * Get the kernel id\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Get the name of the kernel\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * The current execution count\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    /**\n     * Get the last parent header\n     */\n    get parentHeader() {\n        return this._parentHeader;\n    }\n    /**\n     * Dispose the kernel.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._disposed.emit(void 0);\n    }\n    /**\n     * Handle an incoming message from the client.\n     *\n     * @param msg The message to handle\n     */\n    async handleMessage(msg) {\n        this._busy(msg);\n        const msgType = msg.header.msg_type;\n        switch (msgType) {\n            case 'kernel_info_request':\n                await this._kernelInfo(msg);\n                break;\n            case 'execute_request':\n                await this._executeRequest(msg);\n                break;\n            case 'complete_request':\n                await this._complete(msg);\n                break;\n            case 'history_request':\n                await this._historyRequest(msg);\n                break;\n            default:\n                break;\n        }\n        this._idle(msg);\n    }\n    /**\n     * Stream an event from the kernel\n     *\n     * @param parentHeader The parent header.\n     * @param content The stream content.\n     */\n    stream(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'stream',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a `display_data` message to the client.\n     *\n     * @param content The display_data content.\n     */\n    displayData(content) {\n        var _a, _b;\n        const message = KernelMessage.createMessage({\n            channel: 'iopub',\n            msgType: 'display_data',\n            // TODO: better handle this\n            session: (_b = (_a = this._parentHeader) === null || _a === void 0 ? void 0 : _a.session) !== null && _b !== void 0 ? _b : '',\n            parentHeader: this._parentHeader,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an 'idle' status message.\n     *\n     * @param parent The parent message\n     */\n    _idle(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'idle'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send a 'busy' status message.\n     *\n     * @param parent The parent message.\n     */\n    _busy(parent) {\n        const message = KernelMessage.createMessage({\n            msgType: 'status',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            channel: 'iopub',\n            content: {\n                execution_state: 'busy'\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle a kernel_info_request message\n     *\n     * @param parent The parent message.\n     */\n    async _kernelInfo(parent) {\n        const content = await this.kernelInfoRequest();\n        const message = KernelMessage.createMessage({\n            msgType: 'kernel_info_reply',\n            channel: 'shell',\n            session: parent.header.session,\n            parentHeader: parent.header,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _executeRequest(msg) {\n        const executeMsg = msg;\n        const content = executeMsg.content;\n        this._executionCount++;\n        // TODO: handle differently\n        this._parentHeader = msg.header;\n        this._executeInput(msg);\n        try {\n            const result = await this.executeRequest(content);\n            // do not store magics in the history\n            if (!content.code.startsWith('%')) {\n                this._history.push([0, 0, content.code]);\n            }\n            // send the execute result only if there is a result\n            if (Object.keys(result.data).length > 0) {\n                this._executeResult(msg, result);\n            }\n            this._executeReply(msg, {\n                execution_count: this._executionCount,\n                status: 'ok',\n                user_expressions: {},\n                payload: []\n            });\n        }\n        catch (e) {\n            const { name, stack, message } = e;\n            const error = {\n                ename: name,\n                evalue: message,\n                traceback: [stack]\n            };\n            this._error(msg, error);\n            this._executeReply(msg, {\n                execution_count: this._executionCount,\n                status: 'error',\n                ...error\n            });\n        }\n    }\n    /**\n     * Handle a `history_request` message\n     *\n     * @param msg The parent message.\n     */\n    async _historyRequest(msg) {\n        const historyMsg = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'history_reply',\n            channel: 'shell',\n            parentHeader: historyMsg.header,\n            session: msg.header.session,\n            content: {\n                status: 'ok',\n                history: this._history\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_input` message.\n     *\n     * @param msg The parent message.\n     */\n    _executeInput(msg) {\n        const parent = msg;\n        const code = parent.content.code;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_input',\n            parentHeader: parent.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                code,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_result` message.\n     *\n     * @param msg The parent message.\n     * @param content The execut result content.\n     */\n    _executeResult(msg, content) {\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_result',\n            parentHeader: msg.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content: {\n                ...content,\n                execution_count: this._executionCount\n            }\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `execute_reply` message.\n     *\n     * @param msg The parent message.\n     * @param content The content for the execute reply.\n     */\n    _executeReply(msg, content) {\n        const parent = msg;\n        const message = KernelMessage.createMessage({\n            msgType: 'execute_reply',\n            channel: 'shell',\n            parentHeader: parent.header,\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Send an `error` message.\n     *\n     * @param msg The parent message.\n     * @param content The content for the execution error response.\n     */\n    _error(msg, content) {\n        const message = KernelMessage.createMessage({\n            msgType: 'error',\n            parentHeader: msg.header,\n            channel: 'iopub',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n    /**\n     * Handle an complete_request message\n     *\n     * @param msg The parent message.\n     */\n    async _complete(msg) {\n        const completeMsg = msg;\n        const content = await this.completeRequest(completeMsg.content);\n        const message = KernelMessage.createMessage({\n            msgType: 'complete_reply',\n            parentHeader: completeMsg.header,\n            channel: 'shell',\n            session: msg.header.session,\n            content\n        });\n        this._sendMessage(message);\n    }\n}\n","import { Token } from '@lumino/coreutils';\n/**\n * The token for the kernels service.\n */\nexport const IKernels = new Token('@jupyterlite/kernel:IKernels');\n/**\n * The token for the kernel spec service.\n */\nexport const IKernelSpecs = new Token('@jupyterlite/kernelspec:IKernelSpecs');\n","import { JavaScriptKernel } from '@jupyterlite/javascript-kernel';\nimport { PromiseDelegate } from '@lumino/coreutils';\n/**\n * The mimetype for mime bundle results\n */\nconst MIME_TYPE = 'text/html-sandboxed';\n/**\n * A kernel that executes code in an IFrame.\n */\nexport class P5Kernel extends JavaScriptKernel {\n    /**\n     * Instantiate a new P5Kernel.\n     *\n     * @param options The instantiation options for a new P5Kernel.\n     */\n    constructor(options) {\n        super(options);\n        this._bootstrap = '';\n        this._inputs = [];\n        this._p5Ready = new PromiseDelegate();\n        const { p5Url } = options;\n        this._bootstrap = `\n      import('${p5Url}').then(() => {\n        // create the p5 global instance\n        window.__globalP5 = new p5();\n        return Promise.resolve();\n      })\n    `;\n        // wait for the parent IFrame to be ready\n        super.ready.then(() => {\n            this._eval(this._bootstrap);\n            this._p5Ready.resolve();\n        });\n    }\n    /**\n     * A promise that is fulfilled when the kernel is ready.\n     */\n    get ready() {\n        return this._p5Ready.promise;\n    }\n    /**\n     * Handle a kernel_info_request message\n     */\n    async kernelInfoRequest() {\n        const content = {\n            implementation: 'p5.js',\n            implementation_version: '0.1.0',\n            language_info: {\n                codemirror_mode: {\n                    name: 'javascript'\n                },\n                file_extension: '.js',\n                mimetype: 'text/javascript',\n                name: 'p5js',\n                nbconvert_exporter: 'javascript',\n                pygments_lexer: 'javascript',\n                version: 'es2017'\n            },\n            protocol_version: '5.3',\n            status: 'ok',\n            banner: 'A p5.js kernel',\n            help_links: [\n                {\n                    text: 'p5.js Kernel',\n                    url: 'https://github.com/jtpio/jupyterlite'\n                }\n            ]\n        };\n        return content;\n    }\n    /**\n     * Handle an `execute_request` message\n     *\n     * @param msg The parent message.\n     */\n    async executeRequest(content) {\n        const { code } = content;\n        if (code.startsWith('%')) {\n            const res = await this._magics(code);\n            if (res) {\n                return res;\n            }\n        }\n        const res = super.executeRequest(content);\n        this._inputs.push(code);\n        return res;\n    }\n    /**\n     * Handle magics coming from execute requests.\n     *\n     * @param code The code block to handle.\n     */\n    async _magics(code) {\n        var _a, _b;\n        if (code.startsWith('%show')) {\n            const input = this._inputs.map(c => `window.eval(\\`${c}\\`);`).join('\\n');\n            const script = `\n        ${this._bootstrap}.then(() => {\n          ${input}\n          window.__globalP5._start();\n        })\n      `;\n            // add metadata\n            const re = /^%show(?: (.+)\\s+(.+))?\\s*$/;\n            const matches = code.match(re);\n            const width = (_a = matches === null || matches === void 0 ? void 0 : matches[1]) !== null && _a !== void 0 ? _a : undefined;\n            const height = (_b = matches === null || matches === void 0 ? void 0 : matches[2]) !== null && _b !== void 0 ? _b : undefined;\n            return {\n                execution_count: this.executionCount,\n                data: {\n                    [MIME_TYPE]: [\n                        '<body style=\"overflow: hidden;\">',\n                        `<script>${script}</script>`,\n                        '</body>'\n                    ].join('\\n')\n                },\n                metadata: {\n                    [MIME_TYPE]: {\n                        width,\n                        height\n                    }\n                }\n            };\n        }\n    }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { P5Kernel } from '@jupyterlite/p5-kernel';\n/**\n * The default CDN fallback for p5.js\n */\nconst P5_CDN_URL = 'https://cdn.jsdelivr.net/npm/p5@1.3.1/lib/p5.js';\n/**\n * A plugin to register the p5.js kernel.\n */\nconst kernel = {\n    id: '@jupyterlite/p5-kernel-extension:kernel',\n    autoStart: true,\n    requires: [IKernelSpecs],\n    activate: (app, kernelspecs) => {\n        const url = PageConfig.getOption('p5Url') || P5_CDN_URL;\n        const p5Url = URLExt.isLocal(url) ? URLExt.join(window.location.origin, url) : url;\n        kernelspecs.register({\n            spec: {\n                name: 'p5js',\n                display_name: 'p5.js',\n                language: 'javascript',\n                argv: [],\n                spec: {\n                    argv: [],\n                    env: {},\n                    display_name: 'p5.js',\n                    language: 'javascript',\n                    interrupt_mode: 'message',\n                    metadata: {}\n                },\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': '/kernelspecs/p5js.png'\n                }\n            },\n            create: async (options) => {\n                return new P5Kernel({\n                    ...options,\n                    p5Url\n                });\n            }\n        });\n    }\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"sourceRoot":""}