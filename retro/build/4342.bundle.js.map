{"version":3,"sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/observables/lib/observablestring.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/observables/lib/observablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codeeditor/lib/editor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/observables/lib/undoablelist.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/observables/lib/modeldb.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/shared-models/lib/utils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codeeditor/lib/jsoneditor.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codeeditor/lib/widget.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codeeditor/lib/mimetype.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/codeeditor/lib/tokens.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/observables/lib/observablejson.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../node_modules/@retrolab/application/node_modules/@jupyterlab/observables/lib/observablemap.js"],"names":["ObservableString","initialText","this","_text","_isDisposed","_changed","Signal","value","length","emit","type","start","end","index","text","slice","oldValue","clear","Private","CodeEditor","itemCmp","first","second","ObservableUndoableList","options","_array","values","each","push","_itemCmp","ArrayIterator","undefined","Error","oldIndex","newIndex","oldValues","newValues","num","ArrayExt","item","remove","copy","fromIndex","toIndex","toArray","startIndex","endIndex","i","serializer","super","_inCompound","_isUndoable","_madeCompoundChange","_index","_stack","_serializer","changed","connect","_onListChanged","isUndoAble","canUndo","changes","change","reverse","_undoChange","canRedo","_redoChange","list","isDisposed","evt","_copyChange","set","fromJSON","insert","move","toJSON","IdentitySerializer","ObservableValue","initialValue","_value","JSONExt","newValue","IChangedArgs","ModelDB","isPrepopulated","isCollaborative","connected","Promise","resolve","_toDispose","_disposables","DisposableSet","_basePath","basePath","baseDB","_db","path","get","_resolvePath","has","str","add","vec","map","val","view","dispose","defaultSelectionStyle","className","displayName","color","Model","_mutex","token","f","_mimeTypeChanged","_sharedModelSwitched","modelDB","sharedModel","id","_onSharedModelChanged","createString","_onModelDBValueChanged","mimeType","createValue","_onModelDBMimeTypeChanged","createMap","reinitialize","getSource","disconnect","sender","sourceChange","currpos","forEach","delta","delete","retain","event","transact","updateSource","setSource","getValue","setValue","args","name","defaultConfig","fontFamily","fontSize","lineHeight","lineNumbers","lineWrap","wordWrapColumn","readOnly","tabSize","insertSpaces","matchBrackets","autoClosingBrackets","handlePaste","rulers","codeFolding","ERROR_CLASS","JSONEditor","Widget","_dataDirty","_inputDirty","_source","_originalValue","_changeGuard","translator","nullTranslator","_trans","load","addClass","headerNode","document","createElement","revertButtonNode","undoIcon","tag","title","__","commitButtonNode","checkIcon","marginLeft","editorHostNode","appendChild","node","model","_onValueChanged","editor","editorFactory","host","setOption","_onSourceChanged","_setValue","_evtBlur","_evtClick","msg","addEventListener","hidden","isVisible","update","refresh","removeEventListener","hasFocus","valid","JSON","parse","removeClass","err","target","contains","hasClass","_mergeContent","focus","old","user","source","key","content","stringify","setCursorPosition","line","column","HAS_SELECTION_CLASS","HAS_IN_LEADING_WHITESPACE_CLASS","DROP_TARGET_CLASS","leadingWhitespaceRe","CodeEditorWrapper","_hasRefreshedSinceAttach","factory","uuid","config","selectionStyle","selections","_onSelectionsChanged","_updateOnShow","updateOnShow","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","onAfterAttach","width","height","setSize","resizeToFit","getSelection","getLine","match","getOption","findTextData","mimeData","preventDefault","stopPropagation","dropAction","data","coordinate","top","y","bottom","left","x","right","position","getPositionForCoordinate","proposedAction","offset","getOffsetAt","IEditorMimeTypeService","mime","textType","types","find","t","indexOf","getData","defaultMimeType","IEditorServices","Token","ObservableJSON","out","Object","create","keys","ChangeMessage","Message","ObservableMap","_map","Map","size","oldVal","keyList","v","k","valList"],"mappings":"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","file":"4342.bundle.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableString]]\n */\nexport class ObservableString {\n    /**\n     * Construct a new observable string.\n     */\n    constructor(initialText = '') {\n        this._text = '';\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        this._text = initialText;\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'String';\n    }\n    /**\n     * A signal emitted when the string has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Set the value of the string.\n     */\n    set text(value) {\n        if (value.length === this._text.length && value === this._text) {\n            return;\n        }\n        this._text = value;\n        this._changed.emit({\n            type: 'set',\n            start: 0,\n            end: value.length,\n            value: value\n        });\n    }\n    /**\n     * Get the value of the string.\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * Insert a substring.\n     *\n     * @param index - The starting index.\n     *\n     * @param text - The substring to insert.\n     */\n    insert(index, text) {\n        this._text = this._text.slice(0, index) + text + this._text.slice(index);\n        this._changed.emit({\n            type: 'insert',\n            start: index,\n            end: index + text.length,\n            value: text\n        });\n    }\n    /**\n     * Remove a substring.\n     *\n     * @param start - The starting index.\n     *\n     * @param end - The ending index.\n     */\n    remove(start, end) {\n        const oldValue = this._text.slice(start, end);\n        this._text = this._text.slice(0, start) + this._text.slice(end);\n        this._changed.emit({\n            type: 'remove',\n            start: start,\n            end: end,\n            value: oldValue\n        });\n    }\n    /**\n     * Set the ObservableString to an empty string.\n     */\n    clear() {\n        this.text = '';\n    }\n    /**\n     * Test whether the string has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the string.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n}\n//# sourceMappingURL=observablestring.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ArrayExt, ArrayIterator, each, toArray } from '@lumino/algorithm';\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of [[IObservableList]].\n */\nexport class ObservableList {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._array = [];\n        this._isDisposed = false;\n        this._changed = new Signal(this);\n        if (options.values !== void 0) {\n            each(options.values, value => {\n                this._array.push(value);\n            });\n        }\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n    }\n    /**\n     * The type of this object.\n     */\n    get type() {\n        return 'List';\n    }\n    /**\n     * A signal emitted when the list has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The length of the list.\n     */\n    get length() {\n        return this._array.length;\n    }\n    /**\n     * Test whether the list has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources held by the list.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this.clear();\n    }\n    /**\n     * Create an iterator over the values in the list.\n     *\n     * @returns A new iterator starting at the front of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    iter() {\n        return new ArrayIterator(this._array);\n    }\n    /**\n     * Get the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @returns The value at the specified index.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    get(index) {\n        return this._array[index];\n    }\n    /**\n     * Set the value at the specified index.\n     *\n     * @param index - The positive integer index of interest.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral or out of range.\n     */\n    set(index, value) {\n        const oldValue = this._array[index];\n        if (value === undefined) {\n            throw new Error('Cannot set an undefined item');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (itemCmp(oldValue, value)) {\n            return;\n        }\n        this._array[index] = value;\n        this._changed.emit({\n            type: 'set',\n            oldIndex: index,\n            newIndex: index,\n            oldValues: [oldValue],\n            newValues: [value]\n        });\n    }\n    /**\n     * Add a value to the end of the list.\n     *\n     * @param value - The value to add to the end of the list.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    push(value) {\n        const num = this._array.push(value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: this.length - 1,\n            oldValues: [],\n            newValues: [value]\n        });\n        return num;\n    }\n    /**\n     * Insert a value into the list at a specific index.\n     *\n     * @param index - The index at which to insert the value.\n     *\n     * @param value - The value to set at the specified index.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    insert(index, value) {\n        ArrayExt.insert(this._array, index, value);\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex: index,\n            oldValues: [],\n            newValues: [value]\n        });\n    }\n    /**\n     * Remove the first occurrence of a value from the list.\n     *\n     * @param value - The value of interest.\n     *\n     * @returns The index of the removed value, or `-1` if the value\n     *   is not contained in the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     */\n    removeValue(value) {\n        const itemCmp = this._itemCmp;\n        const index = ArrayExt.findFirstIndex(this._array, item => {\n            return itemCmp(item, value);\n        });\n        this.remove(index);\n        return index;\n    }\n    /**\n     * Remove and return the value at a specific index.\n     *\n     * @param index - The index of the value of interest.\n     *\n     * @returns The value at the specified index, or `undefined` if the\n     *   index is out of range.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the removed value and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * An `index` which is non-integral.\n     */\n    remove(index) {\n        const value = ArrayExt.removeAt(this._array, index);\n        if (value === undefined) {\n            return;\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: index,\n            newIndex: -1,\n            newValues: [],\n            oldValues: [value]\n        });\n        return value;\n    }\n    /**\n     * Remove all values from the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * All current iterators are invalidated.\n     */\n    clear() {\n        const copy = this._array.slice();\n        this._array.length = 0;\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: 0,\n            newIndex: 0,\n            newValues: [],\n            oldValues: copy\n        });\n    }\n    /**\n     * Move a value from one index to another.\n     *\n     * @parm fromIndex - The index of the element to move.\n     *\n     * @param toIndex - The index to move the element to.\n     *\n     * #### Complexity\n     * Constant.\n     *\n     * #### Iterator Validity\n     * Iterators pointing at the lesser of the `fromIndex` and the `toIndex`\n     * and beyond are invalidated.\n     *\n     * #### Undefined Behavior\n     * A `fromIndex` or a `toIndex` which is non-integral.\n     */\n    move(fromIndex, toIndex) {\n        if (this.length <= 1 || fromIndex === toIndex) {\n            return;\n        }\n        const values = [this._array[fromIndex]];\n        ArrayExt.move(this._array, fromIndex, toIndex);\n        this._changed.emit({\n            type: 'move',\n            oldIndex: fromIndex,\n            newIndex: toIndex,\n            oldValues: values,\n            newValues: values\n        });\n    }\n    /**\n     * Push a set of values to the back of the list.\n     *\n     * @param values - An iterable or array-like set of values to add.\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     */\n    pushAll(values) {\n        const newIndex = this.length;\n        each(values, value => {\n            this._array.push(value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n        return this.length;\n    }\n    /**\n     * Insert a set of items into the list at the specified index.\n     *\n     * @param index - The index at which to insert the values.\n     *\n     * @param values - The values to insert at the specified index.\n     *\n     * #### Complexity.\n     * Linear.\n     *\n     * #### Iterator Validity\n     * No changes.\n     *\n     * #### Notes\n     * The `index` will be clamped to the bounds of the list.\n     *\n     * #### Undefined Behavior.\n     * An `index` which is non-integral.\n     */\n    insertAll(index, values) {\n        const newIndex = index;\n        each(values, value => {\n            ArrayExt.insert(this._array, index++, value);\n        });\n        this._changed.emit({\n            type: 'add',\n            oldIndex: -1,\n            newIndex,\n            oldValues: [],\n            newValues: toArray(values)\n        });\n    }\n    /**\n     * Remove a range of items from the list.\n     *\n     * @param startIndex - The start index of the range to remove (inclusive).\n     *\n     * @param endIndex - The end index of the range to remove (exclusive).\n     *\n     * @returns The new length of the list.\n     *\n     * #### Complexity\n     * Linear.\n     *\n     * #### Iterator Validity\n     * Iterators pointing to the first removed value and beyond are invalid.\n     *\n     * #### Undefined Behavior\n     * A `startIndex` or `endIndex` which is non-integral.\n     */\n    removeRange(startIndex, endIndex) {\n        const oldValues = this._array.slice(startIndex, endIndex);\n        for (let i = startIndex; i < endIndex; i++) {\n            ArrayExt.removeAt(this._array, startIndex);\n        }\n        this._changed.emit({\n            type: 'remove',\n            oldIndex: startIndex,\n            newIndex: -1,\n            oldValues,\n            newValues: []\n        });\n        return this.length;\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item cmp.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport * as models from '@jupyterlab/shared-models';\nimport { Signal } from '@lumino/signaling';\nimport { ModelDB } from '@jupyterlab/observables';\n/**\n * A namespace for code editors.\n *\n * #### Notes\n * - A code editor is a set of common assumptions which hold for all concrete editors.\n * - Changes in implementations of the code editor should only be caused by changes in concrete editors.\n * - Common JLab services which are based on the code editor should belong to `IEditorServices`.\n */\nexport var CodeEditor;\n(function (CodeEditor) {\n    /**\n     * The default selection style.\n     */\n    CodeEditor.defaultSelectionStyle = {\n        className: '',\n        displayName: '',\n        color: 'black'\n    };\n    /**\n     * The default implementation of the editor model.\n     */\n    class Model {\n        /**\n         * Construct a new Model.\n         */\n        constructor(options) {\n            /**\n             * A mutex to update the shared model.\n             */\n            this._mutex = models.createMutex();\n            this._isDisposed = false;\n            this._mimeTypeChanged = new Signal(this);\n            this._sharedModelSwitched = new Signal(this);\n            options = options || {};\n            if (options.modelDB) {\n                this.modelDB = options.modelDB;\n            }\n            else {\n                this.modelDB = new ModelDB();\n            }\n            this.sharedModel = models.createStandaloneCell(this.type, options.id);\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            const value = this.modelDB.createString('value');\n            value.changed.connect(this._onModelDBValueChanged, this);\n            value.text = value.text || options.value || '';\n            const mimeType = this.modelDB.createValue('mimeType');\n            mimeType.changed.connect(this._onModelDBMimeTypeChanged, this);\n            mimeType.set(options.mimeType || 'text/plain');\n            this.modelDB.createMap('selections');\n        }\n        /**\n         * When we initialize a cell model, we create a standalone model that cannot be shared in a YNotebook.\n         * Call this function to re-initialize the local representation based on a fresh shared model (e.g. models.YFile or models.YCodeCell).\n         *\n         * @param sharedModel\n         * @param reinitialize Whether to reinitialize the shared model.\n         */\n        switchSharedModel(sharedModel, reinitialize) {\n            if (reinitialize) {\n                // update local modeldb\n                // @todo also change metadata\n                this.value.text = sharedModel.getSource();\n            }\n            this.sharedModel.changed.disconnect(this._onSharedModelChanged, this);\n            // clone model retrieve a shared (not standalone) model\n            this.sharedModel = sharedModel;\n            this.sharedModel.changed.connect(this._onSharedModelChanged, this);\n            this._sharedModelSwitched.emit(true);\n        }\n        /**\n         * We update the modeldb store when the shared model changes.\n         * To ensure that we don't run into infinite loops, we wrap this call in a \"mutex\".\n         * The \"mutex\" ensures that the wrapped code can only be executed by either the sharedModelChanged hander\n         * or the modelDB change handler.\n         */\n        _onSharedModelChanged(sender, change) {\n            this._mutex(() => {\n                if (change.sourceChange) {\n                    const value = this.modelDB.get('value');\n                    let currpos = 0;\n                    change.sourceChange.forEach(delta => {\n                        if (delta.insert != null) {\n                            value.insert(currpos, delta.insert);\n                            currpos += delta.insert.length;\n                        }\n                        else if (delta.delete != null) {\n                            value.remove(currpos, currpos + delta.delete);\n                        }\n                        else if (delta.retain != null) {\n                            currpos += delta.retain;\n                        }\n                    });\n                }\n            });\n        }\n        /**\n         * Handle a change to the modelDB value.\n         */\n        _onModelDBValueChanged(value, event) {\n            this._mutex(() => {\n                this.sharedModel.transact(() => {\n                    switch (event.type) {\n                        case 'insert':\n                            this.sharedModel.updateSource(event.start, event.start, event.value);\n                            break;\n                        case 'remove':\n                            this.sharedModel.updateSource(event.start, event.end);\n                            break;\n                        default:\n                            this.sharedModel.setSource(value.text);\n                            break;\n                    }\n                });\n            });\n        }\n        get type() {\n            return 'code';\n        }\n        /**\n         * A signal emitted when a mimetype changes.\n         */\n        get mimeTypeChanged() {\n            return this._mimeTypeChanged;\n        }\n        /**\n         * A signal emitted when the shared model was switched.\n         */\n        get sharedModelSwitched() {\n            return this._sharedModelSwitched;\n        }\n        /**\n         * Get the value of the model.\n         */\n        get value() {\n            return this.modelDB.get('value');\n        }\n        /**\n         * Get the selections for the model.\n         */\n        get selections() {\n            return this.modelDB.get('selections');\n        }\n        /**\n         * A mime type of the model.\n         */\n        get mimeType() {\n            return this.modelDB.getValue('mimeType');\n        }\n        set mimeType(newValue) {\n            const oldValue = this.mimeType;\n            if (oldValue === newValue) {\n                return;\n            }\n            this.modelDB.setValue('mimeType', newValue);\n        }\n        /**\n         * Whether the model is disposed.\n         */\n        get isDisposed() {\n            return this._isDisposed;\n        }\n        /**\n         * Dispose of the resources used by the model.\n         */\n        dispose() {\n            if (this._isDisposed) {\n                return;\n            }\n            this._isDisposed = true;\n            Signal.clearData(this);\n        }\n        _onModelDBMimeTypeChanged(mimeType, args) {\n            this._mimeTypeChanged.emit({\n                name: 'mimeType',\n                oldValue: args.oldValue,\n                newValue: args.newValue\n            });\n        }\n    }\n    CodeEditor.Model = Model;\n    /**\n     * The default configuration options for an editor.\n     */\n    CodeEditor.defaultConfig = {\n        fontFamily: null,\n        fontSize: null,\n        lineHeight: null,\n        lineNumbers: false,\n        lineWrap: 'on',\n        wordWrapColumn: 80,\n        readOnly: false,\n        tabSize: 4,\n        insertSpaces: true,\n        matchBrackets: true,\n        autoClosingBrackets: true,\n        handlePaste: true,\n        rulers: [],\n        codeFolding: false\n    };\n})(CodeEditor || (CodeEditor = {}));\n//# sourceMappingURL=editor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { each } from '@lumino/algorithm';\nimport { ObservableList } from './observablelist';\n/**\n * A concrete implementation of an observable undoable list.\n */\nexport class ObservableUndoableList extends ObservableList {\n    /**\n     * Construct a new undoable observable list.\n     */\n    constructor(serializer) {\n        super();\n        this._inCompound = false;\n        this._isUndoable = true;\n        this._madeCompoundChange = false;\n        this._index = -1;\n        this._stack = [];\n        this._serializer = serializer;\n        this.changed.connect(this._onListChanged, this);\n    }\n    /**\n     * Whether the object can redo changes.\n     */\n    get canRedo() {\n        return this._index < this._stack.length - 1;\n    }\n    /**\n     * Whether the object can undo changes.\n     */\n    get canUndo() {\n        return this._index >= 0;\n    }\n    /**\n     * Begin a compound operation.\n     *\n     * @param isUndoAble - Whether the operation is undoable.\n     *   The default is `true`.\n     */\n    beginCompoundOperation(isUndoAble) {\n        this._inCompound = true;\n        this._isUndoable = isUndoAble !== false;\n        this._madeCompoundChange = false;\n    }\n    /**\n     * End a compound operation.\n     */\n    endCompoundOperation() {\n        this._inCompound = false;\n        this._isUndoable = true;\n        if (this._madeCompoundChange) {\n            this._index++;\n        }\n    }\n    /**\n     * Undo an operation.\n     */\n    undo() {\n        if (!this.canUndo) {\n            return;\n        }\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes.reverse()) {\n            this._undoChange(change);\n        }\n        this._isUndoable = true;\n        this._index--;\n    }\n    /**\n     * Redo an operation.\n     */\n    redo() {\n        if (!this.canRedo) {\n            return;\n        }\n        this._index++;\n        const changes = this._stack[this._index];\n        this._isUndoable = false;\n        for (const change of changes) {\n            this._redoChange(change);\n        }\n        this._isUndoable = true;\n    }\n    /**\n     * Clear the change stack.\n     */\n    clearUndo() {\n        this._index = -1;\n        this._stack = [];\n    }\n    /**\n     * Handle a change in the list.\n     */\n    _onListChanged(list, change) {\n        if (this.isDisposed || !this._isUndoable) {\n            return;\n        }\n        // Clear everything after this position if necessary.\n        if (!this._inCompound || !this._madeCompoundChange) {\n            this._stack = this._stack.slice(0, this._index + 1);\n        }\n        // Copy the change.\n        const evt = this._copyChange(change);\n        // Put the change in the stack.\n        if (this._stack[this._index + 1]) {\n            this._stack[this._index + 1].push(evt);\n        }\n        else {\n            this._stack.push([evt]);\n        }\n        // If not in a compound operation, increase index.\n        if (!this._inCompound) {\n            this._index++;\n        }\n        else {\n            this._madeCompoundChange = true;\n        }\n    }\n    /**\n     * Undo a change event.\n     */\n    _undoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                each(change.newValues, () => {\n                    this.remove(change.newIndex);\n                });\n                break;\n            case 'set':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.set(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                index = change.oldIndex;\n                each(change.oldValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'move':\n                this.move(change.newIndex, change.oldIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Redo a change event.\n     */\n    _redoChange(change) {\n        let index = 0;\n        const serializer = this._serializer;\n        switch (change.type) {\n            case 'add':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.insert(index++, serializer.fromJSON(value));\n                });\n                break;\n            case 'set':\n                index = change.newIndex;\n                each(change.newValues, value => {\n                    this.set(change.newIndex++, serializer.fromJSON(value));\n                });\n                break;\n            case 'remove':\n                each(change.oldValues, () => {\n                    this.remove(change.oldIndex);\n                });\n                break;\n            case 'move':\n                this.move(change.oldIndex, change.newIndex);\n                break;\n            default:\n                return;\n        }\n    }\n    /**\n     * Copy a change as JSON.\n     */\n    _copyChange(change) {\n        const oldValues = [];\n        each(change.oldValues, value => {\n            oldValues.push(this._serializer.toJSON(value));\n        });\n        const newValues = [];\n        each(change.newValues, value => {\n            newValues.push(this._serializer.toJSON(value));\n        });\n        return {\n            type: change.type,\n            oldIndex: change.oldIndex,\n            newIndex: change.newIndex,\n            oldValues,\n            newValues\n        };\n    }\n}\n/**\n * Namespace for ObservableUndoableList utilities.\n */\n(function (ObservableUndoableList) {\n    /**\n     * A default, identity serializer.\n     */\n    class IdentitySerializer {\n        /**\n         * Identity serialize.\n         */\n        toJSON(value) {\n            return value;\n        }\n        /**\n         * Identity deserialize.\n         */\n        fromJSON(value) {\n            return value;\n        }\n    }\n    ObservableUndoableList.IdentitySerializer = IdentitySerializer;\n})(ObservableUndoableList || (ObservableUndoableList = {}));\n//# sourceMappingURL=undoablelist.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { DisposableSet } from '@lumino/disposable';\nimport { Signal } from '@lumino/signaling';\nimport { JSONExt } from '@lumino/coreutils';\nimport { ObservableMap } from './observablemap';\nimport { ObservableJSON } from './observablejson';\nimport { ObservableString } from './observablestring';\nimport { ObservableUndoableList } from './undoablelist';\n/**\n * A concrete implementation of an `IObservableValue`.\n */\nexport class ObservableValue {\n    /**\n     * Constructor for the value.\n     *\n     * @param initialValue: the starting value for the `ObservableValue`.\n     */\n    constructor(initialValue = null) {\n        this._value = null;\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._value = initialValue;\n    }\n    /**\n     * The observable type.\n     */\n    get type() {\n        return 'Value';\n    }\n    /**\n     * Whether the value has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The changed signal.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Get the current value, or `undefined` if it has not been set.\n     */\n    get() {\n        return this._value;\n    }\n    /**\n     * Set the current value.\n     */\n    set(value) {\n        const oldValue = this._value;\n        if (JSONExt.deepEqual(oldValue, value)) {\n            return;\n        }\n        this._value = value;\n        this._changed.emit({\n            oldValue: oldValue,\n            newValue: value\n        });\n    }\n    /**\n     * Dispose of the resources held by the value.\n     */\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._value = null;\n    }\n}\n/**\n * The namespace for the `ObservableValue` class statics.\n */\n(function (ObservableValue) {\n    /**\n     * The changed args object emitted by the `IObservableValue`.\n     */\n    class IChangedArgs {\n    }\n    ObservableValue.IChangedArgs = IChangedArgs;\n})(ObservableValue || (ObservableValue = {}));\n/**\n * A concrete implementation of an `IModelDB`.\n */\nexport class ModelDB {\n    /**\n     * Constructor for the `ModelDB`.\n     */\n    constructor(options = {}) {\n        /**\n         * Whether the model has been populated with\n         * any model values.\n         */\n        this.isPrepopulated = false;\n        /**\n         * Whether the model is collaborative.\n         */\n        this.isCollaborative = false;\n        /**\n         * A promise resolved when the model is connected\n         * to its backend. For the in-memory ModelDB it\n         * is immediately resolved.\n         */\n        this.connected = Promise.resolve(void 0);\n        this._toDispose = false;\n        this._isDisposed = false;\n        this._disposables = new DisposableSet();\n        this._basePath = options.basePath || '';\n        if (options.baseDB) {\n            this._db = options.baseDB;\n        }\n        else {\n            this._db = new ObservableMap();\n            this._toDispose = true;\n        }\n    }\n    /**\n     * The base path for the `ModelDB`. This is prepended\n     * to all the paths that are passed in to the member\n     * functions of the object.\n     */\n    get basePath() {\n        return this._basePath;\n    }\n    /**\n     * Whether the database is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Get a value for a path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns an `IObservable`.\n     */\n    get(path) {\n        return this._db.get(this._resolvePath(path));\n    }\n    /**\n     * Whether the `IModelDB` has an object at this path.\n     *\n     * @param path: the path for the object.\n     *\n     * @returns a boolean for whether an object is at `path`.\n     */\n    has(path) {\n        return this._db.has(this._resolvePath(path));\n    }\n    /**\n     * Create a string and insert it in the database.\n     *\n     * @param path: the path for the string.\n     *\n     * @returns the string that was created.\n     */\n    createString(path) {\n        const str = new ObservableString();\n        this._disposables.add(str);\n        this.set(path, str);\n        return str;\n    }\n    /**\n     * Create an undoable list and insert it in the database.\n     *\n     * @param path: the path for the list.\n     *\n     * @returns the list that was created.\n     *\n     * #### Notes\n     * The list can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createList(path) {\n        const vec = new ObservableUndoableList(new ObservableUndoableList.IdentitySerializer());\n        this._disposables.add(vec);\n        this.set(path, vec);\n        return vec;\n    }\n    /**\n     * Create a map and insert it in the database.\n     *\n     * @param path: the path for the map.\n     *\n     * @returns the map that was created.\n     *\n     * #### Notes\n     * The map can only store objects that are simple\n     * JSON Objects and primitives.\n     */\n    createMap(path) {\n        const map = new ObservableJSON();\n        this._disposables.add(map);\n        this.set(path, map);\n        return map;\n    }\n    /**\n     * Create an opaque value and insert it in the database.\n     *\n     * @param path: the path for the value.\n     *\n     * @returns the value that was created.\n     */\n    createValue(path) {\n        const val = new ObservableValue();\n        this._disposables.add(val);\n        this.set(path, val);\n        return val;\n    }\n    /**\n     * Get a value at a path, or `undefined if it has not been set\n     * That value must already have been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     */\n    getValue(path) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call getValue for an ObservableValue');\n        }\n        return val.get();\n    }\n    /**\n     * Set a value at a path. That value must already have\n     * been created using `createValue`.\n     *\n     * @param path: the path for the value.\n     *\n     * @param value: the new value.\n     */\n    setValue(path, value) {\n        const val = this.get(path);\n        if (!val || val.type !== 'Value') {\n            throw Error('Can only call setValue on an ObservableValue');\n        }\n        val.set(value);\n    }\n    /**\n     * Create a view onto a subtree of the model database.\n     *\n     * @param basePath: the path for the root of the subtree.\n     *\n     * @returns an `IModelDB` with a view onto the original\n     *   `IModelDB`, with `basePath` prepended to all paths.\n     */\n    view(basePath) {\n        const view = new ModelDB({ basePath, baseDB: this });\n        this._disposables.add(view);\n        return view;\n    }\n    /**\n     * Set a value at a path. Not intended to\n     * be called by user code, instead use the\n     * `create*` factory methods.\n     *\n     * @param path: the path to set the value at.\n     *\n     * @param value: the value to set at the path.\n     */\n    set(path, value) {\n        this._db.set(this._resolvePath(path), value);\n    }\n    /**\n     * Dispose of the resources held by the database.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        if (this._toDispose) {\n            this._db.dispose();\n        }\n        this._disposables.dispose();\n    }\n    /**\n     * Compute the fully resolved path for a path argument.\n     */\n    _resolvePath(path) {\n        if (this._basePath) {\n            path = this._basePath + '.' + path;\n        }\n        return path;\n    }\n}\n//# sourceMappingURL=modeldb.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nexport function convertYMapEventToMapChange(event) {\n    let changes = new Map();\n    event.changes.keys.forEach((event, key) => {\n        changes.set(key, {\n            action: event.action,\n            oldValue: event.oldValue,\n            newValue: this.ymeta.get(key)\n        });\n    });\n    return changes;\n}\n/**\n * Creates a mutual exclude function with the following property:\n *\n * ```js\n * const mutex = createMutex()\n * mutex(() => {\n *   // This function is immediately executed\n *   mutex(() => {\n *     // This function is not executed, as the mutex is already active.\n *   })\n * })\n * ```\n */\nexport const createMutex = () => {\n    let token = true;\n    return (f) => {\n        if (token) {\n            token = false;\n            try {\n                f();\n            }\n            finally {\n                token = true;\n            }\n        }\n    };\n};\n//# sourceMappingURL=utils.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { checkIcon, undoIcon } from '@jupyterlab/ui-components';\nimport { JSONExt } from '@lumino/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditor } from './editor';\n/**\n * The class name added to a JSONEditor instance.\n */\nconst JSONEDITOR_CLASS = 'jp-JSONEditor';\n/**\n * The class name added when the Metadata editor contains invalid JSON.\n */\nconst ERROR_CLASS = 'jp-mod-error';\n/**\n * The class name added to the editor host node.\n */\nconst HOST_CLASS = 'jp-JSONEditor-host';\n/**\n * The class name added to the header area.\n */\nconst HEADER_CLASS = 'jp-JSONEditor-header';\n/**\n * A widget for editing observable JSON.\n */\nexport class JSONEditor extends Widget {\n    /**\n     * Construct a new JSON editor.\n     */\n    constructor(options) {\n        super();\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this._source = null;\n        this._originalValue = JSONExt.emptyObject;\n        this._changeGuard = false;\n        this.translator = options.translator || nullTranslator;\n        this._trans = this.translator.load('jupyterlab');\n        this.addClass(JSONEDITOR_CLASS);\n        this.headerNode = document.createElement('div');\n        this.headerNode.className = HEADER_CLASS;\n        this.revertButtonNode = undoIcon.element({\n            tag: 'span',\n            title: this._trans.__('Revert changes to data')\n        });\n        this.commitButtonNode = checkIcon.element({\n            tag: 'span',\n            title: this._trans.__('Commit changes to data'),\n            marginLeft: '8px'\n        });\n        this.editorHostNode = document.createElement('div');\n        this.editorHostNode.className = HOST_CLASS;\n        this.headerNode.appendChild(this.revertButtonNode);\n        this.headerNode.appendChild(this.commitButtonNode);\n        this.node.appendChild(this.headerNode);\n        this.node.appendChild(this.editorHostNode);\n        const model = new CodeEditor.Model();\n        model.value.text = this._trans.__('No data!');\n        model.mimeType = 'application/json';\n        model.value.changed.connect(this._onValueChanged, this);\n        this.model = model;\n        this.editor = options.editorFactory({ host: this.editorHostNode, model });\n        this.editor.setOption('readOnly', true);\n    }\n    /**\n     * The observable source.\n     */\n    get source() {\n        return this._source;\n    }\n    set source(value) {\n        if (this._source === value) {\n            return;\n        }\n        if (this._source) {\n            this._source.changed.disconnect(this._onSourceChanged, this);\n        }\n        this._source = value;\n        this.editor.setOption('readOnly', value === null);\n        if (value) {\n            value.changed.connect(this._onSourceChanged, this);\n        }\n        this._setValue();\n    }\n    /**\n     * Get whether the editor is dirty.\n     */\n    get isDirty() {\n        return this._dataDirty || this._inputDirty;\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'blur':\n                this._evtBlur(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        const node = this.editorHostNode;\n        node.addEventListener('blur', this, true);\n        node.addEventListener('click', this, true);\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.headerNode.addEventListener('click', this);\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `after-show` messages for the widget.\n     */\n    onAfterShow(msg) {\n        this.update();\n    }\n    /**\n     * Handle `update-request` messages for the widget.\n     */\n    onUpdateRequest(msg) {\n        this.editor.refresh();\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.editorHostNode;\n        node.removeEventListener('blur', this, true);\n        node.removeEventListener('click', this, true);\n        this.headerNode.removeEventListener('click', this);\n    }\n    /**\n     * Handle a change to the metadata of the source.\n     */\n    _onSourceChanged(sender, args) {\n        if (this._changeGuard) {\n            return;\n        }\n        if (this._inputDirty || this.editor.hasFocus()) {\n            this._dataDirty = true;\n            return;\n        }\n        this._setValue();\n    }\n    /**\n     * Handle change events.\n     */\n    _onValueChanged() {\n        let valid = true;\n        try {\n            const value = JSON.parse(this.editor.model.value.text);\n            this.removeClass(ERROR_CLASS);\n            this._inputDirty =\n                !this._changeGuard && !JSONExt.deepEqual(value, this._originalValue);\n        }\n        catch (err) {\n            this.addClass(ERROR_CLASS);\n            this._inputDirty = true;\n            valid = false;\n        }\n        this.revertButtonNode.hidden = !this._inputDirty;\n        this.commitButtonNode.hidden = !valid || !this._inputDirty;\n    }\n    /**\n     * Handle blur events for the text area.\n     */\n    _evtBlur(event) {\n        // Update the metadata if necessary.\n        if (!this._inputDirty && this._dataDirty) {\n            this._setValue();\n        }\n    }\n    /**\n     * Handle click events for the buttons.\n     */\n    _evtClick(event) {\n        const target = event.target;\n        if (this.revertButtonNode.contains(target)) {\n            this._setValue();\n        }\n        else if (this.commitButtonNode.contains(target)) {\n            if (!this.commitButtonNode.hidden && !this.hasClass(ERROR_CLASS)) {\n                this._changeGuard = true;\n                this._mergeContent();\n                this._changeGuard = false;\n                this._setValue();\n            }\n        }\n        else if (this.editorHostNode.contains(target)) {\n            this.editor.focus();\n        }\n    }\n    /**\n     * Merge the user content.\n     */\n    _mergeContent() {\n        const model = this.editor.model;\n        const old = this._originalValue;\n        const user = JSON.parse(model.value.text);\n        const source = this.source;\n        if (!source) {\n            return;\n        }\n        // If it is in user and has changed from old, set in new.\n        for (const key in user) {\n            if (!JSONExt.deepEqual(user[key], old[key] || null)) {\n                source.set(key, user[key]);\n            }\n        }\n        // If it was in old and is not in user, remove from source.\n        for (const key in old) {\n            if (!(key in user)) {\n                source.delete(key);\n            }\n        }\n    }\n    /**\n     * Set the value given the owner contents.\n     */\n    _setValue() {\n        this._dataDirty = false;\n        this._inputDirty = false;\n        this.revertButtonNode.hidden = true;\n        this.commitButtonNode.hidden = true;\n        this.removeClass(ERROR_CLASS);\n        const model = this.editor.model;\n        const content = this._source ? this._source.toJSON() : {};\n        this._changeGuard = true;\n        if (content === void 0) {\n            model.value.text = this._trans.__('No data!');\n            this._originalValue = JSONExt.emptyObject;\n        }\n        else {\n            const value = JSON.stringify(content, null, 4);\n            model.value.text = value;\n            this._originalValue = content;\n            // Move the cursor to within the brace.\n            if (value.length > 1 && value[0] === '{') {\n                this.editor.setCursorPosition({ line: 0, column: 1 });\n            }\n        }\n        this.editor.refresh();\n        this._changeGuard = false;\n        this.commitButtonNode.hidden = true;\n        this.revertButtonNode.hidden = true;\n    }\n}\n//# sourceMappingURL=jsoneditor.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Widget } from '@lumino/widgets';\n/**\n * The class name added to an editor widget that has a primary selection.\n */\nconst HAS_SELECTION_CLASS = 'jp-mod-has-primary-selection';\n/**\n * The class name added to an editor widget that has a cursor/selection\n * within the whitespace at the beginning of a line\n */\nconst HAS_IN_LEADING_WHITESPACE_CLASS = 'jp-mod-in-leading-whitespace';\n/**\n * A class used to indicate a drop target.\n */\nconst DROP_TARGET_CLASS = 'jp-mod-dropTarget';\n/**\n * RegExp to test for leading whitespace\n */\nconst leadingWhitespaceRe = /^\\s+$/;\n/**\n * A widget which hosts a code editor.\n */\nexport class CodeEditorWrapper extends Widget {\n    /**\n     * Construct a new code editor widget.\n     */\n    constructor(options) {\n        super();\n        this._hasRefreshedSinceAttach = false;\n        const editor = (this.editor = options.factory({\n            host: this.node,\n            model: options.model,\n            uuid: options.uuid,\n            config: options.config,\n            selectionStyle: options.selectionStyle\n        }));\n        editor.model.selections.changed.connect(this._onSelectionsChanged, this);\n        this._updateOnShow = options.updateOnShow !== false;\n    }\n    /**\n     * Get the model used by the widget.\n     */\n    get model() {\n        return this.editor.model;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        super.dispose();\n        this.editor.dispose();\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'lm-dragenter':\n                this._evtDragEnter(event);\n                break;\n            case 'lm-dragleave':\n                this._evtDragLeave(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragenter', this);\n        node.addEventListener('lm-dragleave', this);\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        // We have to refresh at least once after attaching,\n        // while visible.\n        this._hasRefreshedSinceAttach = false;\n        if (this.isVisible) {\n            this.update();\n        }\n    }\n    /**\n     * Handle `before-detach` messages for the widget.\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('lm-dragenter', this);\n        node.removeEventListener('lm-dragleave', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    /**\n     * A message handler invoked on an `'after-show'` message.\n     */\n    onAfterShow(msg) {\n        if (this._updateOnShow || !this._hasRefreshedSinceAttach) {\n            this.update();\n        }\n    }\n    /**\n     * A message handler invoked on a `'resize'` message.\n     */\n    onResize(msg) {\n        if (msg.width >= 0 && msg.height >= 0) {\n            this.editor.setSize(msg);\n        }\n        else if (this.isVisible) {\n            this.editor.resizeToFit();\n        }\n    }\n    /**\n     * A message handler invoked on an `'update-request'` message.\n     */\n    onUpdateRequest(msg) {\n        if (this.isVisible) {\n            this._hasRefreshedSinceAttach = true;\n            this.editor.refresh();\n        }\n    }\n    /**\n     * Handle a change in model selections.\n     */\n    _onSelectionsChanged() {\n        const { start, end } = this.editor.getSelection();\n        if (start.column !== end.column || start.line !== end.line) {\n            // a selection was made\n            this.addClass(HAS_SELECTION_CLASS);\n            this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n        }\n        else {\n            // the cursor was placed\n            this.removeClass(HAS_SELECTION_CLASS);\n            if (this.editor\n                .getLine(end.line)\n                .slice(0, end.column)\n                .match(leadingWhitespaceRe)) {\n                this.addClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n            else {\n                this.removeClass(HAS_IN_LEADING_WHITESPACE_CLASS);\n            }\n        }\n    }\n    /**\n     * Handle the `'lm-dragenter'` event for the widget.\n     */\n    _evtDragEnter(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        this.addClass('jp-mod-dropTarget');\n    }\n    /**\n     * Handle the `'lm-dragleave'` event for the widget.\n     */\n    _evtDragLeave(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    /**\n     * Handle the `'lm-dragover'` event for the widget.\n     */\n    _evtDragOver(event) {\n        this.removeClass(DROP_TARGET_CLASS);\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = 'copy';\n        this.addClass(DROP_TARGET_CLASS);\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        if (this.editor.getOption('readOnly') === true) {\n            return;\n        }\n        const data = Private.findTextData(event.mimeData);\n        if (data === undefined) {\n            return;\n        }\n        const coordinate = {\n            top: event.y,\n            bottom: event.y,\n            left: event.x,\n            right: event.x,\n            x: event.x,\n            y: event.y,\n            width: 0,\n            height: 0\n        };\n        const position = this.editor.getPositionForCoordinate(coordinate);\n        if (position === null) {\n            return;\n        }\n        this.removeClass(DROP_TARGET_CLASS);\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        const offset = this.editor.getOffsetAt(position);\n        this.model.value.insert(offset, data);\n    }\n}\n/**\n * A namespace for private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Given a MimeData instance, extract the first text data, if any.\n     */\n    function findTextData(mime) {\n        const types = mime.types();\n        const textType = types.find(t => t.indexOf('text') === 0);\n        if (textType === undefined) {\n            return undefined;\n        }\n        return mime.getData(textType);\n    }\n    Private.findTextData = findTextData;\n})(Private || (Private = {}));\n//# sourceMappingURL=widget.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * A namespace for `IEditorMimeTypeService`.\n */\nexport var IEditorMimeTypeService;\n(function (IEditorMimeTypeService) {\n    /**\n     * The default mime type.\n     */\n    IEditorMimeTypeService.defaultMimeType = 'text/plain';\n})(IEditorMimeTypeService || (IEditorMimeTypeService = {}));\n//# sourceMappingURL=mimetype.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Token } from '@lumino/coreutils';\n/* tslint:disable */\n/**\n * Code editor services token.\n */\nexport const IEditorServices = new Token('@jupyterlab/codeeditor:IEditorServices');\n//# sourceMappingURL=tokens.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { JSONExt } from '@lumino/coreutils';\nimport { Message } from '@lumino/messaging';\nimport { ObservableMap } from './observablemap';\n/**\n * A concrete Observable map for JSON data.\n */\nexport class ObservableJSON extends ObservableMap {\n    /**\n     * Construct a new observable JSON object.\n     */\n    constructor(options = {}) {\n        super({\n            itemCmp: JSONExt.deepEqual,\n            values: options.values\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const out = Object.create(null);\n        const keys = this.keys();\n        for (const key of keys) {\n            const value = this.get(key);\n            if (value !== undefined) {\n                out[key] = JSONExt.deepCopy(value);\n            }\n        }\n        return out;\n    }\n}\n/**\n * The namespace for ObservableJSON static data.\n */\n(function (ObservableJSON) {\n    /**\n     * An observable JSON change message.\n     */\n    class ChangeMessage extends Message {\n        /**\n         * Create a new metadata changed message.\n         */\n        constructor(type, args) {\n            super(type);\n            this.args = args;\n        }\n    }\n    ObservableJSON.ChangeMessage = ChangeMessage;\n})(ObservableJSON || (ObservableJSON = {}));\n//# sourceMappingURL=observablejson.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { Signal } from '@lumino/signaling';\n/**\n * A concrete implementation of IObservbleMap<T>.\n */\nexport class ObservableMap {\n    /**\n     * Construct a new observable map.\n     */\n    constructor(options = {}) {\n        this._map = new Map();\n        this._changed = new Signal(this);\n        this._isDisposed = false;\n        this._itemCmp = options.itemCmp || Private.itemCmp;\n        if (options.values) {\n            for (const key in options.values) {\n                this._map.set(key, options.values[key]);\n            }\n        }\n    }\n    /**\n     * The type of the Observable.\n     */\n    get type() {\n        return 'Map';\n    }\n    /**\n     * A signal emitted when the map has changed.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * Whether this map has been disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * The number of key-value pairs in the map.\n     */\n    get size() {\n        return this._map.size;\n    }\n    /**\n     * Set a key-value pair in the map\n     *\n     * @param key - The key to set.\n     *\n     * @param value - The value for the key.\n     *\n     * @returns the old value for the key, or undefined\n     *   if that did not exist.\n     *\n     * @throws if the new value is undefined.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    set(key, value) {\n        const oldVal = this._map.get(key);\n        if (value === undefined) {\n            throw Error('Cannot set an undefined value, use remove');\n        }\n        // Bail if the value does not change.\n        const itemCmp = this._itemCmp;\n        if (oldVal !== undefined && itemCmp(oldVal, value)) {\n            return oldVal;\n        }\n        this._map.set(key, value);\n        this._changed.emit({\n            type: oldVal ? 'change' : 'add',\n            key: key,\n            oldValue: oldVal,\n            newValue: value\n        });\n        return oldVal;\n    }\n    /**\n     * Get a value for a given key.\n     *\n     * @param key - the key.\n     *\n     * @returns the value for that key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Check whether the map has a key.\n     *\n     * @param key - the key to check.\n     *\n     * @returns `true` if the map has the key, `false` otherwise.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get a list of the keys in the map.\n     *\n     * @returns - a list of keys.\n     */\n    keys() {\n        const keyList = [];\n        this._map.forEach((v, k) => {\n            keyList.push(k);\n        });\n        return keyList;\n    }\n    /**\n     * Get a list of the values in the map.\n     *\n     * @returns - a list of values.\n     */\n    values() {\n        const valList = [];\n        this._map.forEach((v, k) => {\n            valList.push(v);\n        });\n        return valList;\n    }\n    /**\n     * Remove a key from the map\n     *\n     * @param key - the key to remove.\n     *\n     * @returns the value of the given key,\n     *   or undefined if that does not exist.\n     *\n     * #### Notes\n     * This is a no-op if the value does not change.\n     */\n    delete(key) {\n        const oldVal = this._map.get(key);\n        const removed = this._map.delete(key);\n        if (removed) {\n            this._changed.emit({\n                type: 'remove',\n                key: key,\n                oldValue: oldVal,\n                newValue: undefined\n            });\n        }\n        return oldVal;\n    }\n    /**\n     * Set the ObservableMap to an empty map.\n     */\n    clear() {\n        // Delete one by one to emit the correct signals.\n        const keyList = this.keys();\n        for (let i = 0; i < keyList.length; i++) {\n            this.delete(keyList[i]);\n        }\n    }\n    /**\n     * Dispose of the resources held by the map.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        Signal.clearData(this);\n        this._map.clear();\n    }\n}\n/**\n * The namespace for module private data.\n */\nvar Private;\n(function (Private) {\n    /**\n     * The default strict equality item comparator.\n     */\n    function itemCmp(first, second) {\n        return first === second;\n    }\n    Private.itemCmp = itemCmp;\n})(Private || (Private = {}));\n//# sourceMappingURL=observablemap.js.map"],"sourceRoot":""}